using System;
using System.Linq;
using System.Runtime.InteropServices;

namespace Com.GitHub.ZachDeibert.GraphicsCore.Platforms.Desktop {
    unsafe partial class OpenGLContext : IRenderContext {
        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAccum")]
        static extern void Native_Accum(GlAccumOp @op, float @value);

        public void Accum(GlAccumOp @op, float @value) {
            Native_Accum(@op, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAccumxOES")]
        static extern void Native_AccumxOES(uint @op, int @value);

        public void AccumxOES(uint @op, int @value) {
            Native_AccumxOES(@op, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glActiveProgramEXT")]
        static extern void Native_ActiveProgramEXT(uint @program);

        public void ActiveProgramEXT(uint @program) {
            Native_ActiveProgramEXT(@program);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glActiveShaderProgram")]
        static extern void Native_ActiveShaderProgram(uint @pipeline, uint @program);

        public void ActiveShaderProgram(uint @pipeline, uint @program) {
            Native_ActiveShaderProgram(@pipeline, @program);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glActiveShaderProgramEXT")]
        static extern void Native_ActiveShaderProgramEXT(uint @pipeline, uint @program);

        public void ActiveShaderProgramEXT(uint @pipeline, uint @program) {
            Native_ActiveShaderProgramEXT(@pipeline, @program);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glActiveStencilFaceEXT")]
        static extern void Native_ActiveStencilFaceEXT(GlStencilFaceDirection @face);

        public void ActiveStencilFaceEXT(GlStencilFaceDirection @face) {
            Native_ActiveStencilFaceEXT(@face);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glActiveTexture")]
        static extern void Native_ActiveTexture(GlTextureUnit @texture);

        public void ActiveTexture(GlTextureUnit @texture) {
            Native_ActiveTexture(@texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glActiveTextureARB")]
        static extern void Native_ActiveTextureARB(GlTextureUnit @texture);

        public void ActiveTextureARB(GlTextureUnit @texture) {
            Native_ActiveTextureARB(@texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glActiveVaryingNV")]
        static extern void Native_ActiveVaryingNV(uint @program, byte* @name);

        public void ActiveVaryingNV(uint @program, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                Native_ActiveVaryingNV(@program, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAlphaFragmentOp1ATI")]
        static extern void Native_AlphaFragmentOp1ATI(GlFragmentOpATI @op, uint @dst, uint @dstMod, uint @arg1, uint @arg1Rep, uint @arg1Mod);

        public void AlphaFragmentOp1ATI(GlFragmentOpATI @op, uint @dst, uint @dstMod, uint @arg1, uint @arg1Rep, uint @arg1Mod) {
            Native_AlphaFragmentOp1ATI(@op, @dst, @dstMod, @arg1, @arg1Rep, @arg1Mod);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAlphaFragmentOp2ATI")]
        static extern void Native_AlphaFragmentOp2ATI(GlFragmentOpATI @op, uint @dst, uint @dstMod, uint @arg1, uint @arg1Rep, uint @arg1Mod, uint @arg2, uint @arg2Rep, uint @arg2Mod);

        public void AlphaFragmentOp2ATI(GlFragmentOpATI @op, uint @dst, uint @dstMod, uint @arg1, uint @arg1Rep, uint @arg1Mod, uint @arg2, uint @arg2Rep, uint @arg2Mod) {
            Native_AlphaFragmentOp2ATI(@op, @dst, @dstMod, @arg1, @arg1Rep, @arg1Mod, @arg2, @arg2Rep, @arg2Mod);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAlphaFragmentOp3ATI")]
        static extern void Native_AlphaFragmentOp3ATI(GlFragmentOpATI @op, uint @dst, uint @dstMod, uint @arg1, uint @arg1Rep, uint @arg1Mod, uint @arg2, uint @arg2Rep, uint @arg2Mod, uint @arg3, uint @arg3Rep, uint @arg3Mod);

        public void AlphaFragmentOp3ATI(GlFragmentOpATI @op, uint @dst, uint @dstMod, uint @arg1, uint @arg1Rep, uint @arg1Mod, uint @arg2, uint @arg2Rep, uint @arg2Mod, uint @arg3, uint @arg3Rep, uint @arg3Mod) {
            Native_AlphaFragmentOp3ATI(@op, @dst, @dstMod, @arg1, @arg1Rep, @arg1Mod, @arg2, @arg2Rep, @arg2Mod, @arg3, @arg3Rep, @arg3Mod);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAlphaFunc")]
        static extern void Native_AlphaFunc(GlAlphaFunction @func, float @ref);

        public void AlphaFunc(GlAlphaFunction @func, float @ref) {
            Native_AlphaFunc(@func, @ref);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAlphaFuncQCOM")]
        static extern void Native_AlphaFuncQCOM(uint @func, float @ref);

        public void AlphaFuncQCOM(uint @func, float @ref) {
            Native_AlphaFuncQCOM(@func, @ref);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAlphaFuncx")]
        static extern void Native_AlphaFuncx(GlAlphaFunction @func, int @ref);

        public void AlphaFuncx(GlAlphaFunction @func, int @ref) {
            Native_AlphaFuncx(@func, @ref);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAlphaFuncxOES")]
        static extern void Native_AlphaFuncxOES(GlAlphaFunction @func, int @ref);

        public void AlphaFuncxOES(GlAlphaFunction @func, int @ref) {
            Native_AlphaFuncxOES(@func, @ref);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAlphaToCoverageDitherControlNV")]
        static extern void Native_AlphaToCoverageDitherControlNV(uint @mode);

        public void AlphaToCoverageDitherControlNV(uint @mode) {
            Native_AlphaToCoverageDitherControlNV(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glApplyFramebufferAttachmentCMAAINTEL")]
        static extern void Native_ApplyFramebufferAttachmentCMAAINTEL();

        public void ApplyFramebufferAttachmentCMAAINTEL() {
            Native_ApplyFramebufferAttachmentCMAAINTEL();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glApplyTextureEXT")]
        static extern void Native_ApplyTextureEXT(uint @mode);

        public void ApplyTextureEXT(uint @mode) {
            Native_ApplyTextureEXT(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAcquireKeyedMutexWin32EXT")]
        static extern bool Native_AcquireKeyedMutexWin32EXT(uint @memory, ulong @key, uint @timeout);

        public bool AcquireKeyedMutexWin32EXT(uint @memory, ulong @key, uint @timeout) {
            return Native_AcquireKeyedMutexWin32EXT(@memory, @key, @timeout);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAreProgramsResidentNV")]
        static extern bool Native_AreProgramsResidentNV(int @n, uint* @programs, GlBoolean* @residences);

        public bool AreProgramsResidentNV(int @n, uint[] @programs, GlBoolean[] @residences) {
            fixed (uint *ptr_programs = @programs) {
                fixed (GlBoolean *ptr_residences = @residences) {
                    return Native_AreProgramsResidentNV(@n, @ptr_programs, @ptr_residences);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAreTexturesResident")]
        static extern bool Native_AreTexturesResident(int @n, uint* @textures, GlBoolean* @residences);

        public bool AreTexturesResident(int @n, uint[] @textures, GlBoolean[] @residences) {
            fixed (uint *ptr_textures = @textures) {
                fixed (GlBoolean *ptr_residences = @residences) {
                    return Native_AreTexturesResident(@n, @ptr_textures, @ptr_residences);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAreTexturesResidentEXT")]
        static extern bool Native_AreTexturesResidentEXT(int @n, uint* @textures, GlBoolean* @residences);

        public bool AreTexturesResidentEXT(int @n, uint[] @textures, GlBoolean[] @residences) {
            fixed (uint *ptr_textures = @textures) {
                fixed (GlBoolean *ptr_residences = @residences) {
                    return Native_AreTexturesResidentEXT(@n, @ptr_textures, @ptr_residences);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glArrayElement")]
        static extern void Native_ArrayElement(int @i);

        public void ArrayElement(int @i) {
            Native_ArrayElement(@i);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glArrayElementEXT")]
        static extern void Native_ArrayElementEXT(int @i);

        public void ArrayElementEXT(int @i) {
            Native_ArrayElementEXT(@i);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glArrayObjectATI")]
        static extern void Native_ArrayObjectATI(GlEnableCap @array, int @size, uint @type, int @stride, uint @buffer, uint @offset);

        public void ArrayObjectATI(GlEnableCap @array, int @size, uint @type, int @stride, uint @buffer, uint @offset) {
            Native_ArrayObjectATI(@array, @size, @type, @stride, @buffer, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAsyncMarkerSGIX")]
        static extern void Native_AsyncMarkerSGIX(uint @marker);

        public void AsyncMarkerSGIX(uint @marker) {
            Native_AsyncMarkerSGIX(@marker);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAttachObjectARB")]
        static extern void Native_AttachObjectARB(IntPtr @containerObj, IntPtr @obj);

        public void AttachObjectARB(IntPtr @containerObj, IntPtr @obj) {
            Native_AttachObjectARB(@containerObj, @obj);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glAttachShader")]
        static extern void Native_AttachShader(uint @program, uint @shader);

        public void AttachShader(uint @program, uint @shader) {
            Native_AttachShader(@program, @shader);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBegin")]
        static extern void Native_Begin(GlPrimitiveType @mode);

        public void Begin(GlPrimitiveType @mode) {
            Native_Begin(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginConditionalRender")]
        static extern void Native_BeginConditionalRender(uint @id, GlTypeEnum @mode);

        public void BeginConditionalRender(uint @id, GlTypeEnum @mode) {
            Native_BeginConditionalRender(@id, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginConditionalRenderNV")]
        static extern void Native_BeginConditionalRenderNV(uint @id, GlTypeEnum @mode);

        public void BeginConditionalRenderNV(uint @id, GlTypeEnum @mode) {
            Native_BeginConditionalRenderNV(@id, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginConditionalRenderNVX")]
        static extern void Native_BeginConditionalRenderNVX(uint @id);

        public void BeginConditionalRenderNVX(uint @id) {
            Native_BeginConditionalRenderNVX(@id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginFragmentShaderATI")]
        static extern void Native_BeginFragmentShaderATI();

        public void BeginFragmentShaderATI() {
            Native_BeginFragmentShaderATI();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginOcclusionQueryNV")]
        static extern void Native_BeginOcclusionQueryNV(uint @id);

        public void BeginOcclusionQueryNV(uint @id) {
            Native_BeginOcclusionQueryNV(@id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginPerfMonitorAMD")]
        static extern void Native_BeginPerfMonitorAMD(uint @monitor);

        public void BeginPerfMonitorAMD(uint @monitor) {
            Native_BeginPerfMonitorAMD(@monitor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginPerfQueryINTEL")]
        static extern void Native_BeginPerfQueryINTEL(uint @queryHandle);

        public void BeginPerfQueryINTEL(uint @queryHandle) {
            Native_BeginPerfQueryINTEL(@queryHandle);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginQuery")]
        static extern void Native_BeginQuery(GlQueryTarget @target, uint @id);

        public void BeginQuery(GlQueryTarget @target, uint @id) {
            Native_BeginQuery(@target, @id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginQueryARB")]
        static extern void Native_BeginQueryARB(uint @target, uint @id);

        public void BeginQueryARB(uint @target, uint @id) {
            Native_BeginQueryARB(@target, @id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginQueryEXT")]
        static extern void Native_BeginQueryEXT(GlQueryTarget @target, uint @id);

        public void BeginQueryEXT(GlQueryTarget @target, uint @id) {
            Native_BeginQueryEXT(@target, @id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginQueryIndexed")]
        static extern void Native_BeginQueryIndexed(GlQueryTarget @target, uint @index, uint @id);

        public void BeginQueryIndexed(GlQueryTarget @target, uint @index, uint @id) {
            Native_BeginQueryIndexed(@target, @index, @id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginTransformFeedback")]
        static extern void Native_BeginTransformFeedback(GlPrimitiveType @primitiveMode);

        public void BeginTransformFeedback(GlPrimitiveType @primitiveMode) {
            Native_BeginTransformFeedback(@primitiveMode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginTransformFeedbackEXT")]
        static extern void Native_BeginTransformFeedbackEXT(GlPrimitiveType @primitiveMode);

        public void BeginTransformFeedbackEXT(GlPrimitiveType @primitiveMode) {
            Native_BeginTransformFeedbackEXT(@primitiveMode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginTransformFeedbackNV")]
        static extern void Native_BeginTransformFeedbackNV(GlPrimitiveType @primitiveMode);

        public void BeginTransformFeedbackNV(GlPrimitiveType @primitiveMode) {
            Native_BeginTransformFeedbackNV(@primitiveMode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginVertexShaderEXT")]
        static extern void Native_BeginVertexShaderEXT();

        public void BeginVertexShaderEXT() {
            Native_BeginVertexShaderEXT();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBeginVideoCaptureNV")]
        static extern void Native_BeginVideoCaptureNV(uint @video_capture_slot);

        public void BeginVideoCaptureNV(uint @video_capture_slot) {
            Native_BeginVideoCaptureNV(@video_capture_slot);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindAttribLocation")]
        static extern void Native_BindAttribLocation(uint @program, uint @index, byte* @name);

        public void BindAttribLocation(uint @program, uint @index, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                Native_BindAttribLocation(@program, @index, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindAttribLocationARB")]
        static extern void Native_BindAttribLocationARB(IntPtr @programObj, uint @index, byte* @name);

        public void BindAttribLocationARB(IntPtr @programObj, uint @index, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                Native_BindAttribLocationARB(@programObj, @index, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindBuffer")]
        static extern void Native_BindBuffer(GlBufferTargetARB @target, uint @buffer);

        public void BindBuffer(GlBufferTargetARB @target, uint @buffer) {
            Native_BindBuffer(@target, @buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindBufferARB")]
        static extern void Native_BindBufferARB(GlBufferTargetARB @target, uint @buffer);

        public void BindBufferARB(GlBufferTargetARB @target, uint @buffer) {
            Native_BindBufferARB(@target, @buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindBufferBase")]
        static extern void Native_BindBufferBase(GlBufferTargetARB @target, uint @index, uint @buffer);

        public void BindBufferBase(GlBufferTargetARB @target, uint @index, uint @buffer) {
            Native_BindBufferBase(@target, @index, @buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindBufferBaseEXT")]
        static extern void Native_BindBufferBaseEXT(GlBufferTargetARB @target, uint @index, uint @buffer);

        public void BindBufferBaseEXT(GlBufferTargetARB @target, uint @index, uint @buffer) {
            Native_BindBufferBaseEXT(@target, @index, @buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindBufferBaseNV")]
        static extern void Native_BindBufferBaseNV(GlBufferTargetARB @target, uint @index, uint @buffer);

        public void BindBufferBaseNV(GlBufferTargetARB @target, uint @index, uint @buffer) {
            Native_BindBufferBaseNV(@target, @index, @buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindBufferOffsetEXT")]
        static extern void Native_BindBufferOffsetEXT(GlBufferTargetARB @target, uint @index, uint @buffer, long @offset);

        public void BindBufferOffsetEXT(GlBufferTargetARB @target, uint @index, uint @buffer, long @offset) {
            Native_BindBufferOffsetEXT(@target, @index, @buffer, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindBufferOffsetNV")]
        static extern void Native_BindBufferOffsetNV(GlBufferTargetARB @target, uint @index, uint @buffer, long @offset);

        public void BindBufferOffsetNV(GlBufferTargetARB @target, uint @index, uint @buffer, long @offset) {
            Native_BindBufferOffsetNV(@target, @index, @buffer, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindBufferRange")]
        static extern void Native_BindBufferRange(GlBufferTargetARB @target, uint @index, uint @buffer, long @offset, long @size);

        public void BindBufferRange(GlBufferTargetARB @target, uint @index, uint @buffer, long @offset, long @size) {
            Native_BindBufferRange(@target, @index, @buffer, @offset, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindBufferRangeEXT")]
        static extern void Native_BindBufferRangeEXT(GlBufferTargetARB @target, uint @index, uint @buffer, long @offset, long @size);

        public void BindBufferRangeEXT(GlBufferTargetARB @target, uint @index, uint @buffer, long @offset, long @size) {
            Native_BindBufferRangeEXT(@target, @index, @buffer, @offset, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindBufferRangeNV")]
        static extern void Native_BindBufferRangeNV(GlBufferTargetARB @target, uint @index, uint @buffer, long @offset, long @size);

        public void BindBufferRangeNV(GlBufferTargetARB @target, uint @index, uint @buffer, long @offset, long @size) {
            Native_BindBufferRangeNV(@target, @index, @buffer, @offset, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindBuffersBase")]
        static extern void Native_BindBuffersBase(GlBufferTargetARB @target, uint @first, int @count, uint* @buffers);

        public void BindBuffersBase(GlBufferTargetARB @target, uint @first, int @count, uint[] @buffers) {
            fixed (uint *ptr_buffers = @buffers) {
                Native_BindBuffersBase(@target, @first, @count, @ptr_buffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindBuffersRange")]
        static extern void Native_BindBuffersRange(GlBufferTargetARB @target, uint @first, int @count, uint* @buffers, long* @offsets, long* @sizes);

        public void BindBuffersRange(GlBufferTargetARB @target, uint @first, int @count, uint[] @buffers, long[] @offsets, long[] @sizes) {
            fixed (uint *ptr_buffers = @buffers) {
                fixed (long *ptr_offsets = @offsets) {
                    fixed (long *ptr_sizes = @sizes) {
                        Native_BindBuffersRange(@target, @first, @count, @ptr_buffers, @ptr_offsets, @ptr_sizes);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindFragDataLocation")]
        static extern void Native_BindFragDataLocation(uint @program, uint @color, byte* @name);

        public void BindFragDataLocation(uint @program, uint @color, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                Native_BindFragDataLocation(@program, @color, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindFragDataLocationEXT")]
        static extern void Native_BindFragDataLocationEXT(uint @program, uint @color, byte* @name);

        public void BindFragDataLocationEXT(uint @program, uint @color, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                Native_BindFragDataLocationEXT(@program, @color, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindFragDataLocationIndexed")]
        static extern void Native_BindFragDataLocationIndexed(uint @program, uint @colorNumber, uint @index, byte* @name);

        public void BindFragDataLocationIndexed(uint @program, uint @colorNumber, uint @index, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                Native_BindFragDataLocationIndexed(@program, @colorNumber, @index, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindFragDataLocationIndexedEXT")]
        static extern void Native_BindFragDataLocationIndexedEXT(uint @program, uint @colorNumber, uint @index, byte* @name);

        public void BindFragDataLocationIndexedEXT(uint @program, uint @colorNumber, uint @index, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                Native_BindFragDataLocationIndexedEXT(@program, @colorNumber, @index, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindFragmentShaderATI")]
        static extern void Native_BindFragmentShaderATI(uint @id);

        public void BindFragmentShaderATI(uint @id) {
            Native_BindFragmentShaderATI(@id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindFramebuffer")]
        static extern void Native_BindFramebuffer(GlFramebufferTarget @target, uint @framebuffer);

        public void BindFramebuffer(GlFramebufferTarget @target, uint @framebuffer) {
            Native_BindFramebuffer(@target, @framebuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindFramebufferEXT")]
        static extern void Native_BindFramebufferEXT(GlFramebufferTarget @target, uint @framebuffer);

        public void BindFramebufferEXT(GlFramebufferTarget @target, uint @framebuffer) {
            Native_BindFramebufferEXT(@target, @framebuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindFramebufferOES")]
        static extern void Native_BindFramebufferOES(GlFramebufferTarget @target, uint @framebuffer);

        public void BindFramebufferOES(GlFramebufferTarget @target, uint @framebuffer) {
            Native_BindFramebufferOES(@target, @framebuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindImageTexture")]
        static extern void Native_BindImageTexture(uint @unit, uint @texture, int @level, GlBoolean @layered, int @layer, GlBufferAccessARB @access, GlInternalFormat @format);

        public void BindImageTexture(uint @unit, uint @texture, int @level, GlBoolean @layered, int @layer, GlBufferAccessARB @access, GlInternalFormat @format) {
            Native_BindImageTexture(@unit, @texture, @level, @layered, @layer, @access, @format);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindImageTextureEXT")]
        static extern void Native_BindImageTextureEXT(uint @index, uint @texture, int @level, GlBoolean @layered, int @layer, GlBufferAccessARB @access, int @format);

        public void BindImageTextureEXT(uint @index, uint @texture, int @level, GlBoolean @layered, int @layer, GlBufferAccessARB @access, int @format) {
            Native_BindImageTextureEXT(@index, @texture, @level, @layered, @layer, @access, @format);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindImageTextures")]
        static extern void Native_BindImageTextures(uint @first, int @count, uint* @textures);

        public void BindImageTextures(uint @first, int @count, uint[] @textures) {
            fixed (uint *ptr_textures = @textures) {
                Native_BindImageTextures(@first, @count, @ptr_textures);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindLightParameterEXT")]
        static extern uint Native_BindLightParameterEXT(GlLightName @light, GlLightParameter @value);

        public uint BindLightParameterEXT(GlLightName @light, GlLightParameter @value) {
            return Native_BindLightParameterEXT(@light, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindMaterialParameterEXT")]
        static extern uint Native_BindMaterialParameterEXT(GlMaterialFace @face, GlMaterialParameter @value);

        public uint BindMaterialParameterEXT(GlMaterialFace @face, GlMaterialParameter @value) {
            return Native_BindMaterialParameterEXT(@face, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindMultiTextureEXT")]
        static extern void Native_BindMultiTextureEXT(GlTextureUnit @texunit, GlTextureTarget @target, uint @texture);

        public void BindMultiTextureEXT(GlTextureUnit @texunit, GlTextureTarget @target, uint @texture) {
            Native_BindMultiTextureEXT(@texunit, @target, @texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindParameterEXT")]
        static extern uint Native_BindParameterEXT(uint @value);

        public uint BindParameterEXT(uint @value) {
            return Native_BindParameterEXT(@value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindProgramARB")]
        static extern void Native_BindProgramARB(uint @target, uint @program);

        public void BindProgramARB(uint @target, uint @program) {
            Native_BindProgramARB(@target, @program);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindProgramNV")]
        static extern void Native_BindProgramNV(uint @target, uint @id);

        public void BindProgramNV(uint @target, uint @id) {
            Native_BindProgramNV(@target, @id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindProgramPipeline")]
        static extern void Native_BindProgramPipeline(uint @pipeline);

        public void BindProgramPipeline(uint @pipeline) {
            Native_BindProgramPipeline(@pipeline);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindProgramPipelineEXT")]
        static extern void Native_BindProgramPipelineEXT(uint @pipeline);

        public void BindProgramPipelineEXT(uint @pipeline) {
            Native_BindProgramPipelineEXT(@pipeline);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindRenderbuffer")]
        static extern void Native_BindRenderbuffer(GlRenderbufferTarget @target, uint @renderbuffer);

        public void BindRenderbuffer(GlRenderbufferTarget @target, uint @renderbuffer) {
            Native_BindRenderbuffer(@target, @renderbuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindRenderbufferEXT")]
        static extern void Native_BindRenderbufferEXT(GlRenderbufferTarget @target, uint @renderbuffer);

        public void BindRenderbufferEXT(GlRenderbufferTarget @target, uint @renderbuffer) {
            Native_BindRenderbufferEXT(@target, @renderbuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindRenderbufferOES")]
        static extern void Native_BindRenderbufferOES(GlRenderbufferTarget @target, uint @renderbuffer);

        public void BindRenderbufferOES(GlRenderbufferTarget @target, uint @renderbuffer) {
            Native_BindRenderbufferOES(@target, @renderbuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindSampler")]
        static extern void Native_BindSampler(uint @unit, uint @sampler);

        public void BindSampler(uint @unit, uint @sampler) {
            Native_BindSampler(@unit, @sampler);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindSamplers")]
        static extern void Native_BindSamplers(uint @first, int @count, uint* @samplers);

        public void BindSamplers(uint @first, int @count, uint[] @samplers) {
            fixed (uint *ptr_samplers = @samplers) {
                Native_BindSamplers(@first, @count, @ptr_samplers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindTexGenParameterEXT")]
        static extern uint Native_BindTexGenParameterEXT(GlTextureUnit @unit, GlTextureCoordName @coord, GlTextureGenParameter @value);

        public uint BindTexGenParameterEXT(GlTextureUnit @unit, GlTextureCoordName @coord, GlTextureGenParameter @value) {
            return Native_BindTexGenParameterEXT(@unit, @coord, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindTexture")]
        static extern void Native_BindTexture(GlTextureTarget @target, uint @texture);

        public void BindTexture(GlTextureTarget @target, uint @texture) {
            Native_BindTexture(@target, @texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindTextureEXT")]
        static extern void Native_BindTextureEXT(GlTextureTarget @target, uint @texture);

        public void BindTextureEXT(GlTextureTarget @target, uint @texture) {
            Native_BindTextureEXT(@target, @texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindTextureUnit")]
        static extern void Native_BindTextureUnit(uint @unit, uint @texture);

        public void BindTextureUnit(uint @unit, uint @texture) {
            Native_BindTextureUnit(@unit, @texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindTextureUnitParameterEXT")]
        static extern uint Native_BindTextureUnitParameterEXT(GlTextureUnit @unit, uint @value);

        public uint BindTextureUnitParameterEXT(GlTextureUnit @unit, uint @value) {
            return Native_BindTextureUnitParameterEXT(@unit, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindTextures")]
        static extern void Native_BindTextures(uint @first, int @count, uint* @textures);

        public void BindTextures(uint @first, int @count, uint[] @textures) {
            fixed (uint *ptr_textures = @textures) {
                Native_BindTextures(@first, @count, @ptr_textures);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindTransformFeedback")]
        static extern void Native_BindTransformFeedback(GlBindTransformFeedbackTarget @target, uint @id);

        public void BindTransformFeedback(GlBindTransformFeedbackTarget @target, uint @id) {
            Native_BindTransformFeedback(@target, @id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindTransformFeedbackNV")]
        static extern void Native_BindTransformFeedbackNV(GlBufferTargetARB @target, uint @id);

        public void BindTransformFeedbackNV(GlBufferTargetARB @target, uint @id) {
            Native_BindTransformFeedbackNV(@target, @id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindVertexArray")]
        static extern void Native_BindVertexArray(uint @array);

        public void BindVertexArray(uint @array) {
            Native_BindVertexArray(@array);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindVertexArrayAPPLE")]
        static extern void Native_BindVertexArrayAPPLE(uint @array);

        public void BindVertexArrayAPPLE(uint @array) {
            Native_BindVertexArrayAPPLE(@array);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindVertexArrayOES")]
        static extern void Native_BindVertexArrayOES(uint @array);

        public void BindVertexArrayOES(uint @array) {
            Native_BindVertexArrayOES(@array);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindVertexBuffer")]
        static extern void Native_BindVertexBuffer(uint @bindingindex, uint @buffer, long @offset, int @stride);

        public void BindVertexBuffer(uint @bindingindex, uint @buffer, long @offset, int @stride) {
            Native_BindVertexBuffer(@bindingindex, @buffer, @offset, @stride);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindVertexBuffers")]
        static extern void Native_BindVertexBuffers(uint @first, int @count, uint* @buffers, long* @offsets, int* @strides);

        public void BindVertexBuffers(uint @first, int @count, uint[] @buffers, long[] @offsets, int[] @strides) {
            fixed (uint *ptr_buffers = @buffers) {
                fixed (long *ptr_offsets = @offsets) {
                    fixed (int *ptr_strides = @strides) {
                        Native_BindVertexBuffers(@first, @count, @ptr_buffers, @ptr_offsets, @ptr_strides);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindVertexShaderEXT")]
        static extern void Native_BindVertexShaderEXT(uint @id);

        public void BindVertexShaderEXT(uint @id) {
            Native_BindVertexShaderEXT(@id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindVideoCaptureStreamBufferNV")]
        static extern void Native_BindVideoCaptureStreamBufferNV(uint @video_capture_slot, uint @stream, uint @frame_region, long @offset);

        public void BindVideoCaptureStreamBufferNV(uint @video_capture_slot, uint @stream, uint @frame_region, long @offset) {
            Native_BindVideoCaptureStreamBufferNV(@video_capture_slot, @stream, @frame_region, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBindVideoCaptureStreamTextureNV")]
        static extern void Native_BindVideoCaptureStreamTextureNV(uint @video_capture_slot, uint @stream, uint @frame_region, uint @target, uint @texture);

        public void BindVideoCaptureStreamTextureNV(uint @video_capture_slot, uint @stream, uint @frame_region, uint @target, uint @texture) {
            Native_BindVideoCaptureStreamTextureNV(@video_capture_slot, @stream, @frame_region, @target, @texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBinormal3bEXT")]
        static extern void Native_Binormal3bEXT(sbyte @bx, sbyte @by, sbyte @bz);

        public void Binormal3bEXT(sbyte @bx, sbyte @by, sbyte @bz) {
            Native_Binormal3bEXT(@bx, @by, @bz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBinormal3bvEXT")]
        static extern void Native_Binormal3bvEXT(sbyte* @v);

        public void Binormal3bvEXT(sbyte[] @v) {
            fixed (sbyte *ptr_v = @v) {
                Native_Binormal3bvEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBinormal3dEXT")]
        static extern void Native_Binormal3dEXT(double @bx, double @by, double @bz);

        public void Binormal3dEXT(double @bx, double @by, double @bz) {
            Native_Binormal3dEXT(@bx, @by, @bz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBinormal3dvEXT")]
        static extern void Native_Binormal3dvEXT(double* @v);

        public void Binormal3dvEXT(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_Binormal3dvEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBinormal3fEXT")]
        static extern void Native_Binormal3fEXT(float @bx, float @by, float @bz);

        public void Binormal3fEXT(float @bx, float @by, float @bz) {
            Native_Binormal3fEXT(@bx, @by, @bz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBinormal3fvEXT")]
        static extern void Native_Binormal3fvEXT(float* @v);

        public void Binormal3fvEXT(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_Binormal3fvEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBinormal3iEXT")]
        static extern void Native_Binormal3iEXT(int @bx, int @by, int @bz);

        public void Binormal3iEXT(int @bx, int @by, int @bz) {
            Native_Binormal3iEXT(@bx, @by, @bz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBinormal3ivEXT")]
        static extern void Native_Binormal3ivEXT(int* @v);

        public void Binormal3ivEXT(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_Binormal3ivEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBinormal3sEXT")]
        static extern void Native_Binormal3sEXT(short @bx, short @by, short @bz);

        public void Binormal3sEXT(short @bx, short @by, short @bz) {
            Native_Binormal3sEXT(@bx, @by, @bz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBinormal3svEXT")]
        static extern void Native_Binormal3svEXT(short* @v);

        public void Binormal3svEXT(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_Binormal3svEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBinormalPointerEXT")]
        static extern void Native_BinormalPointerEXT(uint @type, int @stride, byte* @pointer);

        public void BinormalPointerEXT(uint @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_BinormalPointerEXT(@type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBitmap")]
        static extern void Native_Bitmap(int @width, int @height, float @xorig, float @yorig, float @xmove, float @ymove, byte* @bitmap);

        public void Bitmap(int @width, int @height, float @xorig, float @yorig, float @xmove, float @ymove, byte[] @bitmap) {
            fixed (byte *ptr_bitmap = @bitmap) {
                Native_Bitmap(@width, @height, @xorig, @yorig, @xmove, @ymove, @ptr_bitmap);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBitmapxOES")]
        static extern void Native_BitmapxOES(int @width, int @height, int @xorig, int @yorig, int @xmove, int @ymove, byte* @bitmap);

        public void BitmapxOES(int @width, int @height, int @xorig, int @yorig, int @xmove, int @ymove, byte[] @bitmap) {
            fixed (byte *ptr_bitmap = @bitmap) {
                Native_BitmapxOES(@width, @height, @xorig, @yorig, @xmove, @ymove, @ptr_bitmap);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendBarrier")]
        static extern void Native_BlendBarrier();

        public void BlendBarrier() {
            Native_BlendBarrier();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendBarrierKHR")]
        static extern void Native_BlendBarrierKHR();

        public void BlendBarrierKHR() {
            Native_BlendBarrierKHR();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendBarrierNV")]
        static extern void Native_BlendBarrierNV();

        public void BlendBarrierNV() {
            Native_BlendBarrierNV();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendColor")]
        static extern void Native_BlendColor(float @red, float @green, float @blue, float @alpha);

        public void BlendColor(float @red, float @green, float @blue, float @alpha) {
            Native_BlendColor(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendColorEXT")]
        static extern void Native_BlendColorEXT(float @red, float @green, float @blue, float @alpha);

        public void BlendColorEXT(float @red, float @green, float @blue, float @alpha) {
            Native_BlendColorEXT(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendColorxOES")]
        static extern void Native_BlendColorxOES(int @red, int @green, int @blue, int @alpha);

        public void BlendColorxOES(int @red, int @green, int @blue, int @alpha) {
            Native_BlendColorxOES(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquation")]
        static extern void Native_BlendEquation(GlBlendEquationModeEXT @mode);

        public void BlendEquation(GlBlendEquationModeEXT @mode) {
            Native_BlendEquation(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquationEXT")]
        static extern void Native_BlendEquationEXT(GlBlendEquationModeEXT @mode);

        public void BlendEquationEXT(GlBlendEquationModeEXT @mode) {
            Native_BlendEquationEXT(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquationIndexedAMD")]
        static extern void Native_BlendEquationIndexedAMD(uint @buf, GlBlendEquationModeEXT @mode);

        public void BlendEquationIndexedAMD(uint @buf, GlBlendEquationModeEXT @mode) {
            Native_BlendEquationIndexedAMD(@buf, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquationOES")]
        static extern void Native_BlendEquationOES(GlBlendEquationModeEXT @mode);

        public void BlendEquationOES(GlBlendEquationModeEXT @mode) {
            Native_BlendEquationOES(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquationSeparate")]
        static extern void Native_BlendEquationSeparate(GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha);

        public void BlendEquationSeparate(GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha) {
            Native_BlendEquationSeparate(@modeRGB, @modeAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquationSeparateEXT")]
        static extern void Native_BlendEquationSeparateEXT(GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha);

        public void BlendEquationSeparateEXT(GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha) {
            Native_BlendEquationSeparateEXT(@modeRGB, @modeAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquationSeparateIndexedAMD")]
        static extern void Native_BlendEquationSeparateIndexedAMD(uint @buf, GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha);

        public void BlendEquationSeparateIndexedAMD(uint @buf, GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha) {
            Native_BlendEquationSeparateIndexedAMD(@buf, @modeRGB, @modeAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquationSeparateOES")]
        static extern void Native_BlendEquationSeparateOES(GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha);

        public void BlendEquationSeparateOES(GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha) {
            Native_BlendEquationSeparateOES(@modeRGB, @modeAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquationSeparatei")]
        static extern void Native_BlendEquationSeparatei(uint @buf, GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha);

        public void BlendEquationSeparatei(uint @buf, GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha) {
            Native_BlendEquationSeparatei(@buf, @modeRGB, @modeAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquationSeparateiARB")]
        static extern void Native_BlendEquationSeparateiARB(uint @buf, GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha);

        public void BlendEquationSeparateiARB(uint @buf, GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha) {
            Native_BlendEquationSeparateiARB(@buf, @modeRGB, @modeAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquationSeparateiEXT")]
        static extern void Native_BlendEquationSeparateiEXT(uint @buf, GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha);

        public void BlendEquationSeparateiEXT(uint @buf, GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha) {
            Native_BlendEquationSeparateiEXT(@buf, @modeRGB, @modeAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquationSeparateiOES")]
        static extern void Native_BlendEquationSeparateiOES(uint @buf, GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha);

        public void BlendEquationSeparateiOES(uint @buf, GlBlendEquationModeEXT @modeRGB, GlBlendEquationModeEXT @modeAlpha) {
            Native_BlendEquationSeparateiOES(@buf, @modeRGB, @modeAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquationi")]
        static extern void Native_BlendEquationi(uint @buf, GlBlendEquationModeEXT @mode);

        public void BlendEquationi(uint @buf, GlBlendEquationModeEXT @mode) {
            Native_BlendEquationi(@buf, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquationiARB")]
        static extern void Native_BlendEquationiARB(uint @buf, GlBlendEquationModeEXT @mode);

        public void BlendEquationiARB(uint @buf, GlBlendEquationModeEXT @mode) {
            Native_BlendEquationiARB(@buf, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquationiEXT")]
        static extern void Native_BlendEquationiEXT(uint @buf, GlBlendEquationModeEXT @mode);

        public void BlendEquationiEXT(uint @buf, GlBlendEquationModeEXT @mode) {
            Native_BlendEquationiEXT(@buf, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendEquationiOES")]
        static extern void Native_BlendEquationiOES(uint @buf, GlBlendEquationModeEXT @mode);

        public void BlendEquationiOES(uint @buf, GlBlendEquationModeEXT @mode) {
            Native_BlendEquationiOES(@buf, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendFunc")]
        static extern void Native_BlendFunc(GlBlendingFactor @sfactor, GlBlendingFactor @dfactor);

        public void BlendFunc(GlBlendingFactor @sfactor, GlBlendingFactor @dfactor) {
            Native_BlendFunc(@sfactor, @dfactor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendFuncIndexedAMD")]
        static extern void Native_BlendFuncIndexedAMD(uint @buf, uint @src, uint @dst);

        public void BlendFuncIndexedAMD(uint @buf, uint @src, uint @dst) {
            Native_BlendFuncIndexedAMD(@buf, @src, @dst);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendFuncSeparate")]
        static extern void Native_BlendFuncSeparate(GlBlendingFactor @sfactorRGB, GlBlendingFactor @dfactorRGB, GlBlendingFactor @sfactorAlpha, GlBlendingFactor @dfactorAlpha);

        public void BlendFuncSeparate(GlBlendingFactor @sfactorRGB, GlBlendingFactor @dfactorRGB, GlBlendingFactor @sfactorAlpha, GlBlendingFactor @dfactorAlpha) {
            Native_BlendFuncSeparate(@sfactorRGB, @dfactorRGB, @sfactorAlpha, @dfactorAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendFuncSeparateEXT")]
        static extern void Native_BlendFuncSeparateEXT(GlBlendingFactor @sfactorRGB, GlBlendingFactor @dfactorRGB, GlBlendingFactor @sfactorAlpha, GlBlendingFactor @dfactorAlpha);

        public void BlendFuncSeparateEXT(GlBlendingFactor @sfactorRGB, GlBlendingFactor @dfactorRGB, GlBlendingFactor @sfactorAlpha, GlBlendingFactor @dfactorAlpha) {
            Native_BlendFuncSeparateEXT(@sfactorRGB, @dfactorRGB, @sfactorAlpha, @dfactorAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendFuncSeparateINGR")]
        static extern void Native_BlendFuncSeparateINGR(GlBlendingFactor @sfactorRGB, GlBlendingFactor @dfactorRGB, GlBlendingFactor @sfactorAlpha, GlBlendingFactor @dfactorAlpha);

        public void BlendFuncSeparateINGR(GlBlendingFactor @sfactorRGB, GlBlendingFactor @dfactorRGB, GlBlendingFactor @sfactorAlpha, GlBlendingFactor @dfactorAlpha) {
            Native_BlendFuncSeparateINGR(@sfactorRGB, @dfactorRGB, @sfactorAlpha, @dfactorAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendFuncSeparateIndexedAMD")]
        static extern void Native_BlendFuncSeparateIndexedAMD(uint @buf, GlBlendingFactor @srcRGB, GlBlendingFactor @dstRGB, GlBlendingFactor @srcAlpha, GlBlendingFactor @dstAlpha);

        public void BlendFuncSeparateIndexedAMD(uint @buf, GlBlendingFactor @srcRGB, GlBlendingFactor @dstRGB, GlBlendingFactor @srcAlpha, GlBlendingFactor @dstAlpha) {
            Native_BlendFuncSeparateIndexedAMD(@buf, @srcRGB, @dstRGB, @srcAlpha, @dstAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendFuncSeparateOES")]
        static extern void Native_BlendFuncSeparateOES(GlBlendingFactor @srcRGB, GlBlendingFactor @dstRGB, GlBlendingFactor @srcAlpha, GlBlendingFactor @dstAlpha);

        public void BlendFuncSeparateOES(GlBlendingFactor @srcRGB, GlBlendingFactor @dstRGB, GlBlendingFactor @srcAlpha, GlBlendingFactor @dstAlpha) {
            Native_BlendFuncSeparateOES(@srcRGB, @dstRGB, @srcAlpha, @dstAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendFuncSeparatei")]
        static extern void Native_BlendFuncSeparatei(uint @buf, GlBlendingFactor @srcRGB, GlBlendingFactor @dstRGB, GlBlendingFactor @srcAlpha, GlBlendingFactor @dstAlpha);

        public void BlendFuncSeparatei(uint @buf, GlBlendingFactor @srcRGB, GlBlendingFactor @dstRGB, GlBlendingFactor @srcAlpha, GlBlendingFactor @dstAlpha) {
            Native_BlendFuncSeparatei(@buf, @srcRGB, @dstRGB, @srcAlpha, @dstAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendFuncSeparateiARB")]
        static extern void Native_BlendFuncSeparateiARB(uint @buf, GlBlendingFactor @srcRGB, GlBlendingFactor @dstRGB, GlBlendingFactor @srcAlpha, GlBlendingFactor @dstAlpha);

        public void BlendFuncSeparateiARB(uint @buf, GlBlendingFactor @srcRGB, GlBlendingFactor @dstRGB, GlBlendingFactor @srcAlpha, GlBlendingFactor @dstAlpha) {
            Native_BlendFuncSeparateiARB(@buf, @srcRGB, @dstRGB, @srcAlpha, @dstAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendFuncSeparateiEXT")]
        static extern void Native_BlendFuncSeparateiEXT(uint @buf, GlBlendingFactor @srcRGB, GlBlendingFactor @dstRGB, GlBlendingFactor @srcAlpha, GlBlendingFactor @dstAlpha);

        public void BlendFuncSeparateiEXT(uint @buf, GlBlendingFactor @srcRGB, GlBlendingFactor @dstRGB, GlBlendingFactor @srcAlpha, GlBlendingFactor @dstAlpha) {
            Native_BlendFuncSeparateiEXT(@buf, @srcRGB, @dstRGB, @srcAlpha, @dstAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendFuncSeparateiOES")]
        static extern void Native_BlendFuncSeparateiOES(uint @buf, GlBlendingFactor @srcRGB, GlBlendingFactor @dstRGB, GlBlendingFactor @srcAlpha, GlBlendingFactor @dstAlpha);

        public void BlendFuncSeparateiOES(uint @buf, GlBlendingFactor @srcRGB, GlBlendingFactor @dstRGB, GlBlendingFactor @srcAlpha, GlBlendingFactor @dstAlpha) {
            Native_BlendFuncSeparateiOES(@buf, @srcRGB, @dstRGB, @srcAlpha, @dstAlpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendFunci")]
        static extern void Native_BlendFunci(uint @buf, GlBlendingFactor @src, GlBlendingFactor @dst);

        public void BlendFunci(uint @buf, GlBlendingFactor @src, GlBlendingFactor @dst) {
            Native_BlendFunci(@buf, @src, @dst);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendFunciARB")]
        static extern void Native_BlendFunciARB(uint @buf, GlBlendingFactor @src, GlBlendingFactor @dst);

        public void BlendFunciARB(uint @buf, GlBlendingFactor @src, GlBlendingFactor @dst) {
            Native_BlendFunciARB(@buf, @src, @dst);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendFunciEXT")]
        static extern void Native_BlendFunciEXT(uint @buf, GlBlendingFactor @src, GlBlendingFactor @dst);

        public void BlendFunciEXT(uint @buf, GlBlendingFactor @src, GlBlendingFactor @dst) {
            Native_BlendFunciEXT(@buf, @src, @dst);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendFunciOES")]
        static extern void Native_BlendFunciOES(uint @buf, GlBlendingFactor @src, GlBlendingFactor @dst);

        public void BlendFunciOES(uint @buf, GlBlendingFactor @src, GlBlendingFactor @dst) {
            Native_BlendFunciOES(@buf, @src, @dst);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlendParameteriNV")]
        static extern void Native_BlendParameteriNV(uint @pname, int @value);

        public void BlendParameteriNV(uint @pname, int @value) {
            Native_BlendParameteriNV(@pname, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlitFramebuffer")]
        static extern void Native_BlitFramebuffer(int @srcX0, int @srcY0, int @srcX1, int @srcY1, int @dstX0, int @dstY0, int @dstX1, int @dstY1, GlClearBufferMask @mask, GlBlitFramebufferFilter @filter);

        public void BlitFramebuffer(int @srcX0, int @srcY0, int @srcX1, int @srcY1, int @dstX0, int @dstY0, int @dstX1, int @dstY1, GlClearBufferMask @mask, GlBlitFramebufferFilter @filter) {
            Native_BlitFramebuffer(@srcX0, @srcY0, @srcX1, @srcY1, @dstX0, @dstY0, @dstX1, @dstY1, @mask, @filter);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlitFramebufferANGLE")]
        static extern void Native_BlitFramebufferANGLE(int @srcX0, int @srcY0, int @srcX1, int @srcY1, int @dstX0, int @dstY0, int @dstX1, int @dstY1, GlClearBufferMask @mask, GlBlitFramebufferFilter @filter);

        public void BlitFramebufferANGLE(int @srcX0, int @srcY0, int @srcX1, int @srcY1, int @dstX0, int @dstY0, int @dstX1, int @dstY1, GlClearBufferMask @mask, GlBlitFramebufferFilter @filter) {
            Native_BlitFramebufferANGLE(@srcX0, @srcY0, @srcX1, @srcY1, @dstX0, @dstY0, @dstX1, @dstY1, @mask, @filter);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlitFramebufferEXT")]
        static extern void Native_BlitFramebufferEXT(int @srcX0, int @srcY0, int @srcX1, int @srcY1, int @dstX0, int @dstY0, int @dstX1, int @dstY1, GlClearBufferMask @mask, GlBlitFramebufferFilter @filter);

        public void BlitFramebufferEXT(int @srcX0, int @srcY0, int @srcX1, int @srcY1, int @dstX0, int @dstY0, int @dstX1, int @dstY1, GlClearBufferMask @mask, GlBlitFramebufferFilter @filter) {
            Native_BlitFramebufferEXT(@srcX0, @srcY0, @srcX1, @srcY1, @dstX0, @dstY0, @dstX1, @dstY1, @mask, @filter);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlitFramebufferNV")]
        static extern void Native_BlitFramebufferNV(int @srcX0, int @srcY0, int @srcX1, int @srcY1, int @dstX0, int @dstY0, int @dstX1, int @dstY1, GlClearBufferMask @mask, GlBlitFramebufferFilter @filter);

        public void BlitFramebufferNV(int @srcX0, int @srcY0, int @srcX1, int @srcY1, int @dstX0, int @dstY0, int @dstX1, int @dstY1, GlClearBufferMask @mask, GlBlitFramebufferFilter @filter) {
            Native_BlitFramebufferNV(@srcX0, @srcY0, @srcX1, @srcY1, @dstX0, @dstY0, @dstX1, @dstY1, @mask, @filter);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBlitNamedFramebuffer")]
        static extern void Native_BlitNamedFramebuffer(uint @readFramebuffer, uint @drawFramebuffer, int @srcX0, int @srcY0, int @srcX1, int @srcY1, int @dstX0, int @dstY0, int @dstX1, int @dstY1, GlClearBufferMask @mask, GlBlitFramebufferFilter @filter);

        public void BlitNamedFramebuffer(uint @readFramebuffer, uint @drawFramebuffer, int @srcX0, int @srcY0, int @srcX1, int @srcY1, int @dstX0, int @dstY0, int @dstX1, int @dstY1, GlClearBufferMask @mask, GlBlitFramebufferFilter @filter) {
            Native_BlitNamedFramebuffer(@readFramebuffer, @drawFramebuffer, @srcX0, @srcY0, @srcX1, @srcY1, @dstX0, @dstY0, @dstX1, @dstY1, @mask, @filter);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBufferAddressRangeNV")]
        static extern void Native_BufferAddressRangeNV(uint @pname, uint @index, ulong @address, long @length);

        public void BufferAddressRangeNV(uint @pname, uint @index, ulong @address, long @length) {
            Native_BufferAddressRangeNV(@pname, @index, @address, @length);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBufferData")]
        static extern void Native_BufferData(GlBufferTargetARB @target, long @size, byte* @data, GlBufferUsageARB @usage);

        public void BufferData(GlBufferTargetARB @target, long @size, byte[] @data, GlBufferUsageARB @usage) {
            fixed (byte *ptr_data = @data) {
                Native_BufferData(@target, @size, @ptr_data, @usage);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBufferDataARB")]
        static extern void Native_BufferDataARB(GlBufferTargetARB @target, long @size, byte* @data, GlBufferUsageARB @usage);

        public void BufferDataARB(GlBufferTargetARB @target, long @size, byte[] @data, GlBufferUsageARB @usage) {
            fixed (byte *ptr_data = @data) {
                Native_BufferDataARB(@target, @size, @ptr_data, @usage);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBufferPageCommitmentARB")]
        static extern void Native_BufferPageCommitmentARB(uint @target, long @offset, long @size, bool @commit);

        public void BufferPageCommitmentARB(uint @target, long @offset, long @size, bool @commit) {
            Native_BufferPageCommitmentARB(@target, @offset, @size, @commit);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBufferParameteriAPPLE")]
        static extern void Native_BufferParameteriAPPLE(uint @target, uint @pname, int @param);

        public void BufferParameteriAPPLE(uint @target, uint @pname, int @param) {
            Native_BufferParameteriAPPLE(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBufferStorage")]
        static extern void Native_BufferStorage(GlBufferStorageTarget @target, long @size, byte* @data, GlMapBufferUsageMask @flags);

        public void BufferStorage(GlBufferStorageTarget @target, long @size, byte[] @data, GlMapBufferUsageMask @flags) {
            fixed (byte *ptr_data = @data) {
                Native_BufferStorage(@target, @size, @ptr_data, @flags);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBufferStorageEXT")]
        static extern void Native_BufferStorageEXT(GlBufferStorageTarget @target, long @size, byte* @data, GlMapBufferUsageMask @flags);

        public void BufferStorageEXT(GlBufferStorageTarget @target, long @size, byte[] @data, GlMapBufferUsageMask @flags) {
            fixed (byte *ptr_data = @data) {
                Native_BufferStorageEXT(@target, @size, @ptr_data, @flags);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBufferStorageExternalEXT")]
        static extern void Native_BufferStorageExternalEXT(uint @target, long @offset, long @size, byte* @clientBuffer, GlMapBufferUsageMask @flags);

        public void BufferStorageExternalEXT(uint @target, long @offset, long @size, byte[] @clientBuffer, GlMapBufferUsageMask @flags) {
            fixed (byte *ptr_clientBuffer = @clientBuffer) {
                Native_BufferStorageExternalEXT(@target, @offset, @size, @ptr_clientBuffer, @flags);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBufferStorageMemEXT")]
        static extern void Native_BufferStorageMemEXT(GlBufferTargetARB @target, long @size, uint @memory, ulong @offset);

        public void BufferStorageMemEXT(GlBufferTargetARB @target, long @size, uint @memory, ulong @offset) {
            Native_BufferStorageMemEXT(@target, @size, @memory, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBufferSubData")]
        static extern void Native_BufferSubData(GlBufferTargetARB @target, long @offset, long @size, byte* @data);

        public void BufferSubData(GlBufferTargetARB @target, long @offset, long @size, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_BufferSubData(@target, @offset, @size, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glBufferSubDataARB")]
        static extern void Native_BufferSubDataARB(GlBufferTargetARB @target, long @offset, long @size, byte* @data);

        public void BufferSubDataARB(GlBufferTargetARB @target, long @offset, long @size, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_BufferSubDataARB(@target, @offset, @size, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCallCommandListNV")]
        static extern void Native_CallCommandListNV(uint @list);

        public void CallCommandListNV(uint @list) {
            Native_CallCommandListNV(@list);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCallList")]
        static extern void Native_CallList(uint @list);

        public void CallList(uint @list) {
            Native_CallList(@list);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCallLists")]
        static extern void Native_CallLists(int @n, GlListNameType @type, byte* @lists);

        public void CallLists(int @n, GlListNameType @type, byte[] @lists) {
            fixed (byte *ptr_lists = @lists) {
                Native_CallLists(@n, @type, @ptr_lists);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCheckFramebufferStatus")]
        static extern uint Native_CheckFramebufferStatus(GlFramebufferTarget @target);

        public uint CheckFramebufferStatus(GlFramebufferTarget @target) {
            return Native_CheckFramebufferStatus(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCheckFramebufferStatusEXT")]
        static extern uint Native_CheckFramebufferStatusEXT(GlFramebufferTarget @target);

        public uint CheckFramebufferStatusEXT(GlFramebufferTarget @target) {
            return Native_CheckFramebufferStatusEXT(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCheckFramebufferStatusOES")]
        static extern uint Native_CheckFramebufferStatusOES(GlFramebufferTarget @target);

        public uint CheckFramebufferStatusOES(GlFramebufferTarget @target) {
            return Native_CheckFramebufferStatusOES(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCheckNamedFramebufferStatus")]
        static extern uint Native_CheckNamedFramebufferStatus(uint @framebuffer, GlFramebufferTarget @target);

        public uint CheckNamedFramebufferStatus(uint @framebuffer, GlFramebufferTarget @target) {
            return Native_CheckNamedFramebufferStatus(@framebuffer, @target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCheckNamedFramebufferStatusEXT")]
        static extern uint Native_CheckNamedFramebufferStatusEXT(uint @framebuffer, GlFramebufferTarget @target);

        public uint CheckNamedFramebufferStatusEXT(uint @framebuffer, GlFramebufferTarget @target) {
            return Native_CheckNamedFramebufferStatusEXT(@framebuffer, @target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClampColor")]
        static extern void Native_ClampColor(uint @target, uint @clamp);

        public void ClampColor(uint @target, uint @clamp) {
            Native_ClampColor(@target, @clamp);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClampColorARB")]
        static extern void Native_ClampColorARB(uint @target, uint @clamp);

        public void ClampColorARB(uint @target, uint @clamp) {
            Native_ClampColorARB(@target, @clamp);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClear")]
        static extern void Native_Clear(GlClearBufferMask @mask);

        public void Clear(GlClearBufferMask @mask) {
            Native_Clear(@mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearAccum")]
        static extern void Native_ClearAccum(float @red, float @green, float @blue, float @alpha);

        public void ClearAccum(float @red, float @green, float @blue, float @alpha) {
            Native_ClearAccum(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearAccumxOES")]
        static extern void Native_ClearAccumxOES(int @red, int @green, int @blue, int @alpha);

        public void ClearAccumxOES(int @red, int @green, int @blue, int @alpha) {
            Native_ClearAccumxOES(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearBufferData")]
        static extern void Native_ClearBufferData(GlBufferStorageTarget @target, GlInternalFormat @internalformat, GlPixelFormat @format, GlPixelType @type, byte* @data);

        public void ClearBufferData(GlBufferStorageTarget @target, GlInternalFormat @internalformat, GlPixelFormat @format, GlPixelType @type, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ClearBufferData(@target, @internalformat, @format, @type, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearBufferSubData")]
        static extern void Native_ClearBufferSubData(uint @target, GlInternalFormat @internalformat, long @offset, long @size, GlPixelFormat @format, GlPixelType @type, byte* @data);

        public void ClearBufferSubData(uint @target, GlInternalFormat @internalformat, long @offset, long @size, GlPixelFormat @format, GlPixelType @type, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ClearBufferSubData(@target, @internalformat, @offset, @size, @format, @type, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearBufferfi")]
        static extern void Native_ClearBufferfi(GlBuffer @buffer, int @drawbuffer, float @depth, int @stencil);

        public void ClearBufferfi(GlBuffer @buffer, int @drawbuffer, float @depth, int @stencil) {
            Native_ClearBufferfi(@buffer, @drawbuffer, @depth, @stencil);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearBufferfv")]
        static extern void Native_ClearBufferfv(GlBuffer @buffer, int @drawbuffer, float* @value);

        public void ClearBufferfv(GlBuffer @buffer, int @drawbuffer, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ClearBufferfv(@buffer, @drawbuffer, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearBufferiv")]
        static extern void Native_ClearBufferiv(GlBuffer @buffer, int @drawbuffer, int* @value);

        public void ClearBufferiv(GlBuffer @buffer, int @drawbuffer, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_ClearBufferiv(@buffer, @drawbuffer, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearBufferuiv")]
        static extern void Native_ClearBufferuiv(GlBuffer @buffer, int @drawbuffer, uint* @value);

        public void ClearBufferuiv(GlBuffer @buffer, int @drawbuffer, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_ClearBufferuiv(@buffer, @drawbuffer, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearColor")]
        static extern void Native_ClearColor(float @red, float @green, float @blue, float @alpha);

        public void ClearColor(float @red, float @green, float @blue, float @alpha) {
            Native_ClearColor(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearColorIiEXT")]
        static extern void Native_ClearColorIiEXT(int @red, int @green, int @blue, int @alpha);

        public void ClearColorIiEXT(int @red, int @green, int @blue, int @alpha) {
            Native_ClearColorIiEXT(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearColorIuiEXT")]
        static extern void Native_ClearColorIuiEXT(uint @red, uint @green, uint @blue, uint @alpha);

        public void ClearColorIuiEXT(uint @red, uint @green, uint @blue, uint @alpha) {
            Native_ClearColorIuiEXT(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearColorx")]
        static extern void Native_ClearColorx(int @red, int @green, int @blue, int @alpha);

        public void ClearColorx(int @red, int @green, int @blue, int @alpha) {
            Native_ClearColorx(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearColorxOES")]
        static extern void Native_ClearColorxOES(int @red, int @green, int @blue, int @alpha);

        public void ClearColorxOES(int @red, int @green, int @blue, int @alpha) {
            Native_ClearColorxOES(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearDepth")]
        static extern void Native_ClearDepth(double @depth);

        public void ClearDepth(double @depth) {
            Native_ClearDepth(@depth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearDepthdNV")]
        static extern void Native_ClearDepthdNV(double @depth);

        public void ClearDepthdNV(double @depth) {
            Native_ClearDepthdNV(@depth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearDepthf")]
        static extern void Native_ClearDepthf(float @d);

        public void ClearDepthf(float @d) {
            Native_ClearDepthf(@d);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearDepthfOES")]
        static extern void Native_ClearDepthfOES(float @depth);

        public void ClearDepthfOES(float @depth) {
            Native_ClearDepthfOES(@depth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearDepthx")]
        static extern void Native_ClearDepthx(int @depth);

        public void ClearDepthx(int @depth) {
            Native_ClearDepthx(@depth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearDepthxOES")]
        static extern void Native_ClearDepthxOES(int @depth);

        public void ClearDepthxOES(int @depth) {
            Native_ClearDepthxOES(@depth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearIndex")]
        static extern void Native_ClearIndex(float @c);

        public void ClearIndex(float @c) {
            Native_ClearIndex(@c);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearNamedBufferData")]
        static extern void Native_ClearNamedBufferData(uint @buffer, GlInternalFormat @internalformat, GlPixelFormat @format, GlPixelType @type, byte* @data);

        public void ClearNamedBufferData(uint @buffer, GlInternalFormat @internalformat, GlPixelFormat @format, GlPixelType @type, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ClearNamedBufferData(@buffer, @internalformat, @format, @type, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearNamedBufferDataEXT")]
        static extern void Native_ClearNamedBufferDataEXT(uint @buffer, GlInternalFormat @internalformat, GlPixelFormat @format, GlPixelType @type, byte* @data);

        public void ClearNamedBufferDataEXT(uint @buffer, GlInternalFormat @internalformat, GlPixelFormat @format, GlPixelType @type, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ClearNamedBufferDataEXT(@buffer, @internalformat, @format, @type, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearNamedBufferSubData")]
        static extern void Native_ClearNamedBufferSubData(uint @buffer, GlInternalFormat @internalformat, long @offset, long @size, GlPixelFormat @format, GlPixelType @type, byte* @data);

        public void ClearNamedBufferSubData(uint @buffer, GlInternalFormat @internalformat, long @offset, long @size, GlPixelFormat @format, GlPixelType @type, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ClearNamedBufferSubData(@buffer, @internalformat, @offset, @size, @format, @type, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearNamedBufferSubDataEXT")]
        static extern void Native_ClearNamedBufferSubDataEXT(uint @buffer, uint @internalformat, long @offset, long @size, GlPixelFormat @format, GlPixelType @type, byte* @data);

        public void ClearNamedBufferSubDataEXT(uint @buffer, uint @internalformat, long @offset, long @size, GlPixelFormat @format, GlPixelType @type, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ClearNamedBufferSubDataEXT(@buffer, @internalformat, @offset, @size, @format, @type, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearNamedFramebufferfi")]
        static extern void Native_ClearNamedFramebufferfi(uint @framebuffer, GlBuffer @buffer, int @drawbuffer, float @depth, int @stencil);

        public void ClearNamedFramebufferfi(uint @framebuffer, GlBuffer @buffer, int @drawbuffer, float @depth, int @stencil) {
            Native_ClearNamedFramebufferfi(@framebuffer, @buffer, @drawbuffer, @depth, @stencil);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearNamedFramebufferfv")]
        static extern void Native_ClearNamedFramebufferfv(uint @framebuffer, GlBuffer @buffer, int @drawbuffer, float* @value);

        public void ClearNamedFramebufferfv(uint @framebuffer, GlBuffer @buffer, int @drawbuffer, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ClearNamedFramebufferfv(@framebuffer, @buffer, @drawbuffer, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearNamedFramebufferiv")]
        static extern void Native_ClearNamedFramebufferiv(uint @framebuffer, GlBuffer @buffer, int @drawbuffer, int* @value);

        public void ClearNamedFramebufferiv(uint @framebuffer, GlBuffer @buffer, int @drawbuffer, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_ClearNamedFramebufferiv(@framebuffer, @buffer, @drawbuffer, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearNamedFramebufferuiv")]
        static extern void Native_ClearNamedFramebufferuiv(uint @framebuffer, GlBuffer @buffer, int @drawbuffer, uint* @value);

        public void ClearNamedFramebufferuiv(uint @framebuffer, GlBuffer @buffer, int @drawbuffer, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_ClearNamedFramebufferuiv(@framebuffer, @buffer, @drawbuffer, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearPixelLocalStorageuiEXT")]
        static extern void Native_ClearPixelLocalStorageuiEXT(int @offset, int @n, uint* @values);

        public void ClearPixelLocalStorageuiEXT(int @offset, int @n, uint[] @values) {
            fixed (uint *ptr_values = @values) {
                Native_ClearPixelLocalStorageuiEXT(@offset, @n, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearStencil")]
        static extern void Native_ClearStencil(int @s);

        public void ClearStencil(int @s) {
            Native_ClearStencil(@s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearTexImage")]
        static extern void Native_ClearTexImage(uint @texture, int @level, GlPixelFormat @format, GlPixelType @type, byte* @data);

        public void ClearTexImage(uint @texture, int @level, GlPixelFormat @format, GlPixelType @type, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ClearTexImage(@texture, @level, @format, @type, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearTexImageEXT")]
        static extern void Native_ClearTexImageEXT(uint @texture, int @level, GlPixelFormat @format, GlPixelType @type, byte* @data);

        public void ClearTexImageEXT(uint @texture, int @level, GlPixelFormat @format, GlPixelType @type, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ClearTexImageEXT(@texture, @level, @format, @type, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearTexSubImage")]
        static extern void Native_ClearTexSubImage(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte* @data);

        public void ClearTexSubImage(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ClearTexSubImage(@texture, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @type, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClearTexSubImageEXT")]
        static extern void Native_ClearTexSubImageEXT(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte* @data);

        public void ClearTexSubImageEXT(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ClearTexSubImageEXT(@texture, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @type, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClientActiveTexture")]
        static extern void Native_ClientActiveTexture(GlTextureUnit @texture);

        public void ClientActiveTexture(GlTextureUnit @texture) {
            Native_ClientActiveTexture(@texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClientActiveTextureARB")]
        static extern void Native_ClientActiveTextureARB(GlTextureUnit @texture);

        public void ClientActiveTextureARB(GlTextureUnit @texture) {
            Native_ClientActiveTextureARB(@texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClientActiveVertexStreamATI")]
        static extern void Native_ClientActiveVertexStreamATI(uint @stream);

        public void ClientActiveVertexStreamATI(uint @stream) {
            Native_ClientActiveVertexStreamATI(@stream);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClientAttribDefaultEXT")]
        static extern void Native_ClientAttribDefaultEXT(GlClientAttribMask @mask);

        public void ClientAttribDefaultEXT(GlClientAttribMask @mask) {
            Native_ClientAttribDefaultEXT(@mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClientWaitSync")]
        static extern uint Native_ClientWaitSync(IntPtr @sync, GlSyncObjectMask @flags, ulong @timeout);

        public uint ClientWaitSync(IntPtr @sync, GlSyncObjectMask @flags, ulong @timeout) {
            return Native_ClientWaitSync(@sync, @flags, @timeout);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClientWaitSyncAPPLE")]
        static extern uint Native_ClientWaitSyncAPPLE(IntPtr @sync, GlSyncObjectMask @flags, ulong @timeout);

        public uint ClientWaitSyncAPPLE(IntPtr @sync, GlSyncObjectMask @flags, ulong @timeout) {
            return Native_ClientWaitSyncAPPLE(@sync, @flags, @timeout);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClipControl")]
        static extern void Native_ClipControl(GlClipControlOrigin @origin, GlClipControlDepth @depth);

        public void ClipControl(GlClipControlOrigin @origin, GlClipControlDepth @depth) {
            Native_ClipControl(@origin, @depth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClipControlEXT")]
        static extern void Native_ClipControlEXT(uint @origin, uint @depth);

        public void ClipControlEXT(uint @origin, uint @depth) {
            Native_ClipControlEXT(@origin, @depth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClipPlane")]
        static extern void Native_ClipPlane(GlClipPlaneName @plane, double* @equation);

        public void ClipPlane(GlClipPlaneName @plane, double[] @equation) {
            fixed (double *ptr_equation = @equation) {
                Native_ClipPlane(@plane, @ptr_equation);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClipPlanef")]
        static extern void Native_ClipPlanef(GlClipPlaneName @p, float* @eqn);

        public void ClipPlanef(GlClipPlaneName @p, float[] @eqn) {
            fixed (float *ptr_eqn = @eqn) {
                Native_ClipPlanef(@p, @ptr_eqn);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClipPlanefIMG")]
        static extern void Native_ClipPlanefIMG(GlClipPlaneName @p, float* @eqn);

        public void ClipPlanefIMG(GlClipPlaneName @p, float[] @eqn) {
            fixed (float *ptr_eqn = @eqn) {
                Native_ClipPlanefIMG(@p, @ptr_eqn);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClipPlanefOES")]
        static extern void Native_ClipPlanefOES(GlClipPlaneName @plane, float* @equation);

        public void ClipPlanefOES(GlClipPlaneName @plane, float[] @equation) {
            fixed (float *ptr_equation = @equation) {
                Native_ClipPlanefOES(@plane, @ptr_equation);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClipPlanex")]
        static extern void Native_ClipPlanex(GlClipPlaneName @plane, int* @equation);

        public void ClipPlanex(GlClipPlaneName @plane, int[] @equation) {
            fixed (int *ptr_equation = @equation) {
                Native_ClipPlanex(@plane, @ptr_equation);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClipPlanexIMG")]
        static extern void Native_ClipPlanexIMG(GlClipPlaneName @p, int* @eqn);

        public void ClipPlanexIMG(GlClipPlaneName @p, int[] @eqn) {
            fixed (int *ptr_eqn = @eqn) {
                Native_ClipPlanexIMG(@p, @ptr_eqn);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glClipPlanexOES")]
        static extern void Native_ClipPlanexOES(GlClipPlaneName @plane, int* @equation);

        public void ClipPlanexOES(GlClipPlaneName @plane, int[] @equation) {
            fixed (int *ptr_equation = @equation) {
                Native_ClipPlanexOES(@plane, @ptr_equation);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3b")]
        static extern void Native_Color3b(sbyte @red, sbyte @green, sbyte @blue);

        public void Color3b(sbyte @red, sbyte @green, sbyte @blue) {
            Native_Color3b(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3bv")]
        static extern void Native_Color3bv(sbyte* @v);

        public void Color3bv(sbyte[] @v) {
            fixed (sbyte *ptr_v = @v) {
                Native_Color3bv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3d")]
        static extern void Native_Color3d(double @red, double @green, double @blue);

        public void Color3d(double @red, double @green, double @blue) {
            Native_Color3d(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3dv")]
        static extern void Native_Color3dv(double* @v);

        public void Color3dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_Color3dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3f")]
        static extern void Native_Color3f(float @red, float @green, float @blue);

        public void Color3f(float @red, float @green, float @blue) {
            Native_Color3f(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3fVertex3fSUN")]
        static extern void Native_Color3fVertex3fSUN(float @r, float @g, float @b, float @x, float @y, float @z);

        public void Color3fVertex3fSUN(float @r, float @g, float @b, float @x, float @y, float @z) {
            Native_Color3fVertex3fSUN(@r, @g, @b, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3fVertex3fvSUN")]
        static extern void Native_Color3fVertex3fvSUN(float* @c, float* @v);

        public void Color3fVertex3fvSUN(float[] @c, float[] @v) {
            fixed (float *ptr_c = @c) {
                fixed (float *ptr_v = @v) {
                    Native_Color3fVertex3fvSUN(@ptr_c, @ptr_v);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3fv")]
        static extern void Native_Color3fv(float* @v);

        public void Color3fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_Color3fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3hNV")]
        static extern void Native_Color3hNV(ushort @red, ushort @green, ushort @blue);

        public void Color3hNV(ushort @red, ushort @green, ushort @blue) {
            Native_Color3hNV(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3hvNV")]
        static extern void Native_Color3hvNV(ushort* @v);

        public void Color3hvNV(ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_Color3hvNV(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3i")]
        static extern void Native_Color3i(int @red, int @green, int @blue);

        public void Color3i(int @red, int @green, int @blue) {
            Native_Color3i(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3iv")]
        static extern void Native_Color3iv(int* @v);

        public void Color3iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_Color3iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3s")]
        static extern void Native_Color3s(short @red, short @green, short @blue);

        public void Color3s(short @red, short @green, short @blue) {
            Native_Color3s(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3sv")]
        static extern void Native_Color3sv(short* @v);

        public void Color3sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_Color3sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3ub")]
        static extern void Native_Color3ub(byte @red, byte @green, byte @blue);

        public void Color3ub(byte @red, byte @green, byte @blue) {
            Native_Color3ub(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3ubv")]
        static extern void Native_Color3ubv(byte* @v);

        public void Color3ubv(byte[] @v) {
            fixed (byte *ptr_v = @v) {
                Native_Color3ubv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3ui")]
        static extern void Native_Color3ui(uint @red, uint @green, uint @blue);

        public void Color3ui(uint @red, uint @green, uint @blue) {
            Native_Color3ui(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3uiv")]
        static extern void Native_Color3uiv(uint* @v);

        public void Color3uiv(uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_Color3uiv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3us")]
        static extern void Native_Color3us(ushort @red, ushort @green, ushort @blue);

        public void Color3us(ushort @red, ushort @green, ushort @blue) {
            Native_Color3us(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3usv")]
        static extern void Native_Color3usv(ushort* @v);

        public void Color3usv(ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_Color3usv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3xOES")]
        static extern void Native_Color3xOES(int @red, int @green, int @blue);

        public void Color3xOES(int @red, int @green, int @blue) {
            Native_Color3xOES(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor3xvOES")]
        static extern void Native_Color3xvOES(int* @components);

        public void Color3xvOES(int[] @components) {
            fixed (int *ptr_components = @components) {
                Native_Color3xvOES(@ptr_components);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4b")]
        static extern void Native_Color4b(sbyte @red, sbyte @green, sbyte @blue, sbyte @alpha);

        public void Color4b(sbyte @red, sbyte @green, sbyte @blue, sbyte @alpha) {
            Native_Color4b(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4bv")]
        static extern void Native_Color4bv(sbyte* @v);

        public void Color4bv(sbyte[] @v) {
            fixed (sbyte *ptr_v = @v) {
                Native_Color4bv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4d")]
        static extern void Native_Color4d(double @red, double @green, double @blue, double @alpha);

        public void Color4d(double @red, double @green, double @blue, double @alpha) {
            Native_Color4d(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4dv")]
        static extern void Native_Color4dv(double* @v);

        public void Color4dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_Color4dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4f")]
        static extern void Native_Color4f(float @red, float @green, float @blue, float @alpha);

        public void Color4f(float @red, float @green, float @blue, float @alpha) {
            Native_Color4f(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4fNormal3fVertex3fSUN")]
        static extern void Native_Color4fNormal3fVertex3fSUN(float @r, float @g, float @b, float @a, float @nx, float @ny, float @nz, float @x, float @y, float @z);

        public void Color4fNormal3fVertex3fSUN(float @r, float @g, float @b, float @a, float @nx, float @ny, float @nz, float @x, float @y, float @z) {
            Native_Color4fNormal3fVertex3fSUN(@r, @g, @b, @a, @nx, @ny, @nz, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4fNormal3fVertex3fvSUN")]
        static extern void Native_Color4fNormal3fVertex3fvSUN(float* @c, float* @n, float* @v);

        public void Color4fNormal3fVertex3fvSUN(float[] @c, float[] @n, float[] @v) {
            fixed (float *ptr_c = @c) {
                fixed (float *ptr_n = @n) {
                    fixed (float *ptr_v = @v) {
                        Native_Color4fNormal3fVertex3fvSUN(@ptr_c, @ptr_n, @ptr_v);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4fv")]
        static extern void Native_Color4fv(float* @v);

        public void Color4fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_Color4fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4hNV")]
        static extern void Native_Color4hNV(ushort @red, ushort @green, ushort @blue, ushort @alpha);

        public void Color4hNV(ushort @red, ushort @green, ushort @blue, ushort @alpha) {
            Native_Color4hNV(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4hvNV")]
        static extern void Native_Color4hvNV(ushort* @v);

        public void Color4hvNV(ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_Color4hvNV(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4i")]
        static extern void Native_Color4i(int @red, int @green, int @blue, int @alpha);

        public void Color4i(int @red, int @green, int @blue, int @alpha) {
            Native_Color4i(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4iv")]
        static extern void Native_Color4iv(int* @v);

        public void Color4iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_Color4iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4s")]
        static extern void Native_Color4s(short @red, short @green, short @blue, short @alpha);

        public void Color4s(short @red, short @green, short @blue, short @alpha) {
            Native_Color4s(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4sv")]
        static extern void Native_Color4sv(short* @v);

        public void Color4sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_Color4sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4ub")]
        static extern void Native_Color4ub(byte @red, byte @green, byte @blue, byte @alpha);

        public void Color4ub(byte @red, byte @green, byte @blue, byte @alpha) {
            Native_Color4ub(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4ubVertex2fSUN")]
        static extern void Native_Color4ubVertex2fSUN(byte @r, byte @g, byte @b, byte @a, float @x, float @y);

        public void Color4ubVertex2fSUN(byte @r, byte @g, byte @b, byte @a, float @x, float @y) {
            Native_Color4ubVertex2fSUN(@r, @g, @b, @a, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4ubVertex2fvSUN")]
        static extern void Native_Color4ubVertex2fvSUN(byte* @c, float* @v);

        public void Color4ubVertex2fvSUN(byte[] @c, float[] @v) {
            fixed (byte *ptr_c = @c) {
                fixed (float *ptr_v = @v) {
                    Native_Color4ubVertex2fvSUN(@ptr_c, @ptr_v);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4ubVertex3fSUN")]
        static extern void Native_Color4ubVertex3fSUN(byte @r, byte @g, byte @b, byte @a, float @x, float @y, float @z);

        public void Color4ubVertex3fSUN(byte @r, byte @g, byte @b, byte @a, float @x, float @y, float @z) {
            Native_Color4ubVertex3fSUN(@r, @g, @b, @a, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4ubVertex3fvSUN")]
        static extern void Native_Color4ubVertex3fvSUN(byte* @c, float* @v);

        public void Color4ubVertex3fvSUN(byte[] @c, float[] @v) {
            fixed (byte *ptr_c = @c) {
                fixed (float *ptr_v = @v) {
                    Native_Color4ubVertex3fvSUN(@ptr_c, @ptr_v);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4ubv")]
        static extern void Native_Color4ubv(byte* @v);

        public void Color4ubv(byte[] @v) {
            fixed (byte *ptr_v = @v) {
                Native_Color4ubv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4ui")]
        static extern void Native_Color4ui(uint @red, uint @green, uint @blue, uint @alpha);

        public void Color4ui(uint @red, uint @green, uint @blue, uint @alpha) {
            Native_Color4ui(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4uiv")]
        static extern void Native_Color4uiv(uint* @v);

        public void Color4uiv(uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_Color4uiv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4us")]
        static extern void Native_Color4us(ushort @red, ushort @green, ushort @blue, ushort @alpha);

        public void Color4us(ushort @red, ushort @green, ushort @blue, ushort @alpha) {
            Native_Color4us(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4usv")]
        static extern void Native_Color4usv(ushort* @v);

        public void Color4usv(ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_Color4usv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4x")]
        static extern void Native_Color4x(int @red, int @green, int @blue, int @alpha);

        public void Color4x(int @red, int @green, int @blue, int @alpha) {
            Native_Color4x(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4xOES")]
        static extern void Native_Color4xOES(int @red, int @green, int @blue, int @alpha);

        public void Color4xOES(int @red, int @green, int @blue, int @alpha) {
            Native_Color4xOES(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColor4xvOES")]
        static extern void Native_Color4xvOES(int* @components);

        public void Color4xvOES(int[] @components) {
            fixed (int *ptr_components = @components) {
                Native_Color4xvOES(@ptr_components);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorFormatNV")]
        static extern void Native_ColorFormatNV(int @size, uint @type, int @stride);

        public void ColorFormatNV(int @size, uint @type, int @stride) {
            Native_ColorFormatNV(@size, @type, @stride);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorFragmentOp1ATI")]
        static extern void Native_ColorFragmentOp1ATI(GlFragmentOpATI @op, uint @dst, uint @dstMask, uint @dstMod, uint @arg1, uint @arg1Rep, uint @arg1Mod);

        public void ColorFragmentOp1ATI(GlFragmentOpATI @op, uint @dst, uint @dstMask, uint @dstMod, uint @arg1, uint @arg1Rep, uint @arg1Mod) {
            Native_ColorFragmentOp1ATI(@op, @dst, @dstMask, @dstMod, @arg1, @arg1Rep, @arg1Mod);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorFragmentOp2ATI")]
        static extern void Native_ColorFragmentOp2ATI(GlFragmentOpATI @op, uint @dst, uint @dstMask, uint @dstMod, uint @arg1, uint @arg1Rep, uint @arg1Mod, uint @arg2, uint @arg2Rep, uint @arg2Mod);

        public void ColorFragmentOp2ATI(GlFragmentOpATI @op, uint @dst, uint @dstMask, uint @dstMod, uint @arg1, uint @arg1Rep, uint @arg1Mod, uint @arg2, uint @arg2Rep, uint @arg2Mod) {
            Native_ColorFragmentOp2ATI(@op, @dst, @dstMask, @dstMod, @arg1, @arg1Rep, @arg1Mod, @arg2, @arg2Rep, @arg2Mod);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorFragmentOp3ATI")]
        static extern void Native_ColorFragmentOp3ATI(GlFragmentOpATI @op, uint @dst, uint @dstMask, uint @dstMod, uint @arg1, uint @arg1Rep, uint @arg1Mod, uint @arg2, uint @arg2Rep, uint @arg2Mod, uint @arg3, uint @arg3Rep, uint @arg3Mod);

        public void ColorFragmentOp3ATI(GlFragmentOpATI @op, uint @dst, uint @dstMask, uint @dstMod, uint @arg1, uint @arg1Rep, uint @arg1Mod, uint @arg2, uint @arg2Rep, uint @arg2Mod, uint @arg3, uint @arg3Rep, uint @arg3Mod) {
            Native_ColorFragmentOp3ATI(@op, @dst, @dstMask, @dstMod, @arg1, @arg1Rep, @arg1Mod, @arg2, @arg2Rep, @arg2Mod, @arg3, @arg3Rep, @arg3Mod);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorMask")]
        static extern void Native_ColorMask(GlBoolean @red, GlBoolean @green, GlBoolean @blue, GlBoolean @alpha);

        public void ColorMask(GlBoolean @red, GlBoolean @green, GlBoolean @blue, GlBoolean @alpha) {
            Native_ColorMask(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorMaskIndexedEXT")]
        static extern void Native_ColorMaskIndexedEXT(uint @index, GlBoolean @r, GlBoolean @g, GlBoolean @b, GlBoolean @a);

        public void ColorMaskIndexedEXT(uint @index, GlBoolean @r, GlBoolean @g, GlBoolean @b, GlBoolean @a) {
            Native_ColorMaskIndexedEXT(@index, @r, @g, @b, @a);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorMaski")]
        static extern void Native_ColorMaski(uint @index, GlBoolean @r, GlBoolean @g, GlBoolean @b, GlBoolean @a);

        public void ColorMaski(uint @index, GlBoolean @r, GlBoolean @g, GlBoolean @b, GlBoolean @a) {
            Native_ColorMaski(@index, @r, @g, @b, @a);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorMaskiEXT")]
        static extern void Native_ColorMaskiEXT(uint @index, GlBoolean @r, GlBoolean @g, GlBoolean @b, GlBoolean @a);

        public void ColorMaskiEXT(uint @index, GlBoolean @r, GlBoolean @g, GlBoolean @b, GlBoolean @a) {
            Native_ColorMaskiEXT(@index, @r, @g, @b, @a);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorMaskiOES")]
        static extern void Native_ColorMaskiOES(uint @index, GlBoolean @r, GlBoolean @g, GlBoolean @b, GlBoolean @a);

        public void ColorMaskiOES(uint @index, GlBoolean @r, GlBoolean @g, GlBoolean @b, GlBoolean @a) {
            Native_ColorMaskiOES(@index, @r, @g, @b, @a);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorMaterial")]
        static extern void Native_ColorMaterial(GlMaterialFace @face, GlColorMaterialParameter @mode);

        public void ColorMaterial(GlMaterialFace @face, GlColorMaterialParameter @mode) {
            Native_ColorMaterial(@face, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorP3ui")]
        static extern void Native_ColorP3ui(GlColorPointerType @type, uint @color);

        public void ColorP3ui(GlColorPointerType @type, uint @color) {
            Native_ColorP3ui(@type, @color);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorP3uiv")]
        static extern void Native_ColorP3uiv(GlColorPointerType @type, uint* @color);

        public void ColorP3uiv(GlColorPointerType @type, uint[] @color) {
            fixed (uint *ptr_color = @color) {
                Native_ColorP3uiv(@type, @ptr_color);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorP4ui")]
        static extern void Native_ColorP4ui(GlColorPointerType @type, uint @color);

        public void ColorP4ui(GlColorPointerType @type, uint @color) {
            Native_ColorP4ui(@type, @color);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorP4uiv")]
        static extern void Native_ColorP4uiv(GlColorPointerType @type, uint* @color);

        public void ColorP4uiv(GlColorPointerType @type, uint[] @color) {
            fixed (uint *ptr_color = @color) {
                Native_ColorP4uiv(@type, @ptr_color);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorPointer")]
        static extern void Native_ColorPointer(int @size, GlColorPointerType @type, int @stride, byte* @pointer);

        public void ColorPointer(int @size, GlColorPointerType @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_ColorPointer(@size, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorPointerEXT")]
        static extern void Native_ColorPointerEXT(int @size, GlColorPointerType @type, int @stride, int @count, byte* @pointer);

        public void ColorPointerEXT(int @size, GlColorPointerType @type, int @stride, int @count, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_ColorPointerEXT(@size, @type, @stride, @count, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorPointerListIBM")]
        static extern void Native_ColorPointerListIBM(int @size, GlColorPointerType @type, int @stride, byte** @pointer, int @ptrstride);

        public void ColorPointerListIBM(int @size, GlColorPointerType @type, int @stride, byte[][] @pointer, int @ptrstride) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_ColorPointerListIBM(@size, @type, @stride, (byte **) ptr_pointer.ToPointer(), @ptrstride);
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorPointervINTEL")]
        static extern void Native_ColorPointervINTEL(int @size, GlVertexPointerType @type, byte** @pointer);

        public void ColorPointervINTEL(int @size, GlVertexPointerType @type, byte[][] @pointer) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_ColorPointervINTEL(@size, @type, (byte **) ptr_pointer.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorSubTable")]
        static extern void Native_ColorSubTable(GlColorTableTarget @target, int @start, int @count, GlPixelFormat @format, GlPixelType @type, byte* @data);

        public void ColorSubTable(GlColorTableTarget @target, int @start, int @count, GlPixelFormat @format, GlPixelType @type, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ColorSubTable(@target, @start, @count, @format, @type, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorSubTableEXT")]
        static extern void Native_ColorSubTableEXT(GlColorTableTarget @target, int @start, int @count, GlPixelFormat @format, GlPixelType @type, byte* @data);

        public void ColorSubTableEXT(GlColorTableTarget @target, int @start, int @count, GlPixelFormat @format, GlPixelType @type, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ColorSubTableEXT(@target, @start, @count, @format, @type, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorTable")]
        static extern void Native_ColorTable(GlColorTableTarget @target, GlInternalFormat @internalformat, int @width, GlPixelFormat @format, GlPixelType @type, byte* @table);

        public void ColorTable(GlColorTableTarget @target, GlInternalFormat @internalformat, int @width, GlPixelFormat @format, GlPixelType @type, byte[] @table) {
            fixed (byte *ptr_table = @table) {
                Native_ColorTable(@target, @internalformat, @width, @format, @type, @ptr_table);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorTableEXT")]
        static extern void Native_ColorTableEXT(GlColorTableTarget @target, GlInternalFormat @internalFormat, int @width, GlPixelFormat @format, GlPixelType @type, byte* @table);

        public void ColorTableEXT(GlColorTableTarget @target, GlInternalFormat @internalFormat, int @width, GlPixelFormat @format, GlPixelType @type, byte[] @table) {
            fixed (byte *ptr_table = @table) {
                Native_ColorTableEXT(@target, @internalFormat, @width, @format, @type, @ptr_table);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorTableParameterfv")]
        static extern void Native_ColorTableParameterfv(GlColorTableTarget @target, GlColorTableParameterPNameSGI @pname, float* @params);

        public void ColorTableParameterfv(GlColorTableTarget @target, GlColorTableParameterPNameSGI @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_ColorTableParameterfv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorTableParameterfvSGI")]
        static extern void Native_ColorTableParameterfvSGI(GlColorTableTargetSGI @target, GlColorTableParameterPNameSGI @pname, float* @params);

        public void ColorTableParameterfvSGI(GlColorTableTargetSGI @target, GlColorTableParameterPNameSGI @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_ColorTableParameterfvSGI(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorTableParameteriv")]
        static extern void Native_ColorTableParameteriv(GlColorTableTarget @target, GlColorTableParameterPNameSGI @pname, int* @params);

        public void ColorTableParameteriv(GlColorTableTarget @target, GlColorTableParameterPNameSGI @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_ColorTableParameteriv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorTableParameterivSGI")]
        static extern void Native_ColorTableParameterivSGI(GlColorTableTargetSGI @target, GlColorTableParameterPNameSGI @pname, int* @params);

        public void ColorTableParameterivSGI(GlColorTableTargetSGI @target, GlColorTableParameterPNameSGI @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_ColorTableParameterivSGI(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glColorTableSGI")]
        static extern void Native_ColorTableSGI(GlColorTableTargetSGI @target, GlInternalFormat @internalformat, int @width, GlPixelFormat @format, GlPixelType @type, byte* @table);

        public void ColorTableSGI(GlColorTableTargetSGI @target, GlInternalFormat @internalformat, int @width, GlPixelFormat @format, GlPixelType @type, byte[] @table) {
            fixed (byte *ptr_table = @table) {
                Native_ColorTableSGI(@target, @internalformat, @width, @format, @type, @ptr_table);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCombinerInputNV")]
        static extern void Native_CombinerInputNV(uint @stage, uint @portion, uint @variable, uint @input, uint @mapping, uint @componentUsage);

        public void CombinerInputNV(uint @stage, uint @portion, uint @variable, uint @input, uint @mapping, uint @componentUsage) {
            Native_CombinerInputNV(@stage, @portion, @variable, @input, @mapping, @componentUsage);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCombinerOutputNV")]
        static extern void Native_CombinerOutputNV(uint @stage, uint @portion, uint @abOutput, uint @cdOutput, uint @sumOutput, uint @scale, uint @bias, GlBoolean @abDotProduct, GlBoolean @cdDotProduct, GlBoolean @muxSum);

        public void CombinerOutputNV(uint @stage, uint @portion, uint @abOutput, uint @cdOutput, uint @sumOutput, uint @scale, uint @bias, GlBoolean @abDotProduct, GlBoolean @cdDotProduct, GlBoolean @muxSum) {
            Native_CombinerOutputNV(@stage, @portion, @abOutput, @cdOutput, @sumOutput, @scale, @bias, @abDotProduct, @cdDotProduct, @muxSum);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCombinerParameterfNV")]
        static extern void Native_CombinerParameterfNV(uint @pname, float @param);

        public void CombinerParameterfNV(uint @pname, float @param) {
            Native_CombinerParameterfNV(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCombinerParameterfvNV")]
        static extern void Native_CombinerParameterfvNV(uint @pname, float* @params);

        public void CombinerParameterfvNV(uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_CombinerParameterfvNV(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCombinerParameteriNV")]
        static extern void Native_CombinerParameteriNV(uint @pname, int @param);

        public void CombinerParameteriNV(uint @pname, int @param) {
            Native_CombinerParameteriNV(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCombinerParameterivNV")]
        static extern void Native_CombinerParameterivNV(uint @pname, int* @params);

        public void CombinerParameterivNV(uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_CombinerParameterivNV(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCombinerStageParameterfvNV")]
        static extern void Native_CombinerStageParameterfvNV(uint @stage, uint @pname, float* @params);

        public void CombinerStageParameterfvNV(uint @stage, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_CombinerStageParameterfvNV(@stage, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCommandListSegmentsNV")]
        static extern void Native_CommandListSegmentsNV(uint @list, uint @segments);

        public void CommandListSegmentsNV(uint @list, uint @segments) {
            Native_CommandListSegmentsNV(@list, @segments);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompileCommandListNV")]
        static extern void Native_CompileCommandListNV(uint @list);

        public void CompileCommandListNV(uint @list) {
            Native_CompileCommandListNV(@list);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompileShader")]
        static extern void Native_CompileShader(uint @shader);

        public void CompileShader(uint @shader) {
            Native_CompileShader(@shader);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompileShaderARB")]
        static extern void Native_CompileShaderARB(IntPtr @shaderObj);

        public void CompileShaderARB(IntPtr @shaderObj) {
            Native_CompileShaderARB(@shaderObj);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompileShaderIncludeARB")]
        static extern void Native_CompileShaderIncludeARB(uint @shader, int @count, byte** @path, int* @length);

        public void CompileShaderIncludeARB(uint @shader, int @count, byte[][] @path, int[] @length) {
            IntPtr ptr_path = Marshal.AllocHGlobal(@path.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_path, @path, (void **) ptr_path.ToPointer(), 0, __fixedLocals => {
                    fixed (int *ptr_length = @length) {
                        Native_CompileShaderIncludeARB(@shader, @count, (byte **) ptr_path.ToPointer(), @ptr_length);
                    }
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_path);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedMultiTexImage1DEXT")]
        static extern void Native_CompressedMultiTexImage1DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @border, int @imageSize, byte* @bits);

        public void CompressedMultiTexImage1DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @border, int @imageSize, byte[] @bits) {
            fixed (byte *ptr_bits = @bits) {
                Native_CompressedMultiTexImage1DEXT(@texunit, @target, @level, @internalformat, @width, @border, @imageSize, @ptr_bits);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedMultiTexImage2DEXT")]
        static extern void Native_CompressedMultiTexImage2DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @border, int @imageSize, byte* @bits);

        public void CompressedMultiTexImage2DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @border, int @imageSize, byte[] @bits) {
            fixed (byte *ptr_bits = @bits) {
                Native_CompressedMultiTexImage2DEXT(@texunit, @target, @level, @internalformat, @width, @height, @border, @imageSize, @ptr_bits);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedMultiTexImage3DEXT")]
        static extern void Native_CompressedMultiTexImage3DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, int @imageSize, byte* @bits);

        public void CompressedMultiTexImage3DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, int @imageSize, byte[] @bits) {
            fixed (byte *ptr_bits = @bits) {
                Native_CompressedMultiTexImage3DEXT(@texunit, @target, @level, @internalformat, @width, @height, @depth, @border, @imageSize, @ptr_bits);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
        static extern void Native_CompressedMultiTexSubImage1DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, int @imageSize, byte* @bits);

        public void CompressedMultiTexSubImage1DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, int @imageSize, byte[] @bits) {
            fixed (byte *ptr_bits = @bits) {
                Native_CompressedMultiTexSubImage1DEXT(@texunit, @target, @level, @xoffset, @width, @format, @imageSize, @ptr_bits);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
        static extern void Native_CompressedMultiTexSubImage2DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, int @imageSize, byte* @bits);

        public void CompressedMultiTexSubImage2DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, int @imageSize, byte[] @bits) {
            fixed (byte *ptr_bits = @bits) {
                Native_CompressedMultiTexSubImage2DEXT(@texunit, @target, @level, @xoffset, @yoffset, @width, @height, @format, @imageSize, @ptr_bits);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
        static extern void Native_CompressedMultiTexSubImage3DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, int @imageSize, byte* @bits);

        public void CompressedMultiTexSubImage3DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, int @imageSize, byte[] @bits) {
            fixed (byte *ptr_bits = @bits) {
                Native_CompressedMultiTexSubImage3DEXT(@texunit, @target, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @imageSize, @ptr_bits);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTexImage1D")]
        static extern void Native_CompressedTexImage1D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @border, int @imageSize, byte* @data);

        public void CompressedTexImage1D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @border, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTexImage1D(@target, @level, @internalformat, @width, @border, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTexImage1DARB")]
        static extern void Native_CompressedTexImage1DARB(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @border, int @imageSize, byte* @data);

        public void CompressedTexImage1DARB(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @border, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTexImage1DARB(@target, @level, @internalformat, @width, @border, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTexImage2D")]
        static extern void Native_CompressedTexImage2D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @border, int @imageSize, byte* @data);

        public void CompressedTexImage2D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @border, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTexImage2D(@target, @level, @internalformat, @width, @height, @border, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTexImage2DARB")]
        static extern void Native_CompressedTexImage2DARB(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @border, int @imageSize, byte* @data);

        public void CompressedTexImage2DARB(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @border, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTexImage2DARB(@target, @level, @internalformat, @width, @height, @border, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTexImage3D")]
        static extern void Native_CompressedTexImage3D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, int @imageSize, byte* @data);

        public void CompressedTexImage3D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTexImage3D(@target, @level, @internalformat, @width, @height, @depth, @border, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTexImage3DARB")]
        static extern void Native_CompressedTexImage3DARB(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, int @imageSize, byte* @data);

        public void CompressedTexImage3DARB(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTexImage3DARB(@target, @level, @internalformat, @width, @height, @depth, @border, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTexImage3DOES")]
        static extern void Native_CompressedTexImage3DOES(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, int @imageSize, byte* @data);

        public void CompressedTexImage3DOES(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTexImage3DOES(@target, @level, @internalformat, @width, @height, @depth, @border, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTexSubImage1D")]
        static extern void Native_CompressedTexSubImage1D(GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, int @imageSize, byte* @data);

        public void CompressedTexSubImage1D(GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTexSubImage1D(@target, @level, @xoffset, @width, @format, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTexSubImage1DARB")]
        static extern void Native_CompressedTexSubImage1DARB(GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, int @imageSize, byte* @data);

        public void CompressedTexSubImage1DARB(GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTexSubImage1DARB(@target, @level, @xoffset, @width, @format, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTexSubImage2D")]
        static extern void Native_CompressedTexSubImage2D(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, int @imageSize, byte* @data);

        public void CompressedTexSubImage2D(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTexSubImage2D(@target, @level, @xoffset, @yoffset, @width, @height, @format, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTexSubImage2DARB")]
        static extern void Native_CompressedTexSubImage2DARB(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, int @imageSize, byte* @data);

        public void CompressedTexSubImage2DARB(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTexSubImage2DARB(@target, @level, @xoffset, @yoffset, @width, @height, @format, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTexSubImage3D")]
        static extern void Native_CompressedTexSubImage3D(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, int @imageSize, byte* @data);

        public void CompressedTexSubImage3D(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTexSubImage3D(@target, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTexSubImage3DARB")]
        static extern void Native_CompressedTexSubImage3DARB(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, int @imageSize, byte* @data);

        public void CompressedTexSubImage3DARB(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTexSubImage3DARB(@target, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTexSubImage3DOES")]
        static extern void Native_CompressedTexSubImage3DOES(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, int @imageSize, byte* @data);

        public void CompressedTexSubImage3DOES(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTexSubImage3DOES(@target, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTextureImage1DEXT")]
        static extern void Native_CompressedTextureImage1DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @border, int @imageSize, byte* @bits);

        public void CompressedTextureImage1DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @border, int @imageSize, byte[] @bits) {
            fixed (byte *ptr_bits = @bits) {
                Native_CompressedTextureImage1DEXT(@texture, @target, @level, @internalformat, @width, @border, @imageSize, @ptr_bits);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTextureImage2DEXT")]
        static extern void Native_CompressedTextureImage2DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @border, int @imageSize, byte* @bits);

        public void CompressedTextureImage2DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @border, int @imageSize, byte[] @bits) {
            fixed (byte *ptr_bits = @bits) {
                Native_CompressedTextureImage2DEXT(@texture, @target, @level, @internalformat, @width, @height, @border, @imageSize, @ptr_bits);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTextureImage3DEXT")]
        static extern void Native_CompressedTextureImage3DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, int @imageSize, byte* @bits);

        public void CompressedTextureImage3DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, int @imageSize, byte[] @bits) {
            fixed (byte *ptr_bits = @bits) {
                Native_CompressedTextureImage3DEXT(@texture, @target, @level, @internalformat, @width, @height, @depth, @border, @imageSize, @ptr_bits);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTextureSubImage1D")]
        static extern void Native_CompressedTextureSubImage1D(uint @texture, int @level, int @xoffset, int @width, GlPixelFormat @format, int @imageSize, byte* @data);

        public void CompressedTextureSubImage1D(uint @texture, int @level, int @xoffset, int @width, GlPixelFormat @format, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTextureSubImage1D(@texture, @level, @xoffset, @width, @format, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTextureSubImage1DEXT")]
        static extern void Native_CompressedTextureSubImage1DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, int @imageSize, byte* @bits);

        public void CompressedTextureSubImage1DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, int @imageSize, byte[] @bits) {
            fixed (byte *ptr_bits = @bits) {
                Native_CompressedTextureSubImage1DEXT(@texture, @target, @level, @xoffset, @width, @format, @imageSize, @ptr_bits);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTextureSubImage2D")]
        static extern void Native_CompressedTextureSubImage2D(uint @texture, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, int @imageSize, byte* @data);

        public void CompressedTextureSubImage2D(uint @texture, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTextureSubImage2D(@texture, @level, @xoffset, @yoffset, @width, @height, @format, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTextureSubImage2DEXT")]
        static extern void Native_CompressedTextureSubImage2DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, int @imageSize, byte* @bits);

        public void CompressedTextureSubImage2DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, int @imageSize, byte[] @bits) {
            fixed (byte *ptr_bits = @bits) {
                Native_CompressedTextureSubImage2DEXT(@texture, @target, @level, @xoffset, @yoffset, @width, @height, @format, @imageSize, @ptr_bits);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTextureSubImage3D")]
        static extern void Native_CompressedTextureSubImage3D(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, int @imageSize, byte* @data);

        public void CompressedTextureSubImage3D(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, int @imageSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_CompressedTextureSubImage3D(@texture, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @imageSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCompressedTextureSubImage3DEXT")]
        static extern void Native_CompressedTextureSubImage3DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, int @imageSize, byte* @bits);

        public void CompressedTextureSubImage3DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, int @imageSize, byte[] @bits) {
            fixed (byte *ptr_bits = @bits) {
                Native_CompressedTextureSubImage3DEXT(@texture, @target, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @imageSize, @ptr_bits);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConservativeRasterParameterfNV")]
        static extern void Native_ConservativeRasterParameterfNV(uint @pname, float @value);

        public void ConservativeRasterParameterfNV(uint @pname, float @value) {
            Native_ConservativeRasterParameterfNV(@pname, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConservativeRasterParameteriNV")]
        static extern void Native_ConservativeRasterParameteriNV(uint @pname, int @param);

        public void ConservativeRasterParameteriNV(uint @pname, int @param) {
            Native_ConservativeRasterParameteriNV(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConvolutionFilter1D")]
        static extern void Native_ConvolutionFilter1D(GlConvolutionTarget @target, GlInternalFormat @internalformat, int @width, GlPixelFormat @format, GlPixelType @type, byte* @image);

        public void ConvolutionFilter1D(GlConvolutionTarget @target, GlInternalFormat @internalformat, int @width, GlPixelFormat @format, GlPixelType @type, byte[] @image) {
            fixed (byte *ptr_image = @image) {
                Native_ConvolutionFilter1D(@target, @internalformat, @width, @format, @type, @ptr_image);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConvolutionFilter1DEXT")]
        static extern void Native_ConvolutionFilter1DEXT(GlConvolutionTargetEXT @target, GlInternalFormat @internalformat, int @width, GlPixelFormat @format, GlPixelType @type, byte* @image);

        public void ConvolutionFilter1DEXT(GlConvolutionTargetEXT @target, GlInternalFormat @internalformat, int @width, GlPixelFormat @format, GlPixelType @type, byte[] @image) {
            fixed (byte *ptr_image = @image) {
                Native_ConvolutionFilter1DEXT(@target, @internalformat, @width, @format, @type, @ptr_image);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConvolutionFilter2D")]
        static extern void Native_ConvolutionFilter2D(GlConvolutionTarget @target, GlInternalFormat @internalformat, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte* @image);

        public void ConvolutionFilter2D(GlConvolutionTarget @target, GlInternalFormat @internalformat, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte[] @image) {
            fixed (byte *ptr_image = @image) {
                Native_ConvolutionFilter2D(@target, @internalformat, @width, @height, @format, @type, @ptr_image);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConvolutionFilter2DEXT")]
        static extern void Native_ConvolutionFilter2DEXT(GlConvolutionTargetEXT @target, GlInternalFormat @internalformat, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte* @image);

        public void ConvolutionFilter2DEXT(GlConvolutionTargetEXT @target, GlInternalFormat @internalformat, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte[] @image) {
            fixed (byte *ptr_image = @image) {
                Native_ConvolutionFilter2DEXT(@target, @internalformat, @width, @height, @format, @type, @ptr_image);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConvolutionParameterf")]
        static extern void Native_ConvolutionParameterf(GlConvolutionTarget @target, GlConvolutionParameterEXT @pname, float @params);

        public void ConvolutionParameterf(GlConvolutionTarget @target, GlConvolutionParameterEXT @pname, float @params) {
            Native_ConvolutionParameterf(@target, @pname, @params);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConvolutionParameterfEXT")]
        static extern void Native_ConvolutionParameterfEXT(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, float @params);

        public void ConvolutionParameterfEXT(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, float @params) {
            Native_ConvolutionParameterfEXT(@target, @pname, @params);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConvolutionParameterfv")]
        static extern void Native_ConvolutionParameterfv(GlConvolutionTarget @target, GlConvolutionParameterEXT @pname, float* @params);

        public void ConvolutionParameterfv(GlConvolutionTarget @target, GlConvolutionParameterEXT @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_ConvolutionParameterfv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConvolutionParameterfvEXT")]
        static extern void Native_ConvolutionParameterfvEXT(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, float* @params);

        public void ConvolutionParameterfvEXT(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_ConvolutionParameterfvEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConvolutionParameteri")]
        static extern void Native_ConvolutionParameteri(GlConvolutionTarget @target, GlConvolutionParameterEXT @pname, int @params);

        public void ConvolutionParameteri(GlConvolutionTarget @target, GlConvolutionParameterEXT @pname, int @params) {
            Native_ConvolutionParameteri(@target, @pname, @params);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConvolutionParameteriEXT")]
        static extern void Native_ConvolutionParameteriEXT(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, int @params);

        public void ConvolutionParameteriEXT(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, int @params) {
            Native_ConvolutionParameteriEXT(@target, @pname, @params);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConvolutionParameteriv")]
        static extern void Native_ConvolutionParameteriv(GlConvolutionTarget @target, GlConvolutionParameterEXT @pname, int* @params);

        public void ConvolutionParameteriv(GlConvolutionTarget @target, GlConvolutionParameterEXT @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_ConvolutionParameteriv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConvolutionParameterivEXT")]
        static extern void Native_ConvolutionParameterivEXT(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, int* @params);

        public void ConvolutionParameterivEXT(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_ConvolutionParameterivEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConvolutionParameterxOES")]
        static extern void Native_ConvolutionParameterxOES(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, int @param);

        public void ConvolutionParameterxOES(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, int @param) {
            Native_ConvolutionParameterxOES(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glConvolutionParameterxvOES")]
        static extern void Native_ConvolutionParameterxvOES(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, int* @params);

        public void ConvolutionParameterxvOES(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_ConvolutionParameterxvOES(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyBufferSubData")]
        static extern void Native_CopyBufferSubData(GlCopyBufferSubDataTarget @readTarget, GlCopyBufferSubDataTarget @writeTarget, long @readOffset, long @writeOffset, long @size);

        public void CopyBufferSubData(GlCopyBufferSubDataTarget @readTarget, GlCopyBufferSubDataTarget @writeTarget, long @readOffset, long @writeOffset, long @size) {
            Native_CopyBufferSubData(@readTarget, @writeTarget, @readOffset, @writeOffset, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyBufferSubDataNV")]
        static extern void Native_CopyBufferSubDataNV(GlCopyBufferSubDataTarget @readTarget, GlCopyBufferSubDataTarget @writeTarget, long @readOffset, long @writeOffset, long @size);

        public void CopyBufferSubDataNV(GlCopyBufferSubDataTarget @readTarget, GlCopyBufferSubDataTarget @writeTarget, long @readOffset, long @writeOffset, long @size) {
            Native_CopyBufferSubDataNV(@readTarget, @writeTarget, @readOffset, @writeOffset, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyColorSubTable")]
        static extern void Native_CopyColorSubTable(GlColorTableTarget @target, int @start, int @x, int @y, int @width);

        public void CopyColorSubTable(GlColorTableTarget @target, int @start, int @x, int @y, int @width) {
            Native_CopyColorSubTable(@target, @start, @x, @y, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyColorSubTableEXT")]
        static extern void Native_CopyColorSubTableEXT(GlColorTableTarget @target, int @start, int @x, int @y, int @width);

        public void CopyColorSubTableEXT(GlColorTableTarget @target, int @start, int @x, int @y, int @width) {
            Native_CopyColorSubTableEXT(@target, @start, @x, @y, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyColorTable")]
        static extern void Native_CopyColorTable(GlColorTableTarget @target, GlInternalFormat @internalformat, int @x, int @y, int @width);

        public void CopyColorTable(GlColorTableTarget @target, GlInternalFormat @internalformat, int @x, int @y, int @width) {
            Native_CopyColorTable(@target, @internalformat, @x, @y, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyColorTableSGI")]
        static extern void Native_CopyColorTableSGI(GlColorTableTargetSGI @target, GlInternalFormat @internalformat, int @x, int @y, int @width);

        public void CopyColorTableSGI(GlColorTableTargetSGI @target, GlInternalFormat @internalformat, int @x, int @y, int @width) {
            Native_CopyColorTableSGI(@target, @internalformat, @x, @y, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyConvolutionFilter1D")]
        static extern void Native_CopyConvolutionFilter1D(GlConvolutionTarget @target, GlInternalFormat @internalformat, int @x, int @y, int @width);

        public void CopyConvolutionFilter1D(GlConvolutionTarget @target, GlInternalFormat @internalformat, int @x, int @y, int @width) {
            Native_CopyConvolutionFilter1D(@target, @internalformat, @x, @y, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyConvolutionFilter1DEXT")]
        static extern void Native_CopyConvolutionFilter1DEXT(GlConvolutionTargetEXT @target, GlInternalFormat @internalformat, int @x, int @y, int @width);

        public void CopyConvolutionFilter1DEXT(GlConvolutionTargetEXT @target, GlInternalFormat @internalformat, int @x, int @y, int @width) {
            Native_CopyConvolutionFilter1DEXT(@target, @internalformat, @x, @y, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyConvolutionFilter2D")]
        static extern void Native_CopyConvolutionFilter2D(GlConvolutionTarget @target, GlInternalFormat @internalformat, int @x, int @y, int @width, int @height);

        public void CopyConvolutionFilter2D(GlConvolutionTarget @target, GlInternalFormat @internalformat, int @x, int @y, int @width, int @height) {
            Native_CopyConvolutionFilter2D(@target, @internalformat, @x, @y, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyConvolutionFilter2DEXT")]
        static extern void Native_CopyConvolutionFilter2DEXT(GlConvolutionTargetEXT @target, GlInternalFormat @internalformat, int @x, int @y, int @width, int @height);

        public void CopyConvolutionFilter2DEXT(GlConvolutionTargetEXT @target, GlInternalFormat @internalformat, int @x, int @y, int @width, int @height) {
            Native_CopyConvolutionFilter2DEXT(@target, @internalformat, @x, @y, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyImageSubData")]
        static extern void Native_CopyImageSubData(uint @srcName, GlCopyBufferSubDataTarget @srcTarget, int @srcLevel, int @srcX, int @srcY, int @srcZ, uint @dstName, GlCopyBufferSubDataTarget @dstTarget, int @dstLevel, int @dstX, int @dstY, int @dstZ, int @srcWidth, int @srcHeight, int @srcDepth);

        public void CopyImageSubData(uint @srcName, GlCopyBufferSubDataTarget @srcTarget, int @srcLevel, int @srcX, int @srcY, int @srcZ, uint @dstName, GlCopyBufferSubDataTarget @dstTarget, int @dstLevel, int @dstX, int @dstY, int @dstZ, int @srcWidth, int @srcHeight, int @srcDepth) {
            Native_CopyImageSubData(@srcName, @srcTarget, @srcLevel, @srcX, @srcY, @srcZ, @dstName, @dstTarget, @dstLevel, @dstX, @dstY, @dstZ, @srcWidth, @srcHeight, @srcDepth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyImageSubDataEXT")]
        static extern void Native_CopyImageSubDataEXT(uint @srcName, GlCopyBufferSubDataTarget @srcTarget, int @srcLevel, int @srcX, int @srcY, int @srcZ, uint @dstName, GlCopyBufferSubDataTarget @dstTarget, int @dstLevel, int @dstX, int @dstY, int @dstZ, int @srcWidth, int @srcHeight, int @srcDepth);

        public void CopyImageSubDataEXT(uint @srcName, GlCopyBufferSubDataTarget @srcTarget, int @srcLevel, int @srcX, int @srcY, int @srcZ, uint @dstName, GlCopyBufferSubDataTarget @dstTarget, int @dstLevel, int @dstX, int @dstY, int @dstZ, int @srcWidth, int @srcHeight, int @srcDepth) {
            Native_CopyImageSubDataEXT(@srcName, @srcTarget, @srcLevel, @srcX, @srcY, @srcZ, @dstName, @dstTarget, @dstLevel, @dstX, @dstY, @dstZ, @srcWidth, @srcHeight, @srcDepth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyImageSubDataNV")]
        static extern void Native_CopyImageSubDataNV(uint @srcName, GlCopyBufferSubDataTarget @srcTarget, int @srcLevel, int @srcX, int @srcY, int @srcZ, uint @dstName, GlCopyBufferSubDataTarget @dstTarget, int @dstLevel, int @dstX, int @dstY, int @dstZ, int @width, int @height, int @depth);

        public void CopyImageSubDataNV(uint @srcName, GlCopyBufferSubDataTarget @srcTarget, int @srcLevel, int @srcX, int @srcY, int @srcZ, uint @dstName, GlCopyBufferSubDataTarget @dstTarget, int @dstLevel, int @dstX, int @dstY, int @dstZ, int @width, int @height, int @depth) {
            Native_CopyImageSubDataNV(@srcName, @srcTarget, @srcLevel, @srcX, @srcY, @srcZ, @dstName, @dstTarget, @dstLevel, @dstX, @dstY, @dstZ, @width, @height, @depth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyImageSubDataOES")]
        static extern void Native_CopyImageSubDataOES(uint @srcName, GlCopyBufferSubDataTarget @srcTarget, int @srcLevel, int @srcX, int @srcY, int @srcZ, uint @dstName, GlCopyBufferSubDataTarget @dstTarget, int @dstLevel, int @dstX, int @dstY, int @dstZ, int @srcWidth, int @srcHeight, int @srcDepth);

        public void CopyImageSubDataOES(uint @srcName, GlCopyBufferSubDataTarget @srcTarget, int @srcLevel, int @srcX, int @srcY, int @srcZ, uint @dstName, GlCopyBufferSubDataTarget @dstTarget, int @dstLevel, int @dstX, int @dstY, int @dstZ, int @srcWidth, int @srcHeight, int @srcDepth) {
            Native_CopyImageSubDataOES(@srcName, @srcTarget, @srcLevel, @srcX, @srcY, @srcZ, @dstName, @dstTarget, @dstLevel, @dstX, @dstY, @dstZ, @srcWidth, @srcHeight, @srcDepth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyMultiTexImage1DEXT")]
        static extern void Native_CopyMultiTexImage1DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @border);

        public void CopyMultiTexImage1DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @border) {
            Native_CopyMultiTexImage1DEXT(@texunit, @target, @level, @internalformat, @x, @y, @width, @border);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyMultiTexImage2DEXT")]
        static extern void Native_CopyMultiTexImage2DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @height, int @border);

        public void CopyMultiTexImage2DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @height, int @border) {
            Native_CopyMultiTexImage2DEXT(@texunit, @target, @level, @internalformat, @x, @y, @width, @height, @border);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyMultiTexSubImage1DEXT")]
        static extern void Native_CopyMultiTexSubImage1DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @x, int @y, int @width);

        public void CopyMultiTexSubImage1DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @x, int @y, int @width) {
            Native_CopyMultiTexSubImage1DEXT(@texunit, @target, @level, @xoffset, @x, @y, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyMultiTexSubImage2DEXT")]
        static extern void Native_CopyMultiTexSubImage2DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @x, int @y, int @width, int @height);

        public void CopyMultiTexSubImage2DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @x, int @y, int @width, int @height) {
            Native_CopyMultiTexSubImage2DEXT(@texunit, @target, @level, @xoffset, @yoffset, @x, @y, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyMultiTexSubImage3DEXT")]
        static extern void Native_CopyMultiTexSubImage3DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @x, int @y, int @width, int @height);

        public void CopyMultiTexSubImage3DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @x, int @y, int @width, int @height) {
            Native_CopyMultiTexSubImage3DEXT(@texunit, @target, @level, @xoffset, @yoffset, @zoffset, @x, @y, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyNamedBufferSubData")]
        static extern void Native_CopyNamedBufferSubData(uint @readBuffer, uint @writeBuffer, long @readOffset, long @writeOffset, long @size);

        public void CopyNamedBufferSubData(uint @readBuffer, uint @writeBuffer, long @readOffset, long @writeOffset, long @size) {
            Native_CopyNamedBufferSubData(@readBuffer, @writeBuffer, @readOffset, @writeOffset, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyPathNV")]
        static extern void Native_CopyPathNV(uint @resultPath, uint @srcPath);

        public void CopyPathNV(uint @resultPath, uint @srcPath) {
            Native_CopyPathNV(@resultPath, @srcPath);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyPixels")]
        static extern void Native_CopyPixels(int @x, int @y, int @width, int @height, GlPixelCopyType @type);

        public void CopyPixels(int @x, int @y, int @width, int @height, GlPixelCopyType @type) {
            Native_CopyPixels(@x, @y, @width, @height, @type);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTexImage1D")]
        static extern void Native_CopyTexImage1D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @border);

        public void CopyTexImage1D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @border) {
            Native_CopyTexImage1D(@target, @level, @internalformat, @x, @y, @width, @border);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTexImage1DEXT")]
        static extern void Native_CopyTexImage1DEXT(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @border);

        public void CopyTexImage1DEXT(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @border) {
            Native_CopyTexImage1DEXT(@target, @level, @internalformat, @x, @y, @width, @border);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTexImage2D")]
        static extern void Native_CopyTexImage2D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @height, int @border);

        public void CopyTexImage2D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @height, int @border) {
            Native_CopyTexImage2D(@target, @level, @internalformat, @x, @y, @width, @height, @border);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTexImage2DEXT")]
        static extern void Native_CopyTexImage2DEXT(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @height, int @border);

        public void CopyTexImage2DEXT(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @height, int @border) {
            Native_CopyTexImage2DEXT(@target, @level, @internalformat, @x, @y, @width, @height, @border);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTexSubImage1D")]
        static extern void Native_CopyTexSubImage1D(GlTextureTarget @target, int @level, int @xoffset, int @x, int @y, int @width);

        public void CopyTexSubImage1D(GlTextureTarget @target, int @level, int @xoffset, int @x, int @y, int @width) {
            Native_CopyTexSubImage1D(@target, @level, @xoffset, @x, @y, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTexSubImage1DEXT")]
        static extern void Native_CopyTexSubImage1DEXT(GlTextureTarget @target, int @level, int @xoffset, int @x, int @y, int @width);

        public void CopyTexSubImage1DEXT(GlTextureTarget @target, int @level, int @xoffset, int @x, int @y, int @width) {
            Native_CopyTexSubImage1DEXT(@target, @level, @xoffset, @x, @y, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTexSubImage2D")]
        static extern void Native_CopyTexSubImage2D(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @x, int @y, int @width, int @height);

        public void CopyTexSubImage2D(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @x, int @y, int @width, int @height) {
            Native_CopyTexSubImage2D(@target, @level, @xoffset, @yoffset, @x, @y, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTexSubImage2DEXT")]
        static extern void Native_CopyTexSubImage2DEXT(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @x, int @y, int @width, int @height);

        public void CopyTexSubImage2DEXT(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @x, int @y, int @width, int @height) {
            Native_CopyTexSubImage2DEXT(@target, @level, @xoffset, @yoffset, @x, @y, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTexSubImage3D")]
        static extern void Native_CopyTexSubImage3D(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @x, int @y, int @width, int @height);

        public void CopyTexSubImage3D(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @x, int @y, int @width, int @height) {
            Native_CopyTexSubImage3D(@target, @level, @xoffset, @yoffset, @zoffset, @x, @y, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTexSubImage3DEXT")]
        static extern void Native_CopyTexSubImage3DEXT(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @x, int @y, int @width, int @height);

        public void CopyTexSubImage3DEXT(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @x, int @y, int @width, int @height) {
            Native_CopyTexSubImage3DEXT(@target, @level, @xoffset, @yoffset, @zoffset, @x, @y, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTexSubImage3DOES")]
        static extern void Native_CopyTexSubImage3DOES(uint @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @x, int @y, int @width, int @height);

        public void CopyTexSubImage3DOES(uint @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @x, int @y, int @width, int @height) {
            Native_CopyTexSubImage3DOES(@target, @level, @xoffset, @yoffset, @zoffset, @x, @y, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTextureImage1DEXT")]
        static extern void Native_CopyTextureImage1DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @border);

        public void CopyTextureImage1DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @border) {
            Native_CopyTextureImage1DEXT(@texture, @target, @level, @internalformat, @x, @y, @width, @border);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTextureImage2DEXT")]
        static extern void Native_CopyTextureImage2DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @height, int @border);

        public void CopyTextureImage2DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @x, int @y, int @width, int @height, int @border) {
            Native_CopyTextureImage2DEXT(@texture, @target, @level, @internalformat, @x, @y, @width, @height, @border);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTextureLevelsAPPLE")]
        static extern void Native_CopyTextureLevelsAPPLE(uint @destinationTexture, uint @sourceTexture, int @sourceBaseLevel, int @sourceLevelCount);

        public void CopyTextureLevelsAPPLE(uint @destinationTexture, uint @sourceTexture, int @sourceBaseLevel, int @sourceLevelCount) {
            Native_CopyTextureLevelsAPPLE(@destinationTexture, @sourceTexture, @sourceBaseLevel, @sourceLevelCount);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTextureSubImage1D")]
        static extern void Native_CopyTextureSubImage1D(uint @texture, int @level, int @xoffset, int @x, int @y, int @width);

        public void CopyTextureSubImage1D(uint @texture, int @level, int @xoffset, int @x, int @y, int @width) {
            Native_CopyTextureSubImage1D(@texture, @level, @xoffset, @x, @y, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTextureSubImage1DEXT")]
        static extern void Native_CopyTextureSubImage1DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @x, int @y, int @width);

        public void CopyTextureSubImage1DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @x, int @y, int @width) {
            Native_CopyTextureSubImage1DEXT(@texture, @target, @level, @xoffset, @x, @y, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTextureSubImage2D")]
        static extern void Native_CopyTextureSubImage2D(uint @texture, int @level, int @xoffset, int @yoffset, int @x, int @y, int @width, int @height);

        public void CopyTextureSubImage2D(uint @texture, int @level, int @xoffset, int @yoffset, int @x, int @y, int @width, int @height) {
            Native_CopyTextureSubImage2D(@texture, @level, @xoffset, @yoffset, @x, @y, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTextureSubImage2DEXT")]
        static extern void Native_CopyTextureSubImage2DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @x, int @y, int @width, int @height);

        public void CopyTextureSubImage2DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @x, int @y, int @width, int @height) {
            Native_CopyTextureSubImage2DEXT(@texture, @target, @level, @xoffset, @yoffset, @x, @y, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTextureSubImage3D")]
        static extern void Native_CopyTextureSubImage3D(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @x, int @y, int @width, int @height);

        public void CopyTextureSubImage3D(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @x, int @y, int @width, int @height) {
            Native_CopyTextureSubImage3D(@texture, @level, @xoffset, @yoffset, @zoffset, @x, @y, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCopyTextureSubImage3DEXT")]
        static extern void Native_CopyTextureSubImage3DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @x, int @y, int @width, int @height);

        public void CopyTextureSubImage3DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @x, int @y, int @width, int @height) {
            Native_CopyTextureSubImage3DEXT(@texture, @target, @level, @xoffset, @yoffset, @zoffset, @x, @y, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCoverFillPathInstancedNV")]
        static extern void Native_CoverFillPathInstancedNV(int @numPaths, GlPathElementType @pathNameType, byte* @paths, uint @pathBase, GlPathCoverMode @coverMode, GlPathTransformType @transformType, float* @transformValues);

        public void CoverFillPathInstancedNV(int @numPaths, GlPathElementType @pathNameType, byte[] @paths, uint @pathBase, GlPathCoverMode @coverMode, GlPathTransformType @transformType, float[] @transformValues) {
            fixed (byte *ptr_paths = @paths) {
                fixed (float *ptr_transformValues = @transformValues) {
                    Native_CoverFillPathInstancedNV(@numPaths, @pathNameType, @ptr_paths, @pathBase, @coverMode, @transformType, @ptr_transformValues);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCoverFillPathNV")]
        static extern void Native_CoverFillPathNV(uint @path, GlPathCoverMode @coverMode);

        public void CoverFillPathNV(uint @path, GlPathCoverMode @coverMode) {
            Native_CoverFillPathNV(@path, @coverMode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCoverStrokePathInstancedNV")]
        static extern void Native_CoverStrokePathInstancedNV(int @numPaths, GlPathElementType @pathNameType, byte* @paths, uint @pathBase, GlPathCoverMode @coverMode, GlPathTransformType @transformType, float* @transformValues);

        public void CoverStrokePathInstancedNV(int @numPaths, GlPathElementType @pathNameType, byte[] @paths, uint @pathBase, GlPathCoverMode @coverMode, GlPathTransformType @transformType, float[] @transformValues) {
            fixed (byte *ptr_paths = @paths) {
                fixed (float *ptr_transformValues = @transformValues) {
                    Native_CoverStrokePathInstancedNV(@numPaths, @pathNameType, @ptr_paths, @pathBase, @coverMode, @transformType, @ptr_transformValues);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCoverStrokePathNV")]
        static extern void Native_CoverStrokePathNV(uint @path, GlPathCoverMode @coverMode);

        public void CoverStrokePathNV(uint @path, GlPathCoverMode @coverMode) {
            Native_CoverStrokePathNV(@path, @coverMode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCoverageMaskNV")]
        static extern void Native_CoverageMaskNV(bool @mask);

        public void CoverageMaskNV(bool @mask) {
            Native_CoverageMaskNV(@mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCoverageModulationNV")]
        static extern void Native_CoverageModulationNV(uint @components);

        public void CoverageModulationNV(uint @components) {
            Native_CoverageModulationNV(@components);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCoverageModulationTableNV")]
        static extern void Native_CoverageModulationTableNV(int @n, float* @v);

        public void CoverageModulationTableNV(int @n, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_CoverageModulationTableNV(@n, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCoverageOperationNV")]
        static extern void Native_CoverageOperationNV(uint @operation);

        public void CoverageOperationNV(uint @operation) {
            Native_CoverageOperationNV(@operation);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateBuffers")]
        static extern void Native_CreateBuffers(int @n, uint* @buffers);

        public void CreateBuffers(int @n, uint[] @buffers) {
            fixed (uint *ptr_buffers = @buffers) {
                Native_CreateBuffers(@n, @ptr_buffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateCommandListsNV")]
        static extern void Native_CreateCommandListsNV(int @n, uint* @lists);

        public void CreateCommandListsNV(int @n, uint[] @lists) {
            fixed (uint *ptr_lists = @lists) {
                Native_CreateCommandListsNV(@n, @ptr_lists);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateFramebuffers")]
        static extern void Native_CreateFramebuffers(int @n, uint* @framebuffers);

        public void CreateFramebuffers(int @n, uint[] @framebuffers) {
            fixed (uint *ptr_framebuffers = @framebuffers) {
                Native_CreateFramebuffers(@n, @ptr_framebuffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateMemoryObjectsEXT")]
        static extern void Native_CreateMemoryObjectsEXT(int @n, uint* @memoryObjects);

        public void CreateMemoryObjectsEXT(int @n, uint[] @memoryObjects) {
            fixed (uint *ptr_memoryObjects = @memoryObjects) {
                Native_CreateMemoryObjectsEXT(@n, @ptr_memoryObjects);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreatePerfQueryINTEL")]
        static extern void Native_CreatePerfQueryINTEL(uint @queryId, uint* @queryHandle);

        public void CreatePerfQueryINTEL(uint @queryId, uint[] @queryHandle) {
            fixed (uint *ptr_queryHandle = @queryHandle) {
                Native_CreatePerfQueryINTEL(@queryId, @ptr_queryHandle);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateProgram")]
        static extern uint Native_CreateProgram();

        public uint CreateProgram() {
            return Native_CreateProgram();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateProgramObjectARB")]
        static extern IntPtr Native_CreateProgramObjectARB();

        public IntPtr CreateProgramObjectARB() {
            return Native_CreateProgramObjectARB();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateProgramPipelines")]
        static extern void Native_CreateProgramPipelines(int @n, uint* @pipelines);

        public void CreateProgramPipelines(int @n, uint[] @pipelines) {
            fixed (uint *ptr_pipelines = @pipelines) {
                Native_CreateProgramPipelines(@n, @ptr_pipelines);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateQueries")]
        static extern void Native_CreateQueries(GlQueryTarget @target, int @n, uint* @ids);

        public void CreateQueries(GlQueryTarget @target, int @n, uint[] @ids) {
            fixed (uint *ptr_ids = @ids) {
                Native_CreateQueries(@target, @n, @ptr_ids);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateRenderbuffers")]
        static extern void Native_CreateRenderbuffers(int @n, uint* @renderbuffers);

        public void CreateRenderbuffers(int @n, uint[] @renderbuffers) {
            fixed (uint *ptr_renderbuffers = @renderbuffers) {
                Native_CreateRenderbuffers(@n, @ptr_renderbuffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateSamplers")]
        static extern void Native_CreateSamplers(int @n, uint* @samplers);

        public void CreateSamplers(int @n, uint[] @samplers) {
            fixed (uint *ptr_samplers = @samplers) {
                Native_CreateSamplers(@n, @ptr_samplers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateShader")]
        static extern uint Native_CreateShader(GlShaderType @type);

        public uint CreateShader(GlShaderType @type) {
            return Native_CreateShader(@type);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateShaderObjectARB")]
        static extern IntPtr Native_CreateShaderObjectARB(GlShaderType @shaderType);

        public IntPtr CreateShaderObjectARB(GlShaderType @shaderType) {
            return Native_CreateShaderObjectARB(@shaderType);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateShaderProgramEXT")]
        static extern uint Native_CreateShaderProgramEXT(GlShaderType @type, byte* @string);

        public uint CreateShaderProgramEXT(GlShaderType @type, byte[] @string) {
            fixed (byte *ptr_string = @string) {
                return Native_CreateShaderProgramEXT(@type, @ptr_string);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateShaderProgramv")]
        static extern uint Native_CreateShaderProgramv(GlShaderType @type, int @count, byte** @strings);

        public uint CreateShaderProgramv(GlShaderType @type, int @count, byte[][] @strings) {
            IntPtr ptr_strings = Marshal.AllocHGlobal(@strings.Length * sizeof(void *));
            try {
                return ConvertDoubleArray_byte(ptr_strings, @strings, (void **) ptr_strings.ToPointer(), 0, __fixedLocals => {
                    return Native_CreateShaderProgramv(@type, @count, (byte **) ptr_strings.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_strings);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateShaderProgramvEXT")]
        static extern uint Native_CreateShaderProgramvEXT(GlShaderType @type, int @count, byte** @strings);

        public uint CreateShaderProgramvEXT(GlShaderType @type, int @count, byte[][] @strings) {
            IntPtr ptr_strings = Marshal.AllocHGlobal(@strings.Length * sizeof(void *));
            try {
                return ConvertDoubleArray_byte(ptr_strings, @strings, (void **) ptr_strings.ToPointer(), 0, __fixedLocals => {
                    return Native_CreateShaderProgramvEXT(@type, @count, (byte **) ptr_strings.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_strings);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateStatesNV")]
        static extern void Native_CreateStatesNV(int @n, uint* @states);

        public void CreateStatesNV(int @n, uint[] @states) {
            fixed (uint *ptr_states = @states) {
                Native_CreateStatesNV(@n, @ptr_states);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateSyncFromCLeventARB")]
        static extern IntPtr Native_CreateSyncFromCLeventARB(IntPtr @context, IntPtr @event, uint @flags);

        public IntPtr CreateSyncFromCLeventARB(IntPtr @context, IntPtr @event, uint @flags) {
            return Native_CreateSyncFromCLeventARB(@context, @event, @flags);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateTextures")]
        static extern void Native_CreateTextures(GlTextureTarget @target, int @n, uint* @textures);

        public void CreateTextures(GlTextureTarget @target, int @n, uint[] @textures) {
            fixed (uint *ptr_textures = @textures) {
                Native_CreateTextures(@target, @n, @ptr_textures);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateTransformFeedbacks")]
        static extern void Native_CreateTransformFeedbacks(int @n, uint* @ids);

        public void CreateTransformFeedbacks(int @n, uint[] @ids) {
            fixed (uint *ptr_ids = @ids) {
                Native_CreateTransformFeedbacks(@n, @ptr_ids);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCreateVertexArrays")]
        static extern void Native_CreateVertexArrays(int @n, uint* @arrays);

        public void CreateVertexArrays(int @n, uint[] @arrays) {
            fixed (uint *ptr_arrays = @arrays) {
                Native_CreateVertexArrays(@n, @ptr_arrays);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCullFace")]
        static extern void Native_CullFace(GlCullFaceMode @mode);

        public void CullFace(GlCullFaceMode @mode) {
            Native_CullFace(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCullParameterdvEXT")]
        static extern void Native_CullParameterdvEXT(uint @pname, double* @params);

        public void CullParameterdvEXT(uint @pname, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_CullParameterdvEXT(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCullParameterfvEXT")]
        static extern void Native_CullParameterfvEXT(uint @pname, float* @params);

        public void CullParameterfvEXT(uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_CullParameterfvEXT(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCurrentPaletteMatrixARB")]
        static extern void Native_CurrentPaletteMatrixARB(int @index);

        public void CurrentPaletteMatrixARB(int @index) {
            Native_CurrentPaletteMatrixARB(@index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glCurrentPaletteMatrixOES")]
        static extern void Native_CurrentPaletteMatrixOES(uint @matrixpaletteindex);

        public void CurrentPaletteMatrixOES(uint @matrixpaletteindex) {
            Native_CurrentPaletteMatrixOES(@matrixpaletteindex);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDebugMessageCallback")]
        static extern void Native_DebugMessageCallback(IntPtr @callback, byte* @userParam);

        public void DebugMessageCallback(IntPtr @callback, byte[] @userParam) {
            fixed (byte *ptr_userParam = @userParam) {
                Native_DebugMessageCallback(@callback, @ptr_userParam);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDebugMessageCallbackAMD")]
        static extern void Native_DebugMessageCallbackAMD(IntPtr @callback, byte* @userParam);

        public void DebugMessageCallbackAMD(IntPtr @callback, byte[] @userParam) {
            fixed (byte *ptr_userParam = @userParam) {
                Native_DebugMessageCallbackAMD(@callback, @ptr_userParam);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDebugMessageCallbackARB")]
        static extern void Native_DebugMessageCallbackARB(IntPtr @callback, byte* @userParam);

        public void DebugMessageCallbackARB(IntPtr @callback, byte[] @userParam) {
            fixed (byte *ptr_userParam = @userParam) {
                Native_DebugMessageCallbackARB(@callback, @ptr_userParam);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDebugMessageCallbackKHR")]
        static extern void Native_DebugMessageCallbackKHR(IntPtr @callback, byte* @userParam);

        public void DebugMessageCallbackKHR(IntPtr @callback, byte[] @userParam) {
            fixed (byte *ptr_userParam = @userParam) {
                Native_DebugMessageCallbackKHR(@callback, @ptr_userParam);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDebugMessageControl")]
        static extern void Native_DebugMessageControl(GlDebugSource @source, GlDebugType @type, GlDebugSeverity @severity, int @count, uint* @ids, GlBoolean @enabled);

        public void DebugMessageControl(GlDebugSource @source, GlDebugType @type, GlDebugSeverity @severity, int @count, uint[] @ids, GlBoolean @enabled) {
            fixed (uint *ptr_ids = @ids) {
                Native_DebugMessageControl(@source, @type, @severity, @count, @ptr_ids, @enabled);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDebugMessageControlARB")]
        static extern void Native_DebugMessageControlARB(GlDebugSource @source, GlDebugType @type, GlDebugSeverity @severity, int @count, uint* @ids, GlBoolean @enabled);

        public void DebugMessageControlARB(GlDebugSource @source, GlDebugType @type, GlDebugSeverity @severity, int @count, uint[] @ids, GlBoolean @enabled) {
            fixed (uint *ptr_ids = @ids) {
                Native_DebugMessageControlARB(@source, @type, @severity, @count, @ptr_ids, @enabled);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDebugMessageControlKHR")]
        static extern void Native_DebugMessageControlKHR(GlDebugSource @source, GlDebugType @type, GlDebugSeverity @severity, int @count, uint* @ids, bool @enabled);

        public void DebugMessageControlKHR(GlDebugSource @source, GlDebugType @type, GlDebugSeverity @severity, int @count, uint[] @ids, bool @enabled) {
            fixed (uint *ptr_ids = @ids) {
                Native_DebugMessageControlKHR(@source, @type, @severity, @count, @ptr_ids, @enabled);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDebugMessageEnableAMD")]
        static extern void Native_DebugMessageEnableAMD(uint @category, GlDebugSeverity @severity, int @count, uint* @ids, GlBoolean @enabled);

        public void DebugMessageEnableAMD(uint @category, GlDebugSeverity @severity, int @count, uint[] @ids, GlBoolean @enabled) {
            fixed (uint *ptr_ids = @ids) {
                Native_DebugMessageEnableAMD(@category, @severity, @count, @ptr_ids, @enabled);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDebugMessageInsert")]
        static extern void Native_DebugMessageInsert(GlDebugSource @source, GlDebugType @type, uint @id, GlDebugSeverity @severity, int @length, byte* @buf);

        public void DebugMessageInsert(GlDebugSource @source, GlDebugType @type, uint @id, GlDebugSeverity @severity, int @length, byte[] @buf) {
            fixed (byte *ptr_buf = @buf) {
                Native_DebugMessageInsert(@source, @type, @id, @severity, @length, @ptr_buf);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDebugMessageInsertAMD")]
        static extern void Native_DebugMessageInsertAMD(uint @category, GlDebugSeverity @severity, uint @id, int @length, byte* @buf);

        public void DebugMessageInsertAMD(uint @category, GlDebugSeverity @severity, uint @id, int @length, byte[] @buf) {
            fixed (byte *ptr_buf = @buf) {
                Native_DebugMessageInsertAMD(@category, @severity, @id, @length, @ptr_buf);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDebugMessageInsertARB")]
        static extern void Native_DebugMessageInsertARB(GlDebugSource @source, GlDebugType @type, uint @id, GlDebugSeverity @severity, int @length, byte* @buf);

        public void DebugMessageInsertARB(GlDebugSource @source, GlDebugType @type, uint @id, GlDebugSeverity @severity, int @length, byte[] @buf) {
            fixed (byte *ptr_buf = @buf) {
                Native_DebugMessageInsertARB(@source, @type, @id, @severity, @length, @ptr_buf);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDebugMessageInsertKHR")]
        static extern void Native_DebugMessageInsertKHR(GlDebugSource @source, GlDebugType @type, uint @id, GlDebugSeverity @severity, int @length, byte* @buf);

        public void DebugMessageInsertKHR(GlDebugSource @source, GlDebugType @type, uint @id, GlDebugSeverity @severity, int @length, byte[] @buf) {
            fixed (byte *ptr_buf = @buf) {
                Native_DebugMessageInsertKHR(@source, @type, @id, @severity, @length, @ptr_buf);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeformSGIX")]
        static extern void Native_DeformSGIX(GlFfdMaskSGIX @mask);

        public void DeformSGIX(GlFfdMaskSGIX @mask) {
            Native_DeformSGIX(@mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeformationMap3dSGIX")]
        static extern void Native_DeformationMap3dSGIX(GlFfdTargetSGIX @target, double @u1, double @u2, int @ustride, int @uorder, double @v1, double @v2, int @vstride, int @vorder, double @w1, double @w2, int @wstride, int @worder, double* @points);

        public void DeformationMap3dSGIX(GlFfdTargetSGIX @target, double @u1, double @u2, int @ustride, int @uorder, double @v1, double @v2, int @vstride, int @vorder, double @w1, double @w2, int @wstride, int @worder, double[] @points) {
            fixed (double *ptr_points = @points) {
                Native_DeformationMap3dSGIX(@target, @u1, @u2, @ustride, @uorder, @v1, @v2, @vstride, @vorder, @w1, @w2, @wstride, @worder, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeformationMap3fSGIX")]
        static extern void Native_DeformationMap3fSGIX(GlFfdTargetSGIX @target, float @u1, float @u2, int @ustride, int @uorder, float @v1, float @v2, int @vstride, int @vorder, float @w1, float @w2, int @wstride, int @worder, float* @points);

        public void DeformationMap3fSGIX(GlFfdTargetSGIX @target, float @u1, float @u2, int @ustride, int @uorder, float @v1, float @v2, int @vstride, int @vorder, float @w1, float @w2, int @wstride, int @worder, float[] @points) {
            fixed (float *ptr_points = @points) {
                Native_DeformationMap3fSGIX(@target, @u1, @u2, @ustride, @uorder, @v1, @v2, @vstride, @vorder, @w1, @w2, @wstride, @worder, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteAsyncMarkersSGIX")]
        static extern void Native_DeleteAsyncMarkersSGIX(uint @marker, int @range);

        public void DeleteAsyncMarkersSGIX(uint @marker, int @range) {
            Native_DeleteAsyncMarkersSGIX(@marker, @range);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteBuffers")]
        static extern void Native_DeleteBuffers(int @n, uint* @buffers);

        public void DeleteBuffers(int @n, uint[] @buffers) {
            fixed (uint *ptr_buffers = @buffers) {
                Native_DeleteBuffers(@n, @ptr_buffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteBuffersARB")]
        static extern void Native_DeleteBuffersARB(int @n, uint* @buffers);

        public void DeleteBuffersARB(int @n, uint[] @buffers) {
            fixed (uint *ptr_buffers = @buffers) {
                Native_DeleteBuffersARB(@n, @ptr_buffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteCommandListsNV")]
        static extern void Native_DeleteCommandListsNV(int @n, uint* @lists);

        public void DeleteCommandListsNV(int @n, uint[] @lists) {
            fixed (uint *ptr_lists = @lists) {
                Native_DeleteCommandListsNV(@n, @ptr_lists);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteFencesAPPLE")]
        static extern void Native_DeleteFencesAPPLE(int @n, uint* @fences);

        public void DeleteFencesAPPLE(int @n, uint[] @fences) {
            fixed (uint *ptr_fences = @fences) {
                Native_DeleteFencesAPPLE(@n, @ptr_fences);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteFencesNV")]
        static extern void Native_DeleteFencesNV(int @n, uint* @fences);

        public void DeleteFencesNV(int @n, uint[] @fences) {
            fixed (uint *ptr_fences = @fences) {
                Native_DeleteFencesNV(@n, @ptr_fences);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteFragmentShaderATI")]
        static extern void Native_DeleteFragmentShaderATI(uint @id);

        public void DeleteFragmentShaderATI(uint @id) {
            Native_DeleteFragmentShaderATI(@id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteFramebuffers")]
        static extern void Native_DeleteFramebuffers(int @n, uint* @framebuffers);

        public void DeleteFramebuffers(int @n, uint[] @framebuffers) {
            fixed (uint *ptr_framebuffers = @framebuffers) {
                Native_DeleteFramebuffers(@n, @ptr_framebuffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteFramebuffersEXT")]
        static extern void Native_DeleteFramebuffersEXT(int @n, uint* @framebuffers);

        public void DeleteFramebuffersEXT(int @n, uint[] @framebuffers) {
            fixed (uint *ptr_framebuffers = @framebuffers) {
                Native_DeleteFramebuffersEXT(@n, @ptr_framebuffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteFramebuffersOES")]
        static extern void Native_DeleteFramebuffersOES(int @n, uint* @framebuffers);

        public void DeleteFramebuffersOES(int @n, uint[] @framebuffers) {
            fixed (uint *ptr_framebuffers = @framebuffers) {
                Native_DeleteFramebuffersOES(@n, @ptr_framebuffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteLists")]
        static extern void Native_DeleteLists(uint @list, int @range);

        public void DeleteLists(uint @list, int @range) {
            Native_DeleteLists(@list, @range);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteMemoryObjectsEXT")]
        static extern void Native_DeleteMemoryObjectsEXT(int @n, uint* @memoryObjects);

        public void DeleteMemoryObjectsEXT(int @n, uint[] @memoryObjects) {
            fixed (uint *ptr_memoryObjects = @memoryObjects) {
                Native_DeleteMemoryObjectsEXT(@n, @ptr_memoryObjects);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteNamedStringARB")]
        static extern void Native_DeleteNamedStringARB(int @namelen, byte* @name);

        public void DeleteNamedStringARB(int @namelen, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                Native_DeleteNamedStringARB(@namelen, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteNamesAMD")]
        static extern void Native_DeleteNamesAMD(uint @identifier, uint @num, uint* @names);

        public void DeleteNamesAMD(uint @identifier, uint @num, uint[] @names) {
            fixed (uint *ptr_names = @names) {
                Native_DeleteNamesAMD(@identifier, @num, @ptr_names);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteObjectARB")]
        static extern void Native_DeleteObjectARB(IntPtr @obj);

        public void DeleteObjectARB(IntPtr @obj) {
            Native_DeleteObjectARB(@obj);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteOcclusionQueriesNV")]
        static extern void Native_DeleteOcclusionQueriesNV(int @n, uint* @ids);

        public void DeleteOcclusionQueriesNV(int @n, uint[] @ids) {
            fixed (uint *ptr_ids = @ids) {
                Native_DeleteOcclusionQueriesNV(@n, @ptr_ids);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeletePathsNV")]
        static extern void Native_DeletePathsNV(uint @path, int @range);

        public void DeletePathsNV(uint @path, int @range) {
            Native_DeletePathsNV(@path, @range);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeletePerfMonitorsAMD")]
        static extern void Native_DeletePerfMonitorsAMD(int @n, uint* @monitors);

        public void DeletePerfMonitorsAMD(int @n, uint[] @monitors) {
            fixed (uint *ptr_monitors = @monitors) {
                Native_DeletePerfMonitorsAMD(@n, @ptr_monitors);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeletePerfQueryINTEL")]
        static extern void Native_DeletePerfQueryINTEL(uint @queryHandle);

        public void DeletePerfQueryINTEL(uint @queryHandle) {
            Native_DeletePerfQueryINTEL(@queryHandle);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteProgram")]
        static extern void Native_DeleteProgram(uint @program);

        public void DeleteProgram(uint @program) {
            Native_DeleteProgram(@program);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteProgramPipelines")]
        static extern void Native_DeleteProgramPipelines(int @n, uint* @pipelines);

        public void DeleteProgramPipelines(int @n, uint[] @pipelines) {
            fixed (uint *ptr_pipelines = @pipelines) {
                Native_DeleteProgramPipelines(@n, @ptr_pipelines);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteProgramPipelinesEXT")]
        static extern void Native_DeleteProgramPipelinesEXT(int @n, uint* @pipelines);

        public void DeleteProgramPipelinesEXT(int @n, uint[] @pipelines) {
            fixed (uint *ptr_pipelines = @pipelines) {
                Native_DeleteProgramPipelinesEXT(@n, @ptr_pipelines);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteProgramsARB")]
        static extern void Native_DeleteProgramsARB(int @n, uint* @programs);

        public void DeleteProgramsARB(int @n, uint[] @programs) {
            fixed (uint *ptr_programs = @programs) {
                Native_DeleteProgramsARB(@n, @ptr_programs);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteProgramsNV")]
        static extern void Native_DeleteProgramsNV(int @n, uint* @programs);

        public void DeleteProgramsNV(int @n, uint[] @programs) {
            fixed (uint *ptr_programs = @programs) {
                Native_DeleteProgramsNV(@n, @ptr_programs);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteQueries")]
        static extern void Native_DeleteQueries(int @n, uint* @ids);

        public void DeleteQueries(int @n, uint[] @ids) {
            fixed (uint *ptr_ids = @ids) {
                Native_DeleteQueries(@n, @ptr_ids);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteQueriesARB")]
        static extern void Native_DeleteQueriesARB(int @n, uint* @ids);

        public void DeleteQueriesARB(int @n, uint[] @ids) {
            fixed (uint *ptr_ids = @ids) {
                Native_DeleteQueriesARB(@n, @ptr_ids);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteQueriesEXT")]
        static extern void Native_DeleteQueriesEXT(int @n, uint* @ids);

        public void DeleteQueriesEXT(int @n, uint[] @ids) {
            fixed (uint *ptr_ids = @ids) {
                Native_DeleteQueriesEXT(@n, @ptr_ids);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteQueryResourceTagNV")]
        static extern void Native_DeleteQueryResourceTagNV(int @n, int* @tagIds);

        public void DeleteQueryResourceTagNV(int @n, int[] @tagIds) {
            fixed (int *ptr_tagIds = @tagIds) {
                Native_DeleteQueryResourceTagNV(@n, @ptr_tagIds);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteRenderbuffers")]
        static extern void Native_DeleteRenderbuffers(int @n, uint* @renderbuffers);

        public void DeleteRenderbuffers(int @n, uint[] @renderbuffers) {
            fixed (uint *ptr_renderbuffers = @renderbuffers) {
                Native_DeleteRenderbuffers(@n, @ptr_renderbuffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteRenderbuffersEXT")]
        static extern void Native_DeleteRenderbuffersEXT(int @n, uint* @renderbuffers);

        public void DeleteRenderbuffersEXT(int @n, uint[] @renderbuffers) {
            fixed (uint *ptr_renderbuffers = @renderbuffers) {
                Native_DeleteRenderbuffersEXT(@n, @ptr_renderbuffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteRenderbuffersOES")]
        static extern void Native_DeleteRenderbuffersOES(int @n, uint* @renderbuffers);

        public void DeleteRenderbuffersOES(int @n, uint[] @renderbuffers) {
            fixed (uint *ptr_renderbuffers = @renderbuffers) {
                Native_DeleteRenderbuffersOES(@n, @ptr_renderbuffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteSamplers")]
        static extern void Native_DeleteSamplers(int @count, uint* @samplers);

        public void DeleteSamplers(int @count, uint[] @samplers) {
            fixed (uint *ptr_samplers = @samplers) {
                Native_DeleteSamplers(@count, @ptr_samplers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteSemaphoresEXT")]
        static extern void Native_DeleteSemaphoresEXT(int @n, uint* @semaphores);

        public void DeleteSemaphoresEXT(int @n, uint[] @semaphores) {
            fixed (uint *ptr_semaphores = @semaphores) {
                Native_DeleteSemaphoresEXT(@n, @ptr_semaphores);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteShader")]
        static extern void Native_DeleteShader(uint @shader);

        public void DeleteShader(uint @shader) {
            Native_DeleteShader(@shader);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteStatesNV")]
        static extern void Native_DeleteStatesNV(int @n, uint* @states);

        public void DeleteStatesNV(int @n, uint[] @states) {
            fixed (uint *ptr_states = @states) {
                Native_DeleteStatesNV(@n, @ptr_states);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteSync")]
        static extern void Native_DeleteSync(IntPtr @sync);

        public void DeleteSync(IntPtr @sync) {
            Native_DeleteSync(@sync);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteSyncAPPLE")]
        static extern void Native_DeleteSyncAPPLE(IntPtr @sync);

        public void DeleteSyncAPPLE(IntPtr @sync) {
            Native_DeleteSyncAPPLE(@sync);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteTextures")]
        static extern void Native_DeleteTextures(int @n, uint* @textures);

        public void DeleteTextures(int @n, uint[] @textures) {
            fixed (uint *ptr_textures = @textures) {
                Native_DeleteTextures(@n, @ptr_textures);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteTexturesEXT")]
        static extern void Native_DeleteTexturesEXT(int @n, uint* @textures);

        public void DeleteTexturesEXT(int @n, uint[] @textures) {
            fixed (uint *ptr_textures = @textures) {
                Native_DeleteTexturesEXT(@n, @ptr_textures);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteTransformFeedbacks")]
        static extern void Native_DeleteTransformFeedbacks(int @n, uint* @ids);

        public void DeleteTransformFeedbacks(int @n, uint[] @ids) {
            fixed (uint *ptr_ids = @ids) {
                Native_DeleteTransformFeedbacks(@n, @ptr_ids);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteTransformFeedbacksNV")]
        static extern void Native_DeleteTransformFeedbacksNV(int @n, uint* @ids);

        public void DeleteTransformFeedbacksNV(int @n, uint[] @ids) {
            fixed (uint *ptr_ids = @ids) {
                Native_DeleteTransformFeedbacksNV(@n, @ptr_ids);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteVertexArrays")]
        static extern void Native_DeleteVertexArrays(int @n, uint* @arrays);

        public void DeleteVertexArrays(int @n, uint[] @arrays) {
            fixed (uint *ptr_arrays = @arrays) {
                Native_DeleteVertexArrays(@n, @ptr_arrays);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteVertexArraysAPPLE")]
        static extern void Native_DeleteVertexArraysAPPLE(int @n, uint* @arrays);

        public void DeleteVertexArraysAPPLE(int @n, uint[] @arrays) {
            fixed (uint *ptr_arrays = @arrays) {
                Native_DeleteVertexArraysAPPLE(@n, @ptr_arrays);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteVertexArraysOES")]
        static extern void Native_DeleteVertexArraysOES(int @n, uint* @arrays);

        public void DeleteVertexArraysOES(int @n, uint[] @arrays) {
            fixed (uint *ptr_arrays = @arrays) {
                Native_DeleteVertexArraysOES(@n, @ptr_arrays);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDeleteVertexShaderEXT")]
        static extern void Native_DeleteVertexShaderEXT(uint @id);

        public void DeleteVertexShaderEXT(uint @id) {
            Native_DeleteVertexShaderEXT(@id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthBoundsEXT")]
        static extern void Native_DepthBoundsEXT(double @zmin, double @zmax);

        public void DepthBoundsEXT(double @zmin, double @zmax) {
            Native_DepthBoundsEXT(@zmin, @zmax);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthBoundsdNV")]
        static extern void Native_DepthBoundsdNV(double @zmin, double @zmax);

        public void DepthBoundsdNV(double @zmin, double @zmax) {
            Native_DepthBoundsdNV(@zmin, @zmax);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthFunc")]
        static extern void Native_DepthFunc(GlDepthFunction @func);

        public void DepthFunc(GlDepthFunction @func) {
            Native_DepthFunc(@func);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthMask")]
        static extern void Native_DepthMask(GlBoolean @flag);

        public void DepthMask(GlBoolean @flag) {
            Native_DepthMask(@flag);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthRange")]
        static extern void Native_DepthRange(double @near, double @far);

        public void DepthRange(double @near, double @far) {
            Native_DepthRange(@near, @far);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthRangeArrayfvNV")]
        static extern void Native_DepthRangeArrayfvNV(uint @first, int @count, float* @v);

        public void DepthRangeArrayfvNV(uint @first, int @count, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_DepthRangeArrayfvNV(@first, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthRangeArrayfvOES")]
        static extern void Native_DepthRangeArrayfvOES(uint @first, int @count, float* @v);

        public void DepthRangeArrayfvOES(uint @first, int @count, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_DepthRangeArrayfvOES(@first, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthRangeArrayv")]
        static extern void Native_DepthRangeArrayv(uint @first, int @count, double* @v);

        public void DepthRangeArrayv(uint @first, int @count, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_DepthRangeArrayv(@first, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthRangeIndexed")]
        static extern void Native_DepthRangeIndexed(uint @index, double @n, double @f);

        public void DepthRangeIndexed(uint @index, double @n, double @f) {
            Native_DepthRangeIndexed(@index, @n, @f);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthRangeIndexedfNV")]
        static extern void Native_DepthRangeIndexedfNV(uint @index, float @n, float @f);

        public void DepthRangeIndexedfNV(uint @index, float @n, float @f) {
            Native_DepthRangeIndexedfNV(@index, @n, @f);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthRangeIndexedfOES")]
        static extern void Native_DepthRangeIndexedfOES(uint @index, float @n, float @f);

        public void DepthRangeIndexedfOES(uint @index, float @n, float @f) {
            Native_DepthRangeIndexedfOES(@index, @n, @f);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthRangedNV")]
        static extern void Native_DepthRangedNV(double @zNear, double @zFar);

        public void DepthRangedNV(double @zNear, double @zFar) {
            Native_DepthRangedNV(@zNear, @zFar);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthRangef")]
        static extern void Native_DepthRangef(float @n, float @f);

        public void DepthRangef(float @n, float @f) {
            Native_DepthRangef(@n, @f);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthRangefOES")]
        static extern void Native_DepthRangefOES(float @n, float @f);

        public void DepthRangefOES(float @n, float @f) {
            Native_DepthRangefOES(@n, @f);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthRangex")]
        static extern void Native_DepthRangex(int @n, int @f);

        public void DepthRangex(int @n, int @f) {
            Native_DepthRangex(@n, @f);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDepthRangexOES")]
        static extern void Native_DepthRangexOES(int @n, int @f);

        public void DepthRangexOES(int @n, int @f) {
            Native_DepthRangexOES(@n, @f);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDetachObjectARB")]
        static extern void Native_DetachObjectARB(IntPtr @containerObj, IntPtr @attachedObj);

        public void DetachObjectARB(IntPtr @containerObj, IntPtr @attachedObj) {
            Native_DetachObjectARB(@containerObj, @attachedObj);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDetachShader")]
        static extern void Native_DetachShader(uint @program, uint @shader);

        public void DetachShader(uint @program, uint @shader) {
            Native_DetachShader(@program, @shader);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDetailTexFuncSGIS")]
        static extern void Native_DetailTexFuncSGIS(GlTextureTarget @target, int @n, float* @points);

        public void DetailTexFuncSGIS(GlTextureTarget @target, int @n, float[] @points) {
            fixed (float *ptr_points = @points) {
                Native_DetailTexFuncSGIS(@target, @n, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisable")]
        static extern void Native_Disable(GlEnableCap @cap);

        public void Disable(GlEnableCap @cap) {
            Native_Disable(@cap);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisableClientState")]
        static extern void Native_DisableClientState(GlEnableCap @array);

        public void DisableClientState(GlEnableCap @array) {
            Native_DisableClientState(@array);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisableClientStateIndexedEXT")]
        static extern void Native_DisableClientStateIndexedEXT(GlEnableCap @array, uint @index);

        public void DisableClientStateIndexedEXT(GlEnableCap @array, uint @index) {
            Native_DisableClientStateIndexedEXT(@array, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisableClientStateiEXT")]
        static extern void Native_DisableClientStateiEXT(GlEnableCap @array, uint @index);

        public void DisableClientStateiEXT(GlEnableCap @array, uint @index) {
            Native_DisableClientStateiEXT(@array, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisableDriverControlQCOM")]
        static extern void Native_DisableDriverControlQCOM(uint @driverControl);

        public void DisableDriverControlQCOM(uint @driverControl) {
            Native_DisableDriverControlQCOM(@driverControl);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisableIndexedEXT")]
        static extern void Native_DisableIndexedEXT(GlEnableCap @target, uint @index);

        public void DisableIndexedEXT(GlEnableCap @target, uint @index) {
            Native_DisableIndexedEXT(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisableVariantClientStateEXT")]
        static extern void Native_DisableVariantClientStateEXT(uint @id);

        public void DisableVariantClientStateEXT(uint @id) {
            Native_DisableVariantClientStateEXT(@id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisableVertexArrayAttrib")]
        static extern void Native_DisableVertexArrayAttrib(uint @vaobj, uint @index);

        public void DisableVertexArrayAttrib(uint @vaobj, uint @index) {
            Native_DisableVertexArrayAttrib(@vaobj, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisableVertexArrayAttribEXT")]
        static extern void Native_DisableVertexArrayAttribEXT(uint @vaobj, uint @index);

        public void DisableVertexArrayAttribEXT(uint @vaobj, uint @index) {
            Native_DisableVertexArrayAttribEXT(@vaobj, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisableVertexArrayEXT")]
        static extern void Native_DisableVertexArrayEXT(uint @vaobj, GlEnableCap @array);

        public void DisableVertexArrayEXT(uint @vaobj, GlEnableCap @array) {
            Native_DisableVertexArrayEXT(@vaobj, @array);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisableVertexAttribAPPLE")]
        static extern void Native_DisableVertexAttribAPPLE(uint @index, uint @pname);

        public void DisableVertexAttribAPPLE(uint @index, uint @pname) {
            Native_DisableVertexAttribAPPLE(@index, @pname);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisableVertexAttribArray")]
        static extern void Native_DisableVertexAttribArray(uint @index);

        public void DisableVertexAttribArray(uint @index) {
            Native_DisableVertexAttribArray(@index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisableVertexAttribArrayARB")]
        static extern void Native_DisableVertexAttribArrayARB(uint @index);

        public void DisableVertexAttribArrayARB(uint @index) {
            Native_DisableVertexAttribArrayARB(@index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisablei")]
        static extern void Native_Disablei(GlEnableCap @target, uint @index);

        public void Disablei(GlEnableCap @target, uint @index) {
            Native_Disablei(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisableiEXT")]
        static extern void Native_DisableiEXT(GlEnableCap @target, uint @index);

        public void DisableiEXT(GlEnableCap @target, uint @index) {
            Native_DisableiEXT(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisableiNV")]
        static extern void Native_DisableiNV(GlEnableCap @target, uint @index);

        public void DisableiNV(GlEnableCap @target, uint @index) {
            Native_DisableiNV(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDisableiOES")]
        static extern void Native_DisableiOES(GlEnableCap @target, uint @index);

        public void DisableiOES(GlEnableCap @target, uint @index) {
            Native_DisableiOES(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDiscardFramebufferEXT")]
        static extern void Native_DiscardFramebufferEXT(uint @target, int @numAttachments, uint* @attachments);

        public void DiscardFramebufferEXT(uint @target, int @numAttachments, uint[] @attachments) {
            fixed (uint *ptr_attachments = @attachments) {
                Native_DiscardFramebufferEXT(@target, @numAttachments, @ptr_attachments);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDispatchCompute")]
        static extern void Native_DispatchCompute(uint @num_groups_x, uint @num_groups_y, uint @num_groups_z);

        public void DispatchCompute(uint @num_groups_x, uint @num_groups_y, uint @num_groups_z) {
            Native_DispatchCompute(@num_groups_x, @num_groups_y, @num_groups_z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDispatchComputeGroupSizeARB")]
        static extern void Native_DispatchComputeGroupSizeARB(uint @num_groups_x, uint @num_groups_y, uint @num_groups_z, uint @group_size_x, uint @group_size_y, uint @group_size_z);

        public void DispatchComputeGroupSizeARB(uint @num_groups_x, uint @num_groups_y, uint @num_groups_z, uint @group_size_x, uint @group_size_y, uint @group_size_z) {
            Native_DispatchComputeGroupSizeARB(@num_groups_x, @num_groups_y, @num_groups_z, @group_size_x, @group_size_y, @group_size_z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDispatchComputeIndirect")]
        static extern void Native_DispatchComputeIndirect(long @indirect);

        public void DispatchComputeIndirect(long @indirect) {
            Native_DispatchComputeIndirect(@indirect);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawArrays")]
        static extern void Native_DrawArrays(GlPrimitiveType @mode, int @first, int @count);

        public void DrawArrays(GlPrimitiveType @mode, int @first, int @count) {
            Native_DrawArrays(@mode, @first, @count);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawArraysEXT")]
        static extern void Native_DrawArraysEXT(GlPrimitiveType @mode, int @first, int @count);

        public void DrawArraysEXT(GlPrimitiveType @mode, int @first, int @count) {
            Native_DrawArraysEXT(@mode, @first, @count);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawArraysIndirect")]
        static extern void Native_DrawArraysIndirect(GlPrimitiveType @mode, byte* @indirect);

        public void DrawArraysIndirect(GlPrimitiveType @mode, byte[] @indirect) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_DrawArraysIndirect(@mode, @ptr_indirect);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawArraysInstanced")]
        static extern void Native_DrawArraysInstanced(GlPrimitiveType @mode, int @first, int @count, int @instancecount);

        public void DrawArraysInstanced(GlPrimitiveType @mode, int @first, int @count, int @instancecount) {
            Native_DrawArraysInstanced(@mode, @first, @count, @instancecount);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawArraysInstancedANGLE")]
        static extern void Native_DrawArraysInstancedANGLE(GlPrimitiveType @mode, int @first, int @count, int @primcount);

        public void DrawArraysInstancedANGLE(GlPrimitiveType @mode, int @first, int @count, int @primcount) {
            Native_DrawArraysInstancedANGLE(@mode, @first, @count, @primcount);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawArraysInstancedARB")]
        static extern void Native_DrawArraysInstancedARB(GlPrimitiveType @mode, int @first, int @count, int @primcount);

        public void DrawArraysInstancedARB(GlPrimitiveType @mode, int @first, int @count, int @primcount) {
            Native_DrawArraysInstancedARB(@mode, @first, @count, @primcount);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawArraysInstancedBaseInstance")]
        static extern void Native_DrawArraysInstancedBaseInstance(GlPrimitiveType @mode, int @first, int @count, int @instancecount, uint @baseinstance);

        public void DrawArraysInstancedBaseInstance(GlPrimitiveType @mode, int @first, int @count, int @instancecount, uint @baseinstance) {
            Native_DrawArraysInstancedBaseInstance(@mode, @first, @count, @instancecount, @baseinstance);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawArraysInstancedBaseInstanceEXT")]
        static extern void Native_DrawArraysInstancedBaseInstanceEXT(GlPrimitiveType @mode, int @first, int @count, int @instancecount, uint @baseinstance);

        public void DrawArraysInstancedBaseInstanceEXT(GlPrimitiveType @mode, int @first, int @count, int @instancecount, uint @baseinstance) {
            Native_DrawArraysInstancedBaseInstanceEXT(@mode, @first, @count, @instancecount, @baseinstance);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawArraysInstancedEXT")]
        static extern void Native_DrawArraysInstancedEXT(GlPrimitiveType @mode, int @start, int @count, int @primcount);

        public void DrawArraysInstancedEXT(GlPrimitiveType @mode, int @start, int @count, int @primcount) {
            Native_DrawArraysInstancedEXT(@mode, @start, @count, @primcount);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawArraysInstancedNV")]
        static extern void Native_DrawArraysInstancedNV(GlPrimitiveType @mode, int @first, int @count, int @primcount);

        public void DrawArraysInstancedNV(GlPrimitiveType @mode, int @first, int @count, int @primcount) {
            Native_DrawArraysInstancedNV(@mode, @first, @count, @primcount);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawBuffer")]
        static extern void Native_DrawBuffer(GlDrawBufferMode @buf);

        public void DrawBuffer(GlDrawBufferMode @buf) {
            Native_DrawBuffer(@buf);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawBuffers")]
        static extern void Native_DrawBuffers(int @n, uint* @bufs);

        public void DrawBuffers(int @n, uint[] @bufs) {
            fixed (uint *ptr_bufs = @bufs) {
                Native_DrawBuffers(@n, @ptr_bufs);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawBuffersARB")]
        static extern void Native_DrawBuffersARB(int @n, uint* @bufs);

        public void DrawBuffersARB(int @n, uint[] @bufs) {
            fixed (uint *ptr_bufs = @bufs) {
                Native_DrawBuffersARB(@n, @ptr_bufs);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawBuffersATI")]
        static extern void Native_DrawBuffersATI(int @n, uint* @bufs);

        public void DrawBuffersATI(int @n, uint[] @bufs) {
            fixed (uint *ptr_bufs = @bufs) {
                Native_DrawBuffersATI(@n, @ptr_bufs);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawBuffersEXT")]
        static extern void Native_DrawBuffersEXT(int @n, uint* @bufs);

        public void DrawBuffersEXT(int @n, uint[] @bufs) {
            fixed (uint *ptr_bufs = @bufs) {
                Native_DrawBuffersEXT(@n, @ptr_bufs);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawBuffersIndexedEXT")]
        static extern void Native_DrawBuffersIndexedEXT(int @n, uint* @location, int* @indices);

        public void DrawBuffersIndexedEXT(int @n, uint[] @location, int[] @indices) {
            fixed (uint *ptr_location = @location) {
                fixed (int *ptr_indices = @indices) {
                    Native_DrawBuffersIndexedEXT(@n, @ptr_location, @ptr_indices);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawBuffersNV")]
        static extern void Native_DrawBuffersNV(int @n, uint* @bufs);

        public void DrawBuffersNV(int @n, uint[] @bufs) {
            fixed (uint *ptr_bufs = @bufs) {
                Native_DrawBuffersNV(@n, @ptr_bufs);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawCommandsAddressNV")]
        static extern void Native_DrawCommandsAddressNV(uint @primitiveMode, ulong* @indirects, int* @sizes, uint @count);

        public void DrawCommandsAddressNV(uint @primitiveMode, ulong[] @indirects, int[] @sizes, uint @count) {
            fixed (ulong *ptr_indirects = @indirects) {
                fixed (int *ptr_sizes = @sizes) {
                    Native_DrawCommandsAddressNV(@primitiveMode, @ptr_indirects, @ptr_sizes, @count);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawCommandsNV")]
        static extern void Native_DrawCommandsNV(uint @primitiveMode, uint @buffer, long* @indirects, int* @sizes, uint @count);

        public void DrawCommandsNV(uint @primitiveMode, uint @buffer, long[] @indirects, int[] @sizes, uint @count) {
            fixed (long *ptr_indirects = @indirects) {
                fixed (int *ptr_sizes = @sizes) {
                    Native_DrawCommandsNV(@primitiveMode, @buffer, @ptr_indirects, @ptr_sizes, @count);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawCommandsStatesAddressNV")]
        static extern void Native_DrawCommandsStatesAddressNV(ulong* @indirects, int* @sizes, uint* @states, uint* @fbos, uint @count);

        public void DrawCommandsStatesAddressNV(ulong[] @indirects, int[] @sizes, uint[] @states, uint[] @fbos, uint @count) {
            fixed (ulong *ptr_indirects = @indirects) {
                fixed (int *ptr_sizes = @sizes) {
                    fixed (uint *ptr_states = @states) {
                        fixed (uint *ptr_fbos = @fbos) {
                            Native_DrawCommandsStatesAddressNV(@ptr_indirects, @ptr_sizes, @ptr_states, @ptr_fbos, @count);
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawCommandsStatesNV")]
        static extern void Native_DrawCommandsStatesNV(uint @buffer, long* @indirects, int* @sizes, uint* @states, uint* @fbos, uint @count);

        public void DrawCommandsStatesNV(uint @buffer, long[] @indirects, int[] @sizes, uint[] @states, uint[] @fbos, uint @count) {
            fixed (long *ptr_indirects = @indirects) {
                fixed (int *ptr_sizes = @sizes) {
                    fixed (uint *ptr_states = @states) {
                        fixed (uint *ptr_fbos = @fbos) {
                            Native_DrawCommandsStatesNV(@buffer, @ptr_indirects, @ptr_sizes, @ptr_states, @ptr_fbos, @count);
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementArrayAPPLE")]
        static extern void Native_DrawElementArrayAPPLE(GlPrimitiveType @mode, int @first, int @count);

        public void DrawElementArrayAPPLE(GlPrimitiveType @mode, int @first, int @count) {
            Native_DrawElementArrayAPPLE(@mode, @first, @count);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementArrayATI")]
        static extern void Native_DrawElementArrayATI(GlPrimitiveType @mode, int @count);

        public void DrawElementArrayATI(GlPrimitiveType @mode, int @count) {
            Native_DrawElementArrayATI(@mode, @count);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElements")]
        static extern void Native_DrawElements(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte* @indices);

        public void DrawElements(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte[] @indices) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElements(@mode, @count, @type, @ptr_indices);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsBaseVertex")]
        static extern void Native_DrawElementsBaseVertex(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte* @indices, int @basevertex);

        public void DrawElementsBaseVertex(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte[] @indices, int @basevertex) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElementsBaseVertex(@mode, @count, @type, @ptr_indices, @basevertex);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsBaseVertexEXT")]
        static extern void Native_DrawElementsBaseVertexEXT(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte* @indices, int @basevertex);

        public void DrawElementsBaseVertexEXT(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte[] @indices, int @basevertex) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElementsBaseVertexEXT(@mode, @count, @type, @ptr_indices, @basevertex);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsBaseVertexOES")]
        static extern void Native_DrawElementsBaseVertexOES(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte* @indices, int @basevertex);

        public void DrawElementsBaseVertexOES(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte[] @indices, int @basevertex) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElementsBaseVertexOES(@mode, @count, @type, @ptr_indices, @basevertex);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsIndirect")]
        static extern void Native_DrawElementsIndirect(GlPrimitiveType @mode, GlDrawElementsType @type, byte* @indirect);

        public void DrawElementsIndirect(GlPrimitiveType @mode, GlDrawElementsType @type, byte[] @indirect) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_DrawElementsIndirect(@mode, @type, @ptr_indirect);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsInstanced")]
        static extern void Native_DrawElementsInstanced(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte* @indices, int @instancecount);

        public void DrawElementsInstanced(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte[] @indices, int @instancecount) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElementsInstanced(@mode, @count, @type, @ptr_indices, @instancecount);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsInstancedANGLE")]
        static extern void Native_DrawElementsInstancedANGLE(GlPrimitiveType @mode, int @count, GlPrimitiveType @type, byte* @indices, int @primcount);

        public void DrawElementsInstancedANGLE(GlPrimitiveType @mode, int @count, GlPrimitiveType @type, byte[] @indices, int @primcount) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElementsInstancedANGLE(@mode, @count, @type, @ptr_indices, @primcount);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsInstancedARB")]
        static extern void Native_DrawElementsInstancedARB(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte* @indices, int @primcount);

        public void DrawElementsInstancedARB(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte[] @indices, int @primcount) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElementsInstancedARB(@mode, @count, @type, @ptr_indices, @primcount);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsInstancedBaseInstance")]
        static extern void Native_DrawElementsInstancedBaseInstance(GlPrimitiveType @mode, int @count, GlPrimitiveType @type, byte* @indices, int @instancecount, uint @baseinstance);

        public void DrawElementsInstancedBaseInstance(GlPrimitiveType @mode, int @count, GlPrimitiveType @type, byte[] @indices, int @instancecount, uint @baseinstance) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElementsInstancedBaseInstance(@mode, @count, @type, @ptr_indices, @instancecount, @baseinstance);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsInstancedBaseInstanceEXT")]
        static extern void Native_DrawElementsInstancedBaseInstanceEXT(GlPrimitiveType @mode, int @count, GlPrimitiveType @type, byte* @indices, int @instancecount, uint @baseinstance);

        public void DrawElementsInstancedBaseInstanceEXT(GlPrimitiveType @mode, int @count, GlPrimitiveType @type, byte[] @indices, int @instancecount, uint @baseinstance) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElementsInstancedBaseInstanceEXT(@mode, @count, @type, @ptr_indices, @instancecount, @baseinstance);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsInstancedBaseVertex")]
        static extern void Native_DrawElementsInstancedBaseVertex(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte* @indices, int @instancecount, int @basevertex);

        public void DrawElementsInstancedBaseVertex(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte[] @indices, int @instancecount, int @basevertex) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElementsInstancedBaseVertex(@mode, @count, @type, @ptr_indices, @instancecount, @basevertex);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        static extern void Native_DrawElementsInstancedBaseVertexBaseInstance(GlPrimitiveType @mode, int @count, GlPrimitiveType @type, byte* @indices, int @instancecount, int @basevertex, uint @baseinstance);

        public void DrawElementsInstancedBaseVertexBaseInstance(GlPrimitiveType @mode, int @count, GlPrimitiveType @type, byte[] @indices, int @instancecount, int @basevertex, uint @baseinstance) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElementsInstancedBaseVertexBaseInstance(@mode, @count, @type, @ptr_indices, @instancecount, @basevertex, @baseinstance);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstanceEXT")]
        static extern void Native_DrawElementsInstancedBaseVertexBaseInstanceEXT(GlPrimitiveType @mode, int @count, GlPrimitiveType @type, byte* @indices, int @instancecount, int @basevertex, uint @baseinstance);

        public void DrawElementsInstancedBaseVertexBaseInstanceEXT(GlPrimitiveType @mode, int @count, GlPrimitiveType @type, byte[] @indices, int @instancecount, int @basevertex, uint @baseinstance) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElementsInstancedBaseVertexBaseInstanceEXT(@mode, @count, @type, @ptr_indices, @instancecount, @basevertex, @baseinstance);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsInstancedBaseVertexEXT")]
        static extern void Native_DrawElementsInstancedBaseVertexEXT(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte* @indices, int @instancecount, int @basevertex);

        public void DrawElementsInstancedBaseVertexEXT(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte[] @indices, int @instancecount, int @basevertex) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElementsInstancedBaseVertexEXT(@mode, @count, @type, @ptr_indices, @instancecount, @basevertex);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsInstancedBaseVertexOES")]
        static extern void Native_DrawElementsInstancedBaseVertexOES(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte* @indices, int @instancecount, int @basevertex);

        public void DrawElementsInstancedBaseVertexOES(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte[] @indices, int @instancecount, int @basevertex) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElementsInstancedBaseVertexOES(@mode, @count, @type, @ptr_indices, @instancecount, @basevertex);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsInstancedEXT")]
        static extern void Native_DrawElementsInstancedEXT(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte* @indices, int @primcount);

        public void DrawElementsInstancedEXT(GlPrimitiveType @mode, int @count, GlDrawElementsType @type, byte[] @indices, int @primcount) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElementsInstancedEXT(@mode, @count, @type, @ptr_indices, @primcount);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawElementsInstancedNV")]
        static extern void Native_DrawElementsInstancedNV(GlPrimitiveType @mode, int @count, GlPrimitiveType @type, byte* @indices, int @primcount);

        public void DrawElementsInstancedNV(GlPrimitiveType @mode, int @count, GlPrimitiveType @type, byte[] @indices, int @primcount) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawElementsInstancedNV(@mode, @count, @type, @ptr_indices, @primcount);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawMeshArraysSUN")]
        static extern void Native_DrawMeshArraysSUN(GlPrimitiveType @mode, int @first, int @count, int @width);

        public void DrawMeshArraysSUN(GlPrimitiveType @mode, int @first, int @count, int @width) {
            Native_DrawMeshArraysSUN(@mode, @first, @count, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawPixels")]
        static extern void Native_DrawPixels(int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void DrawPixels(int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_DrawPixels(@width, @height, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawRangeElementArrayAPPLE")]
        static extern void Native_DrawRangeElementArrayAPPLE(GlPrimitiveType @mode, uint @start, uint @end, int @first, int @count);

        public void DrawRangeElementArrayAPPLE(GlPrimitiveType @mode, uint @start, uint @end, int @first, int @count) {
            Native_DrawRangeElementArrayAPPLE(@mode, @start, @end, @first, @count);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawRangeElementArrayATI")]
        static extern void Native_DrawRangeElementArrayATI(GlPrimitiveType @mode, uint @start, uint @end, int @count);

        public void DrawRangeElementArrayATI(GlPrimitiveType @mode, uint @start, uint @end, int @count) {
            Native_DrawRangeElementArrayATI(@mode, @start, @end, @count);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawRangeElements")]
        static extern void Native_DrawRangeElements(GlPrimitiveType @mode, uint @start, uint @end, int @count, GlDrawElementsType @type, byte* @indices);

        public void DrawRangeElements(GlPrimitiveType @mode, uint @start, uint @end, int @count, GlDrawElementsType @type, byte[] @indices) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawRangeElements(@mode, @start, @end, @count, @type, @ptr_indices);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawRangeElementsBaseVertex")]
        static extern void Native_DrawRangeElementsBaseVertex(GlPrimitiveType @mode, uint @start, uint @end, int @count, GlDrawElementsType @type, byte* @indices, int @basevertex);

        public void DrawRangeElementsBaseVertex(GlPrimitiveType @mode, uint @start, uint @end, int @count, GlDrawElementsType @type, byte[] @indices, int @basevertex) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawRangeElementsBaseVertex(@mode, @start, @end, @count, @type, @ptr_indices, @basevertex);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawRangeElementsBaseVertexEXT")]
        static extern void Native_DrawRangeElementsBaseVertexEXT(GlPrimitiveType @mode, uint @start, uint @end, int @count, GlDrawElementsType @type, byte* @indices, int @basevertex);

        public void DrawRangeElementsBaseVertexEXT(GlPrimitiveType @mode, uint @start, uint @end, int @count, GlDrawElementsType @type, byte[] @indices, int @basevertex) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawRangeElementsBaseVertexEXT(@mode, @start, @end, @count, @type, @ptr_indices, @basevertex);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawRangeElementsBaseVertexOES")]
        static extern void Native_DrawRangeElementsBaseVertexOES(GlPrimitiveType @mode, uint @start, uint @end, int @count, GlDrawElementsType @type, byte* @indices, int @basevertex);

        public void DrawRangeElementsBaseVertexOES(GlPrimitiveType @mode, uint @start, uint @end, int @count, GlDrawElementsType @type, byte[] @indices, int @basevertex) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawRangeElementsBaseVertexOES(@mode, @start, @end, @count, @type, @ptr_indices, @basevertex);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawRangeElementsEXT")]
        static extern void Native_DrawRangeElementsEXT(GlPrimitiveType @mode, uint @start, uint @end, int @count, GlDrawElementsType @type, byte* @indices);

        public void DrawRangeElementsEXT(GlPrimitiveType @mode, uint @start, uint @end, int @count, GlDrawElementsType @type, byte[] @indices) {
            fixed (byte *ptr_indices = @indices) {
                Native_DrawRangeElementsEXT(@mode, @start, @end, @count, @type, @ptr_indices);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTexfOES")]
        static extern void Native_DrawTexfOES(float @x, float @y, float @z, float @width, float @height);

        public void DrawTexfOES(float @x, float @y, float @z, float @width, float @height) {
            Native_DrawTexfOES(@x, @y, @z, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTexfvOES")]
        static extern void Native_DrawTexfvOES(float* @coords);

        public void DrawTexfvOES(float[] @coords) {
            fixed (float *ptr_coords = @coords) {
                Native_DrawTexfvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTexiOES")]
        static extern void Native_DrawTexiOES(int @x, int @y, int @z, int @width, int @height);

        public void DrawTexiOES(int @x, int @y, int @z, int @width, int @height) {
            Native_DrawTexiOES(@x, @y, @z, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTexivOES")]
        static extern void Native_DrawTexivOES(int* @coords);

        public void DrawTexivOES(int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_DrawTexivOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTexsOES")]
        static extern void Native_DrawTexsOES(short @x, short @y, short @z, short @width, short @height);

        public void DrawTexsOES(short @x, short @y, short @z, short @width, short @height) {
            Native_DrawTexsOES(@x, @y, @z, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTexsvOES")]
        static extern void Native_DrawTexsvOES(short* @coords);

        public void DrawTexsvOES(short[] @coords) {
            fixed (short *ptr_coords = @coords) {
                Native_DrawTexsvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTextureNV")]
        static extern void Native_DrawTextureNV(uint @texture, uint @sampler, float @x0, float @y0, float @x1, float @y1, float @z, float @s0, float @t0, float @s1, float @t1);

        public void DrawTextureNV(uint @texture, uint @sampler, float @x0, float @y0, float @x1, float @y1, float @z, float @s0, float @t0, float @s1, float @t1) {
            Native_DrawTextureNV(@texture, @sampler, @x0, @y0, @x1, @y1, @z, @s0, @t0, @s1, @t1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTexxOES")]
        static extern void Native_DrawTexxOES(int @x, int @y, int @z, int @width, int @height);

        public void DrawTexxOES(int @x, int @y, int @z, int @width, int @height) {
            Native_DrawTexxOES(@x, @y, @z, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTexxvOES")]
        static extern void Native_DrawTexxvOES(int* @coords);

        public void DrawTexxvOES(int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_DrawTexxvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTransformFeedback")]
        static extern void Native_DrawTransformFeedback(GlPrimitiveType @mode, uint @id);

        public void DrawTransformFeedback(GlPrimitiveType @mode, uint @id) {
            Native_DrawTransformFeedback(@mode, @id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTransformFeedbackEXT")]
        static extern void Native_DrawTransformFeedbackEXT(GlPrimitiveType @mode, uint @id);

        public void DrawTransformFeedbackEXT(GlPrimitiveType @mode, uint @id) {
            Native_DrawTransformFeedbackEXT(@mode, @id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTransformFeedbackInstanced")]
        static extern void Native_DrawTransformFeedbackInstanced(GlPrimitiveType @mode, uint @id, int @instancecount);

        public void DrawTransformFeedbackInstanced(GlPrimitiveType @mode, uint @id, int @instancecount) {
            Native_DrawTransformFeedbackInstanced(@mode, @id, @instancecount);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTransformFeedbackInstancedEXT")]
        static extern void Native_DrawTransformFeedbackInstancedEXT(GlPrimitiveType @mode, uint @id, int @instancecount);

        public void DrawTransformFeedbackInstancedEXT(GlPrimitiveType @mode, uint @id, int @instancecount) {
            Native_DrawTransformFeedbackInstancedEXT(@mode, @id, @instancecount);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTransformFeedbackNV")]
        static extern void Native_DrawTransformFeedbackNV(GlPrimitiveType @mode, uint @id);

        public void DrawTransformFeedbackNV(GlPrimitiveType @mode, uint @id) {
            Native_DrawTransformFeedbackNV(@mode, @id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTransformFeedbackStream")]
        static extern void Native_DrawTransformFeedbackStream(GlPrimitiveType @mode, uint @id, uint @stream);

        public void DrawTransformFeedbackStream(GlPrimitiveType @mode, uint @id, uint @stream) {
            Native_DrawTransformFeedbackStream(@mode, @id, @stream);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawTransformFeedbackStreamInstanced")]
        static extern void Native_DrawTransformFeedbackStreamInstanced(GlPrimitiveType @mode, uint @id, uint @stream, int @instancecount);

        public void DrawTransformFeedbackStreamInstanced(GlPrimitiveType @mode, uint @id, uint @stream, int @instancecount) {
            Native_DrawTransformFeedbackStreamInstanced(@mode, @id, @stream, @instancecount);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEGLImageTargetRenderbufferStorageOES")]
        static extern void Native_EGLImageTargetRenderbufferStorageOES(uint @target, byte* @image);

        public void EGLImageTargetRenderbufferStorageOES(uint @target, byte[] @image) {
            fixed (byte *ptr_image = @image) {
                Native_EGLImageTargetRenderbufferStorageOES(@target, @ptr_image);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEGLImageTargetTexture2DOES")]
        static extern void Native_EGLImageTargetTexture2DOES(uint @target, byte* @image);

        public void EGLImageTargetTexture2DOES(uint @target, byte[] @image) {
            fixed (byte *ptr_image = @image) {
                Native_EGLImageTargetTexture2DOES(@target, @ptr_image);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEdgeFlag")]
        static extern void Native_EdgeFlag(GlBoolean @flag);

        public void EdgeFlag(GlBoolean @flag) {
            Native_EdgeFlag(@flag);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEdgeFlagFormatNV")]
        static extern void Native_EdgeFlagFormatNV(int @stride);

        public void EdgeFlagFormatNV(int @stride) {
            Native_EdgeFlagFormatNV(@stride);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEdgeFlagPointer")]
        static extern void Native_EdgeFlagPointer(int @stride, byte* @pointer);

        public void EdgeFlagPointer(int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_EdgeFlagPointer(@stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEdgeFlagPointerEXT")]
        static extern void Native_EdgeFlagPointerEXT(int @stride, int @count, GlBoolean* @pointer);

        public void EdgeFlagPointerEXT(int @stride, int @count, GlBoolean[] @pointer) {
            fixed (GlBoolean *ptr_pointer = @pointer) {
                Native_EdgeFlagPointerEXT(@stride, @count, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEdgeFlagPointerListIBM")]
        static extern void Native_EdgeFlagPointerListIBM(int @stride, bool** @pointer, int @ptrstride);

        public void EdgeFlagPointerListIBM(int @stride, bool[][] @pointer, int @ptrstride) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_bool(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_EdgeFlagPointerListIBM(@stride, (bool **) ptr_pointer.ToPointer(), @ptrstride);
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEdgeFlagv")]
        static extern void Native_EdgeFlagv(GlBoolean* @flag);

        public void EdgeFlagv(GlBoolean[] @flag) {
            fixed (GlBoolean *ptr_flag = @flag) {
                Native_EdgeFlagv(@ptr_flag);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glElementPointerAPPLE")]
        static extern void Native_ElementPointerAPPLE(uint @type, byte* @pointer);

        public void ElementPointerAPPLE(uint @type, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_ElementPointerAPPLE(@type, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glElementPointerATI")]
        static extern void Native_ElementPointerATI(uint @type, byte* @pointer);

        public void ElementPointerATI(uint @type, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_ElementPointerATI(@type, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnable")]
        static extern void Native_Enable(GlEnableCap @cap);

        public void Enable(GlEnableCap @cap) {
            Native_Enable(@cap);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnableClientState")]
        static extern void Native_EnableClientState(GlEnableCap @array);

        public void EnableClientState(GlEnableCap @array) {
            Native_EnableClientState(@array);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnableClientStateIndexedEXT")]
        static extern void Native_EnableClientStateIndexedEXT(GlEnableCap @array, uint @index);

        public void EnableClientStateIndexedEXT(GlEnableCap @array, uint @index) {
            Native_EnableClientStateIndexedEXT(@array, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnableClientStateiEXT")]
        static extern void Native_EnableClientStateiEXT(GlEnableCap @array, uint @index);

        public void EnableClientStateiEXT(GlEnableCap @array, uint @index) {
            Native_EnableClientStateiEXT(@array, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnableDriverControlQCOM")]
        static extern void Native_EnableDriverControlQCOM(uint @driverControl);

        public void EnableDriverControlQCOM(uint @driverControl) {
            Native_EnableDriverControlQCOM(@driverControl);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnableIndexedEXT")]
        static extern void Native_EnableIndexedEXT(GlEnableCap @target, uint @index);

        public void EnableIndexedEXT(GlEnableCap @target, uint @index) {
            Native_EnableIndexedEXT(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnableVariantClientStateEXT")]
        static extern void Native_EnableVariantClientStateEXT(uint @id);

        public void EnableVariantClientStateEXT(uint @id) {
            Native_EnableVariantClientStateEXT(@id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnableVertexArrayAttrib")]
        static extern void Native_EnableVertexArrayAttrib(uint @vaobj, uint @index);

        public void EnableVertexArrayAttrib(uint @vaobj, uint @index) {
            Native_EnableVertexArrayAttrib(@vaobj, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnableVertexArrayAttribEXT")]
        static extern void Native_EnableVertexArrayAttribEXT(uint @vaobj, uint @index);

        public void EnableVertexArrayAttribEXT(uint @vaobj, uint @index) {
            Native_EnableVertexArrayAttribEXT(@vaobj, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnableVertexArrayEXT")]
        static extern void Native_EnableVertexArrayEXT(uint @vaobj, GlEnableCap @array);

        public void EnableVertexArrayEXT(uint @vaobj, GlEnableCap @array) {
            Native_EnableVertexArrayEXT(@vaobj, @array);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnableVertexAttribAPPLE")]
        static extern void Native_EnableVertexAttribAPPLE(uint @index, uint @pname);

        public void EnableVertexAttribAPPLE(uint @index, uint @pname) {
            Native_EnableVertexAttribAPPLE(@index, @pname);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnableVertexAttribArray")]
        static extern void Native_EnableVertexAttribArray(uint @index);

        public void EnableVertexAttribArray(uint @index) {
            Native_EnableVertexAttribArray(@index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnableVertexAttribArrayARB")]
        static extern void Native_EnableVertexAttribArrayARB(uint @index);

        public void EnableVertexAttribArrayARB(uint @index) {
            Native_EnableVertexAttribArrayARB(@index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnablei")]
        static extern void Native_Enablei(GlEnableCap @target, uint @index);

        public void Enablei(GlEnableCap @target, uint @index) {
            Native_Enablei(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnableiEXT")]
        static extern void Native_EnableiEXT(GlEnableCap @target, uint @index);

        public void EnableiEXT(GlEnableCap @target, uint @index) {
            Native_EnableiEXT(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnableiNV")]
        static extern void Native_EnableiNV(GlEnableCap @target, uint @index);

        public void EnableiNV(GlEnableCap @target, uint @index) {
            Native_EnableiNV(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnableiOES")]
        static extern void Native_EnableiOES(GlEnableCap @target, uint @index);

        public void EnableiOES(GlEnableCap @target, uint @index) {
            Native_EnableiOES(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEnd")]
        static extern void Native_End();

        public void End() {
            Native_End();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndConditionalRender")]
        static extern void Native_EndConditionalRender();

        public void EndConditionalRender() {
            Native_EndConditionalRender();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndConditionalRenderNV")]
        static extern void Native_EndConditionalRenderNV();

        public void EndConditionalRenderNV() {
            Native_EndConditionalRenderNV();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndConditionalRenderNVX")]
        static extern void Native_EndConditionalRenderNVX();

        public void EndConditionalRenderNVX() {
            Native_EndConditionalRenderNVX();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndFragmentShaderATI")]
        static extern void Native_EndFragmentShaderATI();

        public void EndFragmentShaderATI() {
            Native_EndFragmentShaderATI();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndList")]
        static extern void Native_EndList();

        public void EndList() {
            Native_EndList();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndOcclusionQueryNV")]
        static extern void Native_EndOcclusionQueryNV();

        public void EndOcclusionQueryNV() {
            Native_EndOcclusionQueryNV();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndPerfMonitorAMD")]
        static extern void Native_EndPerfMonitorAMD(uint @monitor);

        public void EndPerfMonitorAMD(uint @monitor) {
            Native_EndPerfMonitorAMD(@monitor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndPerfQueryINTEL")]
        static extern void Native_EndPerfQueryINTEL(uint @queryHandle);

        public void EndPerfQueryINTEL(uint @queryHandle) {
            Native_EndPerfQueryINTEL(@queryHandle);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndQuery")]
        static extern void Native_EndQuery(GlQueryTarget @target);

        public void EndQuery(GlQueryTarget @target) {
            Native_EndQuery(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndQueryARB")]
        static extern void Native_EndQueryARB(GlQueryTarget @target);

        public void EndQueryARB(GlQueryTarget @target) {
            Native_EndQueryARB(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndQueryEXT")]
        static extern void Native_EndQueryEXT(GlQueryTarget @target);

        public void EndQueryEXT(GlQueryTarget @target) {
            Native_EndQueryEXT(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndQueryIndexed")]
        static extern void Native_EndQueryIndexed(GlQueryTarget @target, uint @index);

        public void EndQueryIndexed(GlQueryTarget @target, uint @index) {
            Native_EndQueryIndexed(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndTilingQCOM")]
        static extern void Native_EndTilingQCOM(GlBufferBitQCOM @preserveMask);

        public void EndTilingQCOM(GlBufferBitQCOM @preserveMask) {
            Native_EndTilingQCOM(@preserveMask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndTransformFeedback")]
        static extern void Native_EndTransformFeedback();

        public void EndTransformFeedback() {
            Native_EndTransformFeedback();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndTransformFeedbackEXT")]
        static extern void Native_EndTransformFeedbackEXT();

        public void EndTransformFeedbackEXT() {
            Native_EndTransformFeedbackEXT();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndTransformFeedbackNV")]
        static extern void Native_EndTransformFeedbackNV();

        public void EndTransformFeedbackNV() {
            Native_EndTransformFeedbackNV();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndVertexShaderEXT")]
        static extern void Native_EndVertexShaderEXT();

        public void EndVertexShaderEXT() {
            Native_EndVertexShaderEXT();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEndVideoCaptureNV")]
        static extern void Native_EndVideoCaptureNV(uint @video_capture_slot);

        public void EndVideoCaptureNV(uint @video_capture_slot) {
            Native_EndVideoCaptureNV(@video_capture_slot);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalCoord1d")]
        static extern void Native_EvalCoord1d(double @u);

        public void EvalCoord1d(double @u) {
            Native_EvalCoord1d(@u);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalCoord1dv")]
        static extern void Native_EvalCoord1dv(double* @u);

        public void EvalCoord1dv(double[] @u) {
            fixed (double *ptr_u = @u) {
                Native_EvalCoord1dv(@ptr_u);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalCoord1f")]
        static extern void Native_EvalCoord1f(float @u);

        public void EvalCoord1f(float @u) {
            Native_EvalCoord1f(@u);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalCoord1fv")]
        static extern void Native_EvalCoord1fv(float* @u);

        public void EvalCoord1fv(float[] @u) {
            fixed (float *ptr_u = @u) {
                Native_EvalCoord1fv(@ptr_u);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalCoord1xOES")]
        static extern void Native_EvalCoord1xOES(int @u);

        public void EvalCoord1xOES(int @u) {
            Native_EvalCoord1xOES(@u);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalCoord1xvOES")]
        static extern void Native_EvalCoord1xvOES(int* @coords);

        public void EvalCoord1xvOES(int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_EvalCoord1xvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalCoord2d")]
        static extern void Native_EvalCoord2d(double @u, double @v);

        public void EvalCoord2d(double @u, double @v) {
            Native_EvalCoord2d(@u, @v);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalCoord2dv")]
        static extern void Native_EvalCoord2dv(double* @u);

        public void EvalCoord2dv(double[] @u) {
            fixed (double *ptr_u = @u) {
                Native_EvalCoord2dv(@ptr_u);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalCoord2f")]
        static extern void Native_EvalCoord2f(float @u, float @v);

        public void EvalCoord2f(float @u, float @v) {
            Native_EvalCoord2f(@u, @v);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalCoord2fv")]
        static extern void Native_EvalCoord2fv(float* @u);

        public void EvalCoord2fv(float[] @u) {
            fixed (float *ptr_u = @u) {
                Native_EvalCoord2fv(@ptr_u);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalCoord2xOES")]
        static extern void Native_EvalCoord2xOES(int @u, int @v);

        public void EvalCoord2xOES(int @u, int @v) {
            Native_EvalCoord2xOES(@u, @v);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalCoord2xvOES")]
        static extern void Native_EvalCoord2xvOES(int* @coords);

        public void EvalCoord2xvOES(int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_EvalCoord2xvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalMapsNV")]
        static extern void Native_EvalMapsNV(uint @target, uint @mode);

        public void EvalMapsNV(uint @target, uint @mode) {
            Native_EvalMapsNV(@target, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalMesh1")]
        static extern void Native_EvalMesh1(GlMeshMode1 @mode, int @i1, int @i2);

        public void EvalMesh1(GlMeshMode1 @mode, int @i1, int @i2) {
            Native_EvalMesh1(@mode, @i1, @i2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalMesh2")]
        static extern void Native_EvalMesh2(GlMeshMode2 @mode, int @i1, int @i2, int @j1, int @j2);

        public void EvalMesh2(GlMeshMode2 @mode, int @i1, int @i2, int @j1, int @j2) {
            Native_EvalMesh2(@mode, @i1, @i2, @j1, @j2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalPoint1")]
        static extern void Native_EvalPoint1(int @i);

        public void EvalPoint1(int @i) {
            Native_EvalPoint1(@i);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvalPoint2")]
        static extern void Native_EvalPoint2(int @i, int @j);

        public void EvalPoint2(int @i, int @j) {
            Native_EvalPoint2(@i, @j);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glEvaluateDepthValuesARB")]
        static extern void Native_EvaluateDepthValuesARB();

        public void EvaluateDepthValuesARB() {
            Native_EvaluateDepthValuesARB();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glExecuteProgramNV")]
        static extern void Native_ExecuteProgramNV(uint @target, uint @id, float* @params);

        public void ExecuteProgramNV(uint @target, uint @id, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_ExecuteProgramNV(@target, @id, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glExtGetBufferPointervQCOM")]
        static extern void Native_ExtGetBufferPointervQCOM(uint @target, byte** @params);

        public void ExtGetBufferPointervQCOM(uint @target, byte[][] @params) {
            IntPtr ptr_params = Marshal.AllocHGlobal(@params.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_params, @params, (void **) ptr_params.ToPointer(), 0, __fixedLocals => {
                    Native_ExtGetBufferPointervQCOM(@target, (byte **) ptr_params.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glExtGetBuffersQCOM")]
        static extern void Native_ExtGetBuffersQCOM(uint* @buffers, int @maxBuffers, int* @numBuffers);

        public void ExtGetBuffersQCOM(uint[] @buffers, int @maxBuffers, int[] @numBuffers) {
            fixed (uint *ptr_buffers = @buffers) {
                fixed (int *ptr_numBuffers = @numBuffers) {
                    Native_ExtGetBuffersQCOM(@ptr_buffers, @maxBuffers, @ptr_numBuffers);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glExtGetFramebuffersQCOM")]
        static extern void Native_ExtGetFramebuffersQCOM(uint* @framebuffers, int @maxFramebuffers, int* @numFramebuffers);

        public void ExtGetFramebuffersQCOM(uint[] @framebuffers, int @maxFramebuffers, int[] @numFramebuffers) {
            fixed (uint *ptr_framebuffers = @framebuffers) {
                fixed (int *ptr_numFramebuffers = @numFramebuffers) {
                    Native_ExtGetFramebuffersQCOM(@ptr_framebuffers, @maxFramebuffers, @ptr_numFramebuffers);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glExtGetProgramBinarySourceQCOM")]
        static extern void Native_ExtGetProgramBinarySourceQCOM(uint @program, GlShaderType @shadertype, byte* @source, int* @length);

        public void ExtGetProgramBinarySourceQCOM(uint @program, GlShaderType @shadertype, byte[] @source, int[] @length) {
            fixed (byte *ptr_source = @source) {
                fixed (int *ptr_length = @length) {
                    Native_ExtGetProgramBinarySourceQCOM(@program, @shadertype, @ptr_source, @ptr_length);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glExtGetProgramsQCOM")]
        static extern void Native_ExtGetProgramsQCOM(uint* @programs, int @maxPrograms, int* @numPrograms);

        public void ExtGetProgramsQCOM(uint[] @programs, int @maxPrograms, int[] @numPrograms) {
            fixed (uint *ptr_programs = @programs) {
                fixed (int *ptr_numPrograms = @numPrograms) {
                    Native_ExtGetProgramsQCOM(@ptr_programs, @maxPrograms, @ptr_numPrograms);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glExtGetRenderbuffersQCOM")]
        static extern void Native_ExtGetRenderbuffersQCOM(uint* @renderbuffers, int @maxRenderbuffers, int* @numRenderbuffers);

        public void ExtGetRenderbuffersQCOM(uint[] @renderbuffers, int @maxRenderbuffers, int[] @numRenderbuffers) {
            fixed (uint *ptr_renderbuffers = @renderbuffers) {
                fixed (int *ptr_numRenderbuffers = @numRenderbuffers) {
                    Native_ExtGetRenderbuffersQCOM(@ptr_renderbuffers, @maxRenderbuffers, @ptr_numRenderbuffers);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glExtGetShadersQCOM")]
        static extern void Native_ExtGetShadersQCOM(uint* @shaders, int @maxShaders, int* @numShaders);

        public void ExtGetShadersQCOM(uint[] @shaders, int @maxShaders, int[] @numShaders) {
            fixed (uint *ptr_shaders = @shaders) {
                fixed (int *ptr_numShaders = @numShaders) {
                    Native_ExtGetShadersQCOM(@ptr_shaders, @maxShaders, @ptr_numShaders);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glExtGetTexLevelParameterivQCOM")]
        static extern void Native_ExtGetTexLevelParameterivQCOM(uint @texture, uint @face, int @level, uint @pname, int* @params);

        public void ExtGetTexLevelParameterivQCOM(uint @texture, uint @face, int @level, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_ExtGetTexLevelParameterivQCOM(@texture, @face, @level, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glExtGetTexSubImageQCOM")]
        static extern void Native_ExtGetTexSubImageQCOM(uint @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte* @texels);

        public void ExtGetTexSubImageQCOM(uint @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte[] @texels) {
            fixed (byte *ptr_texels = @texels) {
                Native_ExtGetTexSubImageQCOM(@target, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @type, @ptr_texels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glExtGetTexturesQCOM")]
        static extern void Native_ExtGetTexturesQCOM(uint* @textures, int @maxTextures, int* @numTextures);

        public void ExtGetTexturesQCOM(uint[] @textures, int @maxTextures, int[] @numTextures) {
            fixed (uint *ptr_textures = @textures) {
                fixed (int *ptr_numTextures = @numTextures) {
                    Native_ExtGetTexturesQCOM(@ptr_textures, @maxTextures, @ptr_numTextures);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glExtIsProgramBinaryQCOM")]
        static extern bool Native_ExtIsProgramBinaryQCOM(uint @program);

        public bool ExtIsProgramBinaryQCOM(uint @program) {
            return Native_ExtIsProgramBinaryQCOM(@program);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glExtTexObjectStateOverrideiQCOM")]
        static extern void Native_ExtTexObjectStateOverrideiQCOM(uint @target, uint @pname, int @param);

        public void ExtTexObjectStateOverrideiQCOM(uint @target, uint @pname, int @param) {
            Native_ExtTexObjectStateOverrideiQCOM(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glExtractComponentEXT")]
        static extern void Native_ExtractComponentEXT(uint @res, uint @src, uint @num);

        public void ExtractComponentEXT(uint @res, uint @src, uint @num) {
            Native_ExtractComponentEXT(@res, @src, @num);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFeedbackBuffer")]
        static extern void Native_FeedbackBuffer(int @size, GlFeedbackType @type, float* @buffer);

        public void FeedbackBuffer(int @size, GlFeedbackType @type, float[] @buffer) {
            fixed (float *ptr_buffer = @buffer) {
                Native_FeedbackBuffer(@size, @type, @ptr_buffer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFeedbackBufferxOES")]
        static extern void Native_FeedbackBufferxOES(int @n, uint @type, int* @buffer);

        public void FeedbackBufferxOES(int @n, uint @type, int[] @buffer) {
            fixed (int *ptr_buffer = @buffer) {
                Native_FeedbackBufferxOES(@n, @type, @ptr_buffer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFenceSync")]
        static extern IntPtr Native_FenceSync(GlSyncCondition @condition, uint @flags);

        public IntPtr FenceSync(GlSyncCondition @condition, uint @flags) {
            return Native_FenceSync(@condition, @flags);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFenceSyncAPPLE")]
        static extern IntPtr Native_FenceSyncAPPLE(GlSyncCondition @condition, uint @flags);

        public IntPtr FenceSyncAPPLE(GlSyncCondition @condition, uint @flags) {
            return Native_FenceSyncAPPLE(@condition, @flags);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFinalCombinerInputNV")]
        static extern void Native_FinalCombinerInputNV(uint @variable, uint @input, uint @mapping, uint @componentUsage);

        public void FinalCombinerInputNV(uint @variable, uint @input, uint @mapping, uint @componentUsage) {
            Native_FinalCombinerInputNV(@variable, @input, @mapping, @componentUsage);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFinish")]
        static extern void Native_Finish();

        public void Finish() {
            Native_Finish();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFinishAsyncSGIX")]
        static extern int Native_FinishAsyncSGIX(uint* @markerp);

        public int FinishAsyncSGIX(uint[] @markerp) {
            fixed (uint *ptr_markerp = @markerp) {
                return Native_FinishAsyncSGIX(@ptr_markerp);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFinishFenceAPPLE")]
        static extern void Native_FinishFenceAPPLE(uint @fence);

        public void FinishFenceAPPLE(uint @fence) {
            Native_FinishFenceAPPLE(@fence);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFinishFenceNV")]
        static extern void Native_FinishFenceNV(uint @fence);

        public void FinishFenceNV(uint @fence) {
            Native_FinishFenceNV(@fence);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFinishObjectAPPLE")]
        static extern void Native_FinishObjectAPPLE(uint @object, int @name);

        public void FinishObjectAPPLE(uint @object, int @name) {
            Native_FinishObjectAPPLE(@object, @name);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFinishTextureSUNX")]
        static extern void Native_FinishTextureSUNX();

        public void FinishTextureSUNX() {
            Native_FinishTextureSUNX();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFlush")]
        static extern void Native_Flush();

        public void Flush() {
            Native_Flush();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFlushMappedBufferRange")]
        static extern void Native_FlushMappedBufferRange(GlBufferTargetARB @target, long @offset, long @length);

        public void FlushMappedBufferRange(GlBufferTargetARB @target, long @offset, long @length) {
            Native_FlushMappedBufferRange(@target, @offset, @length);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFlushMappedBufferRangeAPPLE")]
        static extern void Native_FlushMappedBufferRangeAPPLE(GlBufferTargetARB @target, long @offset, long @size);

        public void FlushMappedBufferRangeAPPLE(GlBufferTargetARB @target, long @offset, long @size) {
            Native_FlushMappedBufferRangeAPPLE(@target, @offset, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFlushMappedBufferRangeEXT")]
        static extern void Native_FlushMappedBufferRangeEXT(GlBufferTargetARB @target, long @offset, long @length);

        public void FlushMappedBufferRangeEXT(GlBufferTargetARB @target, long @offset, long @length) {
            Native_FlushMappedBufferRangeEXT(@target, @offset, @length);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFlushMappedNamedBufferRange")]
        static extern void Native_FlushMappedNamedBufferRange(uint @buffer, long @offset, long @length);

        public void FlushMappedNamedBufferRange(uint @buffer, long @offset, long @length) {
            Native_FlushMappedNamedBufferRange(@buffer, @offset, @length);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFlushMappedNamedBufferRangeEXT")]
        static extern void Native_FlushMappedNamedBufferRangeEXT(uint @buffer, long @offset, long @length);

        public void FlushMappedNamedBufferRangeEXT(uint @buffer, long @offset, long @length) {
            Native_FlushMappedNamedBufferRangeEXT(@buffer, @offset, @length);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFlushPixelDataRangeNV")]
        static extern void Native_FlushPixelDataRangeNV(uint @target);

        public void FlushPixelDataRangeNV(uint @target) {
            Native_FlushPixelDataRangeNV(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFlushRasterSGIX")]
        static extern void Native_FlushRasterSGIX();

        public void FlushRasterSGIX() {
            Native_FlushRasterSGIX();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFlushStaticDataIBM")]
        static extern void Native_FlushStaticDataIBM(uint @target);

        public void FlushStaticDataIBM(uint @target) {
            Native_FlushStaticDataIBM(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFlushVertexArrayRangeAPPLE")]
        static extern void Native_FlushVertexArrayRangeAPPLE(int @length, byte* @pointer);

        public void FlushVertexArrayRangeAPPLE(int @length, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_FlushVertexArrayRangeAPPLE(@length, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFlushVertexArrayRangeNV")]
        static extern void Native_FlushVertexArrayRangeNV();

        public void FlushVertexArrayRangeNV() {
            Native_FlushVertexArrayRangeNV();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogCoordFormatNV")]
        static extern void Native_FogCoordFormatNV(uint @type, int @stride);

        public void FogCoordFormatNV(uint @type, int @stride) {
            Native_FogCoordFormatNV(@type, @stride);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogCoordPointer")]
        static extern void Native_FogCoordPointer(GlFogPointerTypeEXT @type, int @stride, byte* @pointer);

        public void FogCoordPointer(GlFogPointerTypeEXT @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_FogCoordPointer(@type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogCoordPointerEXT")]
        static extern void Native_FogCoordPointerEXT(GlFogPointerTypeEXT @type, int @stride, byte* @pointer);

        public void FogCoordPointerEXT(GlFogPointerTypeEXT @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_FogCoordPointerEXT(@type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogCoordPointerListIBM")]
        static extern void Native_FogCoordPointerListIBM(GlFogPointerTypeIBM @type, int @stride, byte** @pointer, int @ptrstride);

        public void FogCoordPointerListIBM(GlFogPointerTypeIBM @type, int @stride, byte[][] @pointer, int @ptrstride) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_FogCoordPointerListIBM(@type, @stride, (byte **) ptr_pointer.ToPointer(), @ptrstride);
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogCoordd")]
        static extern void Native_FogCoordd(double @coord);

        public void FogCoordd(double @coord) {
            Native_FogCoordd(@coord);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogCoorddEXT")]
        static extern void Native_FogCoorddEXT(double @coord);

        public void FogCoorddEXT(double @coord) {
            Native_FogCoorddEXT(@coord);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogCoorddv")]
        static extern void Native_FogCoorddv(double* @coord);

        public void FogCoorddv(double[] @coord) {
            fixed (double *ptr_coord = @coord) {
                Native_FogCoorddv(@ptr_coord);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogCoorddvEXT")]
        static extern void Native_FogCoorddvEXT(double* @coord);

        public void FogCoorddvEXT(double[] @coord) {
            fixed (double *ptr_coord = @coord) {
                Native_FogCoorddvEXT(@ptr_coord);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogCoordf")]
        static extern void Native_FogCoordf(float @coord);

        public void FogCoordf(float @coord) {
            Native_FogCoordf(@coord);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogCoordfEXT")]
        static extern void Native_FogCoordfEXT(float @coord);

        public void FogCoordfEXT(float @coord) {
            Native_FogCoordfEXT(@coord);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogCoordfv")]
        static extern void Native_FogCoordfv(float* @coord);

        public void FogCoordfv(float[] @coord) {
            fixed (float *ptr_coord = @coord) {
                Native_FogCoordfv(@ptr_coord);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogCoordfvEXT")]
        static extern void Native_FogCoordfvEXT(float* @coord);

        public void FogCoordfvEXT(float[] @coord) {
            fixed (float *ptr_coord = @coord) {
                Native_FogCoordfvEXT(@ptr_coord);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogCoordhNV")]
        static extern void Native_FogCoordhNV(ushort @fog);

        public void FogCoordhNV(ushort @fog) {
            Native_FogCoordhNV(@fog);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogCoordhvNV")]
        static extern void Native_FogCoordhvNV(ushort* @fog);

        public void FogCoordhvNV(ushort[] @fog) {
            fixed (ushort *ptr_fog = @fog) {
                Native_FogCoordhvNV(@ptr_fog);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogFuncSGIS")]
        static extern void Native_FogFuncSGIS(int @n, float* @points);

        public void FogFuncSGIS(int @n, float[] @points) {
            fixed (float *ptr_points = @points) {
                Native_FogFuncSGIS(@n, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogf")]
        static extern void Native_Fogf(GlFogParameter @pname, float @param);

        public void Fogf(GlFogParameter @pname, float @param) {
            Native_Fogf(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogfv")]
        static extern void Native_Fogfv(GlFogParameter @pname, float* @params);

        public void Fogfv(GlFogParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_Fogfv(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogi")]
        static extern void Native_Fogi(GlFogParameter @pname, int @param);

        public void Fogi(GlFogParameter @pname, int @param) {
            Native_Fogi(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogiv")]
        static extern void Native_Fogiv(GlFogParameter @pname, int* @params);

        public void Fogiv(GlFogParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_Fogiv(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogx")]
        static extern void Native_Fogx(GlFogPName @pname, int @param);

        public void Fogx(GlFogPName @pname, int @param) {
            Native_Fogx(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogxOES")]
        static extern void Native_FogxOES(GlFogPName @pname, int @param);

        public void FogxOES(GlFogPName @pname, int @param) {
            Native_FogxOES(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogxv")]
        static extern void Native_Fogxv(GlFogPName @pname, int* @param);

        public void Fogxv(GlFogPName @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_Fogxv(@pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFogxvOES")]
        static extern void Native_FogxvOES(GlFogPName @pname, int* @param);

        public void FogxvOES(GlFogPName @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_FogxvOES(@pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFragmentColorMaterialSGIX")]
        static extern void Native_FragmentColorMaterialSGIX(GlMaterialFace @face, GlMaterialParameter @mode);

        public void FragmentColorMaterialSGIX(GlMaterialFace @face, GlMaterialParameter @mode) {
            Native_FragmentColorMaterialSGIX(@face, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFragmentCoverageColorNV")]
        static extern void Native_FragmentCoverageColorNV(uint @color);

        public void FragmentCoverageColorNV(uint @color) {
            Native_FragmentCoverageColorNV(@color);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFragmentLightModelfSGIX")]
        static extern void Native_FragmentLightModelfSGIX(GlFragmentLightModelParameterSGIX @pname, float @param);

        public void FragmentLightModelfSGIX(GlFragmentLightModelParameterSGIX @pname, float @param) {
            Native_FragmentLightModelfSGIX(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFragmentLightModelfvSGIX")]
        static extern void Native_FragmentLightModelfvSGIX(GlFragmentLightModelParameterSGIX @pname, float* @params);

        public void FragmentLightModelfvSGIX(GlFragmentLightModelParameterSGIX @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_FragmentLightModelfvSGIX(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFragmentLightModeliSGIX")]
        static extern void Native_FragmentLightModeliSGIX(GlFragmentLightModelParameterSGIX @pname, int @param);

        public void FragmentLightModeliSGIX(GlFragmentLightModelParameterSGIX @pname, int @param) {
            Native_FragmentLightModeliSGIX(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFragmentLightModelivSGIX")]
        static extern void Native_FragmentLightModelivSGIX(GlFragmentLightModelParameterSGIX @pname, int* @params);

        public void FragmentLightModelivSGIX(GlFragmentLightModelParameterSGIX @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_FragmentLightModelivSGIX(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFragmentLightfSGIX")]
        static extern void Native_FragmentLightfSGIX(uint @light, uint @pname, float @param);

        public void FragmentLightfSGIX(uint @light, uint @pname, float @param) {
            Native_FragmentLightfSGIX(@light, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFragmentLightfvSGIX")]
        static extern void Native_FragmentLightfvSGIX(uint @light, uint @pname, float* @params);

        public void FragmentLightfvSGIX(uint @light, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_FragmentLightfvSGIX(@light, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFragmentLightiSGIX")]
        static extern void Native_FragmentLightiSGIX(uint @light, uint @pname, int @param);

        public void FragmentLightiSGIX(uint @light, uint @pname, int @param) {
            Native_FragmentLightiSGIX(@light, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFragmentLightivSGIX")]
        static extern void Native_FragmentLightivSGIX(uint @light, uint @pname, int* @params);

        public void FragmentLightivSGIX(uint @light, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_FragmentLightivSGIX(@light, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFragmentMaterialfSGIX")]
        static extern void Native_FragmentMaterialfSGIX(GlMaterialFace @face, GlMaterialParameter @pname, float @param);

        public void FragmentMaterialfSGIX(GlMaterialFace @face, GlMaterialParameter @pname, float @param) {
            Native_FragmentMaterialfSGIX(@face, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFragmentMaterialfvSGIX")]
        static extern void Native_FragmentMaterialfvSGIX(GlMaterialFace @face, GlMaterialParameter @pname, float* @params);

        public void FragmentMaterialfvSGIX(GlMaterialFace @face, GlMaterialParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_FragmentMaterialfvSGIX(@face, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFragmentMaterialiSGIX")]
        static extern void Native_FragmentMaterialiSGIX(GlMaterialFace @face, GlMaterialParameter @pname, int @param);

        public void FragmentMaterialiSGIX(GlMaterialFace @face, GlMaterialParameter @pname, int @param) {
            Native_FragmentMaterialiSGIX(@face, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFragmentMaterialivSGIX")]
        static extern void Native_FragmentMaterialivSGIX(GlMaterialFace @face, GlMaterialParameter @pname, int* @params);

        public void FragmentMaterialivSGIX(GlMaterialFace @face, GlMaterialParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_FragmentMaterialivSGIX(@face, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFrameTerminatorGREMEDY")]
        static extern void Native_FrameTerminatorGREMEDY();

        public void FrameTerminatorGREMEDY() {
            Native_FrameTerminatorGREMEDY();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFrameZoomSGIX")]
        static extern void Native_FrameZoomSGIX(int @factor);

        public void FrameZoomSGIX(int @factor) {
            Native_FrameZoomSGIX(@factor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferDrawBufferEXT")]
        static extern void Native_FramebufferDrawBufferEXT(uint @framebuffer, GlDrawBufferMode @mode);

        public void FramebufferDrawBufferEXT(uint @framebuffer, GlDrawBufferMode @mode) {
            Native_FramebufferDrawBufferEXT(@framebuffer, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferDrawBuffersEXT")]
        static extern void Native_FramebufferDrawBuffersEXT(uint @framebuffer, int @n, GlDrawBufferMode* @bufs);

        public void FramebufferDrawBuffersEXT(uint @framebuffer, int @n, GlDrawBufferMode[] @bufs) {
            fixed (GlDrawBufferMode *ptr_bufs = @bufs) {
                Native_FramebufferDrawBuffersEXT(@framebuffer, @n, @ptr_bufs);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferFetchBarrierQCOM")]
        static extern void Native_FramebufferFetchBarrierQCOM();

        public void FramebufferFetchBarrierQCOM() {
            Native_FramebufferFetchBarrierQCOM();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferFoveationConfigQCOM")]
        static extern void Native_FramebufferFoveationConfigQCOM(uint @framebuffer, uint @numLayers, uint @focalPointsPerLayer, uint @requestedFeatures, uint* @providedFeatures);

        public void FramebufferFoveationConfigQCOM(uint @framebuffer, uint @numLayers, uint @focalPointsPerLayer, uint @requestedFeatures, uint[] @providedFeatures) {
            fixed (uint *ptr_providedFeatures = @providedFeatures) {
                Native_FramebufferFoveationConfigQCOM(@framebuffer, @numLayers, @focalPointsPerLayer, @requestedFeatures, @ptr_providedFeatures);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferFoveationParametersQCOM")]
        static extern void Native_FramebufferFoveationParametersQCOM(uint @framebuffer, uint @layer, uint @focalPoint, float @focalX, float @focalY, float @gainX, float @gainY, float @foveaArea);

        public void FramebufferFoveationParametersQCOM(uint @framebuffer, uint @layer, uint @focalPoint, float @focalX, float @focalY, float @gainX, float @gainY, float @foveaArea) {
            Native_FramebufferFoveationParametersQCOM(@framebuffer, @layer, @focalPoint, @focalX, @focalY, @gainX, @gainY, @foveaArea);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferParameteri")]
        static extern void Native_FramebufferParameteri(GlFramebufferTarget @target, GlFramebufferParameterName @pname, int @param);

        public void FramebufferParameteri(GlFramebufferTarget @target, GlFramebufferParameterName @pname, int @param) {
            Native_FramebufferParameteri(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferPixelLocalStorageSizeEXT")]
        static extern void Native_FramebufferPixelLocalStorageSizeEXT(uint @target, int @size);

        public void FramebufferPixelLocalStorageSizeEXT(uint @target, int @size) {
            Native_FramebufferPixelLocalStorageSizeEXT(@target, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferReadBufferEXT")]
        static extern void Native_FramebufferReadBufferEXT(uint @framebuffer, GlReadBufferMode @mode);

        public void FramebufferReadBufferEXT(uint @framebuffer, GlReadBufferMode @mode) {
            Native_FramebufferReadBufferEXT(@framebuffer, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferRenderbuffer")]
        static extern void Native_FramebufferRenderbuffer(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlRenderbufferTarget @renderbuffertarget, uint @renderbuffer);

        public void FramebufferRenderbuffer(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlRenderbufferTarget @renderbuffertarget, uint @renderbuffer) {
            Native_FramebufferRenderbuffer(@target, @attachment, @renderbuffertarget, @renderbuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferRenderbufferEXT")]
        static extern void Native_FramebufferRenderbufferEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlRenderbufferTarget @renderbuffertarget, uint @renderbuffer);

        public void FramebufferRenderbufferEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlRenderbufferTarget @renderbuffertarget, uint @renderbuffer) {
            Native_FramebufferRenderbufferEXT(@target, @attachment, @renderbuffertarget, @renderbuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferRenderbufferOES")]
        static extern void Native_FramebufferRenderbufferOES(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlRenderbufferTarget @renderbuffertarget, uint @renderbuffer);

        public void FramebufferRenderbufferOES(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlRenderbufferTarget @renderbuffertarget, uint @renderbuffer) {
            Native_FramebufferRenderbufferOES(@target, @attachment, @renderbuffertarget, @renderbuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferSampleLocationsfvARB")]
        static extern void Native_FramebufferSampleLocationsfvARB(GlFramebufferTarget @target, uint @start, int @count, float* @v);

        public void FramebufferSampleLocationsfvARB(GlFramebufferTarget @target, uint @start, int @count, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_FramebufferSampleLocationsfvARB(@target, @start, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferSampleLocationsfvNV")]
        static extern void Native_FramebufferSampleLocationsfvNV(GlFramebufferTarget @target, uint @start, int @count, float* @v);

        public void FramebufferSampleLocationsfvNV(GlFramebufferTarget @target, uint @start, int @count, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_FramebufferSampleLocationsfvNV(@target, @start, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferSamplePositionsfvAMD")]
        static extern void Native_FramebufferSamplePositionsfvAMD(GlFramebufferTarget @target, uint @numsamples, uint @pixelindex, float* @values);

        public void FramebufferSamplePositionsfvAMD(GlFramebufferTarget @target, uint @numsamples, uint @pixelindex, float[] @values) {
            fixed (float *ptr_values = @values) {
                Native_FramebufferSamplePositionsfvAMD(@target, @numsamples, @pixelindex, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTexture")]
        static extern void Native_FramebufferTexture(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level);

        public void FramebufferTexture(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level) {
            Native_FramebufferTexture(@target, @attachment, @texture, @level);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTexture1D")]
        static extern void Native_FramebufferTexture1D(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level);

        public void FramebufferTexture1D(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level) {
            Native_FramebufferTexture1D(@target, @attachment, @textarget, @texture, @level);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTexture1DEXT")]
        static extern void Native_FramebufferTexture1DEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level);

        public void FramebufferTexture1DEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level) {
            Native_FramebufferTexture1DEXT(@target, @attachment, @textarget, @texture, @level);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTexture2D")]
        static extern void Native_FramebufferTexture2D(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level);

        public void FramebufferTexture2D(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level) {
            Native_FramebufferTexture2D(@target, @attachment, @textarget, @texture, @level);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTexture2DEXT")]
        static extern void Native_FramebufferTexture2DEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level);

        public void FramebufferTexture2DEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level) {
            Native_FramebufferTexture2DEXT(@target, @attachment, @textarget, @texture, @level);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTexture2DDownsampleIMG")]
        static extern void Native_FramebufferTexture2DDownsampleIMG(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level, int @xscale, int @yscale);

        public void FramebufferTexture2DDownsampleIMG(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level, int @xscale, int @yscale) {
            Native_FramebufferTexture2DDownsampleIMG(@target, @attachment, @textarget, @texture, @level, @xscale, @yscale);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTexture2DMultisampleEXT")]
        static extern void Native_FramebufferTexture2DMultisampleEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level, int @samples);

        public void FramebufferTexture2DMultisampleEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level, int @samples) {
            Native_FramebufferTexture2DMultisampleEXT(@target, @attachment, @textarget, @texture, @level, @samples);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
        static extern void Native_FramebufferTexture2DMultisampleIMG(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level, int @samples);

        public void FramebufferTexture2DMultisampleIMG(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level, int @samples) {
            Native_FramebufferTexture2DMultisampleIMG(@target, @attachment, @textarget, @texture, @level, @samples);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTexture2DOES")]
        static extern void Native_FramebufferTexture2DOES(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level);

        public void FramebufferTexture2DOES(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level) {
            Native_FramebufferTexture2DOES(@target, @attachment, @textarget, @texture, @level);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTexture3D")]
        static extern void Native_FramebufferTexture3D(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level, int @zoffset);

        public void FramebufferTexture3D(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level, int @zoffset) {
            Native_FramebufferTexture3D(@target, @attachment, @textarget, @texture, @level, @zoffset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTexture3DEXT")]
        static extern void Native_FramebufferTexture3DEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level, int @zoffset);

        public void FramebufferTexture3DEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level, int @zoffset) {
            Native_FramebufferTexture3DEXT(@target, @attachment, @textarget, @texture, @level, @zoffset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTexture3DOES")]
        static extern void Native_FramebufferTexture3DOES(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level, int @zoffset);

        public void FramebufferTexture3DOES(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level, int @zoffset) {
            Native_FramebufferTexture3DOES(@target, @attachment, @textarget, @texture, @level, @zoffset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTextureARB")]
        static extern void Native_FramebufferTextureARB(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level);

        public void FramebufferTextureARB(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level) {
            Native_FramebufferTextureARB(@target, @attachment, @texture, @level);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTextureEXT")]
        static extern void Native_FramebufferTextureEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level);

        public void FramebufferTextureEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level) {
            Native_FramebufferTextureEXT(@target, @attachment, @texture, @level);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTextureFaceARB")]
        static extern void Native_FramebufferTextureFaceARB(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, GlTextureTarget @face);

        public void FramebufferTextureFaceARB(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, GlTextureTarget @face) {
            Native_FramebufferTextureFaceARB(@target, @attachment, @texture, @level, @face);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTextureFaceEXT")]
        static extern void Native_FramebufferTextureFaceEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, GlTextureTarget @face);

        public void FramebufferTextureFaceEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, GlTextureTarget @face) {
            Native_FramebufferTextureFaceEXT(@target, @attachment, @texture, @level, @face);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTextureLayer")]
        static extern void Native_FramebufferTextureLayer(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, int @layer);

        public void FramebufferTextureLayer(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, int @layer) {
            Native_FramebufferTextureLayer(@target, @attachment, @texture, @level, @layer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTextureLayerARB")]
        static extern void Native_FramebufferTextureLayerARB(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, int @layer);

        public void FramebufferTextureLayerARB(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, int @layer) {
            Native_FramebufferTextureLayerARB(@target, @attachment, @texture, @level, @layer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTextureLayerEXT")]
        static extern void Native_FramebufferTextureLayerEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, int @layer);

        public void FramebufferTextureLayerEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, int @layer) {
            Native_FramebufferTextureLayerEXT(@target, @attachment, @texture, @level, @layer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTextureLayerDownsampleIMG")]
        static extern void Native_FramebufferTextureLayerDownsampleIMG(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, int @layer, int @xscale, int @yscale);

        public void FramebufferTextureLayerDownsampleIMG(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, int @layer, int @xscale, int @yscale) {
            Native_FramebufferTextureLayerDownsampleIMG(@target, @attachment, @texture, @level, @layer, @xscale, @yscale);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTextureMultisampleMultiviewOVR")]
        static extern void Native_FramebufferTextureMultisampleMultiviewOVR(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, int @samples, int @baseViewIndex, int @numViews);

        public void FramebufferTextureMultisampleMultiviewOVR(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, int @samples, int @baseViewIndex, int @numViews) {
            Native_FramebufferTextureMultisampleMultiviewOVR(@target, @attachment, @texture, @level, @samples, @baseViewIndex, @numViews);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTextureMultiviewOVR")]
        static extern void Native_FramebufferTextureMultiviewOVR(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, int @baseViewIndex, int @numViews);

        public void FramebufferTextureMultiviewOVR(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level, int @baseViewIndex, int @numViews) {
            Native_FramebufferTextureMultiviewOVR(@target, @attachment, @texture, @level, @baseViewIndex, @numViews);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFramebufferTextureOES")]
        static extern void Native_FramebufferTextureOES(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level);

        public void FramebufferTextureOES(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, uint @texture, int @level) {
            Native_FramebufferTextureOES(@target, @attachment, @texture, @level);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFreeObjectBufferATI")]
        static extern void Native_FreeObjectBufferATI(uint @buffer);

        public void FreeObjectBufferATI(uint @buffer) {
            Native_FreeObjectBufferATI(@buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFrontFace")]
        static extern void Native_FrontFace(GlFrontFaceDirection @mode);

        public void FrontFace(GlFrontFaceDirection @mode) {
            Native_FrontFace(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFrustum")]
        static extern void Native_Frustum(double @left, double @right, double @bottom, double @top, double @zNear, double @zFar);

        public void Frustum(double @left, double @right, double @bottom, double @top, double @zNear, double @zFar) {
            Native_Frustum(@left, @right, @bottom, @top, @zNear, @zFar);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFrustumf")]
        static extern void Native_Frustumf(float @l, float @r, float @b, float @t, float @n, float @f);

        public void Frustumf(float @l, float @r, float @b, float @t, float @n, float @f) {
            Native_Frustumf(@l, @r, @b, @t, @n, @f);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFrustumfOES")]
        static extern void Native_FrustumfOES(float @l, float @r, float @b, float @t, float @n, float @f);

        public void FrustumfOES(float @l, float @r, float @b, float @t, float @n, float @f) {
            Native_FrustumfOES(@l, @r, @b, @t, @n, @f);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFrustumx")]
        static extern void Native_Frustumx(int @l, int @r, int @b, int @t, int @n, int @f);

        public void Frustumx(int @l, int @r, int @b, int @t, int @n, int @f) {
            Native_Frustumx(@l, @r, @b, @t, @n, @f);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glFrustumxOES")]
        static extern void Native_FrustumxOES(int @l, int @r, int @b, int @t, int @n, int @f);

        public void FrustumxOES(int @l, int @r, int @b, int @t, int @n, int @f) {
            Native_FrustumxOES(@l, @r, @b, @t, @n, @f);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenAsyncMarkersSGIX")]
        static extern uint Native_GenAsyncMarkersSGIX(int @range);

        public uint GenAsyncMarkersSGIX(int @range) {
            return Native_GenAsyncMarkersSGIX(@range);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenBuffers")]
        static extern void Native_GenBuffers(int @n, uint* @buffers);

        public void GenBuffers(int @n, uint[] @buffers) {
            fixed (uint *ptr_buffers = @buffers) {
                Native_GenBuffers(@n, @ptr_buffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenBuffersARB")]
        static extern void Native_GenBuffersARB(int @n, uint* @buffers);

        public void GenBuffersARB(int @n, uint[] @buffers) {
            fixed (uint *ptr_buffers = @buffers) {
                Native_GenBuffersARB(@n, @ptr_buffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenFencesAPPLE")]
        static extern void Native_GenFencesAPPLE(int @n, uint* @fences);

        public void GenFencesAPPLE(int @n, uint[] @fences) {
            fixed (uint *ptr_fences = @fences) {
                Native_GenFencesAPPLE(@n, @ptr_fences);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenFencesNV")]
        static extern void Native_GenFencesNV(int @n, uint* @fences);

        public void GenFencesNV(int @n, uint[] @fences) {
            fixed (uint *ptr_fences = @fences) {
                Native_GenFencesNV(@n, @ptr_fences);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenFragmentShadersATI")]
        static extern uint Native_GenFragmentShadersATI(uint @range);

        public uint GenFragmentShadersATI(uint @range) {
            return Native_GenFragmentShadersATI(@range);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenFramebuffers")]
        static extern void Native_GenFramebuffers(int @n, uint* @framebuffers);

        public void GenFramebuffers(int @n, uint[] @framebuffers) {
            fixed (uint *ptr_framebuffers = @framebuffers) {
                Native_GenFramebuffers(@n, @ptr_framebuffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenFramebuffersEXT")]
        static extern void Native_GenFramebuffersEXT(int @n, uint* @framebuffers);

        public void GenFramebuffersEXT(int @n, uint[] @framebuffers) {
            fixed (uint *ptr_framebuffers = @framebuffers) {
                Native_GenFramebuffersEXT(@n, @ptr_framebuffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenFramebuffersOES")]
        static extern void Native_GenFramebuffersOES(int @n, uint* @framebuffers);

        public void GenFramebuffersOES(int @n, uint[] @framebuffers) {
            fixed (uint *ptr_framebuffers = @framebuffers) {
                Native_GenFramebuffersOES(@n, @ptr_framebuffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenLists")]
        static extern uint Native_GenLists(int @range);

        public uint GenLists(int @range) {
            return Native_GenLists(@range);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenNamesAMD")]
        static extern void Native_GenNamesAMD(uint @identifier, uint @num, uint* @names);

        public void GenNamesAMD(uint @identifier, uint @num, uint[] @names) {
            fixed (uint *ptr_names = @names) {
                Native_GenNamesAMD(@identifier, @num, @ptr_names);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenOcclusionQueriesNV")]
        static extern void Native_GenOcclusionQueriesNV(int @n, uint* @ids);

        public void GenOcclusionQueriesNV(int @n, uint[] @ids) {
            fixed (uint *ptr_ids = @ids) {
                Native_GenOcclusionQueriesNV(@n, @ptr_ids);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenPathsNV")]
        static extern uint Native_GenPathsNV(int @range);

        public uint GenPathsNV(int @range) {
            return Native_GenPathsNV(@range);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenPerfMonitorsAMD")]
        static extern void Native_GenPerfMonitorsAMD(int @n, uint* @monitors);

        public void GenPerfMonitorsAMD(int @n, uint[] @monitors) {
            fixed (uint *ptr_monitors = @monitors) {
                Native_GenPerfMonitorsAMD(@n, @ptr_monitors);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenProgramPipelines")]
        static extern void Native_GenProgramPipelines(int @n, uint* @pipelines);

        public void GenProgramPipelines(int @n, uint[] @pipelines) {
            fixed (uint *ptr_pipelines = @pipelines) {
                Native_GenProgramPipelines(@n, @ptr_pipelines);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenProgramPipelinesEXT")]
        static extern void Native_GenProgramPipelinesEXT(int @n, uint* @pipelines);

        public void GenProgramPipelinesEXT(int @n, uint[] @pipelines) {
            fixed (uint *ptr_pipelines = @pipelines) {
                Native_GenProgramPipelinesEXT(@n, @ptr_pipelines);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenProgramsARB")]
        static extern void Native_GenProgramsARB(int @n, uint* @programs);

        public void GenProgramsARB(int @n, uint[] @programs) {
            fixed (uint *ptr_programs = @programs) {
                Native_GenProgramsARB(@n, @ptr_programs);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenProgramsNV")]
        static extern void Native_GenProgramsNV(int @n, uint* @programs);

        public void GenProgramsNV(int @n, uint[] @programs) {
            fixed (uint *ptr_programs = @programs) {
                Native_GenProgramsNV(@n, @ptr_programs);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenQueries")]
        static extern void Native_GenQueries(int @n, uint* @ids);

        public void GenQueries(int @n, uint[] @ids) {
            fixed (uint *ptr_ids = @ids) {
                Native_GenQueries(@n, @ptr_ids);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenQueriesARB")]
        static extern void Native_GenQueriesARB(int @n, uint* @ids);

        public void GenQueriesARB(int @n, uint[] @ids) {
            fixed (uint *ptr_ids = @ids) {
                Native_GenQueriesARB(@n, @ptr_ids);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenQueriesEXT")]
        static extern void Native_GenQueriesEXT(int @n, uint* @ids);

        public void GenQueriesEXT(int @n, uint[] @ids) {
            fixed (uint *ptr_ids = @ids) {
                Native_GenQueriesEXT(@n, @ptr_ids);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenQueryResourceTagNV")]
        static extern void Native_GenQueryResourceTagNV(int @n, int* @tagIds);

        public void GenQueryResourceTagNV(int @n, int[] @tagIds) {
            fixed (int *ptr_tagIds = @tagIds) {
                Native_GenQueryResourceTagNV(@n, @ptr_tagIds);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenRenderbuffers")]
        static extern void Native_GenRenderbuffers(int @n, uint* @renderbuffers);

        public void GenRenderbuffers(int @n, uint[] @renderbuffers) {
            fixed (uint *ptr_renderbuffers = @renderbuffers) {
                Native_GenRenderbuffers(@n, @ptr_renderbuffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenRenderbuffersEXT")]
        static extern void Native_GenRenderbuffersEXT(int @n, uint* @renderbuffers);

        public void GenRenderbuffersEXT(int @n, uint[] @renderbuffers) {
            fixed (uint *ptr_renderbuffers = @renderbuffers) {
                Native_GenRenderbuffersEXT(@n, @ptr_renderbuffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenRenderbuffersOES")]
        static extern void Native_GenRenderbuffersOES(int @n, uint* @renderbuffers);

        public void GenRenderbuffersOES(int @n, uint[] @renderbuffers) {
            fixed (uint *ptr_renderbuffers = @renderbuffers) {
                Native_GenRenderbuffersOES(@n, @ptr_renderbuffers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenSamplers")]
        static extern void Native_GenSamplers(int @count, uint* @samplers);

        public void GenSamplers(int @count, uint[] @samplers) {
            fixed (uint *ptr_samplers = @samplers) {
                Native_GenSamplers(@count, @ptr_samplers);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenSemaphoresEXT")]
        static extern void Native_GenSemaphoresEXT(int @n, uint* @semaphores);

        public void GenSemaphoresEXT(int @n, uint[] @semaphores) {
            fixed (uint *ptr_semaphores = @semaphores) {
                Native_GenSemaphoresEXT(@n, @ptr_semaphores);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenSymbolsEXT")]
        static extern uint Native_GenSymbolsEXT(uint @datatype, uint @storagetype, uint @range, uint @components);

        public uint GenSymbolsEXT(uint @datatype, uint @storagetype, uint @range, uint @components) {
            return Native_GenSymbolsEXT(@datatype, @storagetype, @range, @components);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenTextures")]
        static extern void Native_GenTextures(int @n, uint* @textures);

        public void GenTextures(int @n, uint[] @textures) {
            fixed (uint *ptr_textures = @textures) {
                Native_GenTextures(@n, @ptr_textures);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenTexturesEXT")]
        static extern void Native_GenTexturesEXT(int @n, uint* @textures);

        public void GenTexturesEXT(int @n, uint[] @textures) {
            fixed (uint *ptr_textures = @textures) {
                Native_GenTexturesEXT(@n, @ptr_textures);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenTransformFeedbacks")]
        static extern void Native_GenTransformFeedbacks(int @n, uint* @ids);

        public void GenTransformFeedbacks(int @n, uint[] @ids) {
            fixed (uint *ptr_ids = @ids) {
                Native_GenTransformFeedbacks(@n, @ptr_ids);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenTransformFeedbacksNV")]
        static extern void Native_GenTransformFeedbacksNV(int @n, uint* @ids);

        public void GenTransformFeedbacksNV(int @n, uint[] @ids) {
            fixed (uint *ptr_ids = @ids) {
                Native_GenTransformFeedbacksNV(@n, @ptr_ids);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenVertexArrays")]
        static extern void Native_GenVertexArrays(int @n, uint* @arrays);

        public void GenVertexArrays(int @n, uint[] @arrays) {
            fixed (uint *ptr_arrays = @arrays) {
                Native_GenVertexArrays(@n, @ptr_arrays);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenVertexArraysAPPLE")]
        static extern void Native_GenVertexArraysAPPLE(int @n, uint* @arrays);

        public void GenVertexArraysAPPLE(int @n, uint[] @arrays) {
            fixed (uint *ptr_arrays = @arrays) {
                Native_GenVertexArraysAPPLE(@n, @ptr_arrays);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenVertexArraysOES")]
        static extern void Native_GenVertexArraysOES(int @n, uint* @arrays);

        public void GenVertexArraysOES(int @n, uint[] @arrays) {
            fixed (uint *ptr_arrays = @arrays) {
                Native_GenVertexArraysOES(@n, @ptr_arrays);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenVertexShadersEXT")]
        static extern uint Native_GenVertexShadersEXT(uint @range);

        public uint GenVertexShadersEXT(uint @range) {
            return Native_GenVertexShadersEXT(@range);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenerateMipmap")]
        static extern void Native_GenerateMipmap(GlTextureTarget @target);

        public void GenerateMipmap(GlTextureTarget @target) {
            Native_GenerateMipmap(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenerateMipmapEXT")]
        static extern void Native_GenerateMipmapEXT(GlTextureTarget @target);

        public void GenerateMipmapEXT(GlTextureTarget @target) {
            Native_GenerateMipmapEXT(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenerateMipmapOES")]
        static extern void Native_GenerateMipmapOES(GlTextureTarget @target);

        public void GenerateMipmapOES(GlTextureTarget @target) {
            Native_GenerateMipmapOES(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenerateMultiTexMipmapEXT")]
        static extern void Native_GenerateMultiTexMipmapEXT(GlTextureUnit @texunit, GlTextureTarget @target);

        public void GenerateMultiTexMipmapEXT(GlTextureUnit @texunit, GlTextureTarget @target) {
            Native_GenerateMultiTexMipmapEXT(@texunit, @target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenerateTextureMipmap")]
        static extern void Native_GenerateTextureMipmap(uint @texture);

        public void GenerateTextureMipmap(uint @texture) {
            Native_GenerateTextureMipmap(@texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGenerateTextureMipmapEXT")]
        static extern void Native_GenerateTextureMipmapEXT(uint @texture, GlTextureTarget @target);

        public void GenerateTextureMipmapEXT(uint @texture, GlTextureTarget @target) {
            Native_GenerateTextureMipmapEXT(@texture, @target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        static extern void Native_GetActiveAtomicCounterBufferiv(uint @program, uint @bufferIndex, GlAtomicCounterBufferPName @pname, int* @params);

        public void GetActiveAtomicCounterBufferiv(uint @program, uint @bufferIndex, GlAtomicCounterBufferPName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetActiveAtomicCounterBufferiv(@program, @bufferIndex, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetActiveAttrib")]
        static extern void Native_GetActiveAttrib(uint @program, uint @index, int @bufSize, int* @length, int* @size, GlAttributeType* @type, byte* @name);

        public void GetActiveAttrib(uint @program, uint @index, int @bufSize, int[] @length, int[] @size, GlAttributeType[] @type, byte[] @name) {
            fixed (int *ptr_length = @length) {
                fixed (int *ptr_size = @size) {
                    fixed (GlAttributeType *ptr_type = @type) {
                        fixed (byte *ptr_name = @name) {
                            Native_GetActiveAttrib(@program, @index, @bufSize, @ptr_length, @ptr_size, @ptr_type, @ptr_name);
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetActiveAttribARB")]
        static extern void Native_GetActiveAttribARB(IntPtr @programObj, uint @index, int @maxLength, int* @length, int* @size, GlAttributeType* @type, byte* @name);

        public void GetActiveAttribARB(IntPtr @programObj, uint @index, int @maxLength, int[] @length, int[] @size, GlAttributeType[] @type, byte[] @name) {
            fixed (int *ptr_length = @length) {
                fixed (int *ptr_size = @size) {
                    fixed (GlAttributeType *ptr_type = @type) {
                        fixed (byte *ptr_name = @name) {
                            Native_GetActiveAttribARB(@programObj, @index, @maxLength, @ptr_length, @ptr_size, @ptr_type, @ptr_name);
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetActiveSubroutineName")]
        static extern void Native_GetActiveSubroutineName(uint @program, GlShaderType @shadertype, uint @index, int @bufsize, int* @length, byte* @name);

        public void GetActiveSubroutineName(uint @program, GlShaderType @shadertype, uint @index, int @bufsize, int[] @length, byte[] @name) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_name = @name) {
                    Native_GetActiveSubroutineName(@program, @shadertype, @index, @bufsize, @ptr_length, @ptr_name);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetActiveSubroutineUniformName")]
        static extern void Native_GetActiveSubroutineUniformName(uint @program, GlShaderType @shadertype, uint @index, int @bufsize, int* @length, byte* @name);

        public void GetActiveSubroutineUniformName(uint @program, GlShaderType @shadertype, uint @index, int @bufsize, int[] @length, byte[] @name) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_name = @name) {
                    Native_GetActiveSubroutineUniformName(@program, @shadertype, @index, @bufsize, @ptr_length, @ptr_name);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetActiveSubroutineUniformiv")]
        static extern void Native_GetActiveSubroutineUniformiv(uint @program, GlShaderType @shadertype, uint @index, GlSubroutineParameterName @pname, int* @values);

        public void GetActiveSubroutineUniformiv(uint @program, GlShaderType @shadertype, uint @index, GlSubroutineParameterName @pname, int[] @values) {
            fixed (int *ptr_values = @values) {
                Native_GetActiveSubroutineUniformiv(@program, @shadertype, @index, @pname, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetActiveUniform")]
        static extern void Native_GetActiveUniform(uint @program, uint @index, int @bufSize, int* @length, int* @size, GlAttributeType* @type, byte* @name);

        public void GetActiveUniform(uint @program, uint @index, int @bufSize, int[] @length, int[] @size, GlAttributeType[] @type, byte[] @name) {
            fixed (int *ptr_length = @length) {
                fixed (int *ptr_size = @size) {
                    fixed (GlAttributeType *ptr_type = @type) {
                        fixed (byte *ptr_name = @name) {
                            Native_GetActiveUniform(@program, @index, @bufSize, @ptr_length, @ptr_size, @ptr_type, @ptr_name);
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetActiveUniformARB")]
        static extern void Native_GetActiveUniformARB(IntPtr @programObj, uint @index, int @maxLength, int* @length, int* @size, GlAttributeType* @type, byte* @name);

        public void GetActiveUniformARB(IntPtr @programObj, uint @index, int @maxLength, int[] @length, int[] @size, GlAttributeType[] @type, byte[] @name) {
            fixed (int *ptr_length = @length) {
                fixed (int *ptr_size = @size) {
                    fixed (GlAttributeType *ptr_type = @type) {
                        fixed (byte *ptr_name = @name) {
                            Native_GetActiveUniformARB(@programObj, @index, @maxLength, @ptr_length, @ptr_size, @ptr_type, @ptr_name);
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetActiveUniformBlockName")]
        static extern void Native_GetActiveUniformBlockName(uint @program, uint @uniformBlockIndex, int @bufSize, int* @length, byte* @uniformBlockName);

        public void GetActiveUniformBlockName(uint @program, uint @uniformBlockIndex, int @bufSize, int[] @length, byte[] @uniformBlockName) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_uniformBlockName = @uniformBlockName) {
                    Native_GetActiveUniformBlockName(@program, @uniformBlockIndex, @bufSize, @ptr_length, @ptr_uniformBlockName);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetActiveUniformBlockiv")]
        static extern void Native_GetActiveUniformBlockiv(uint @program, uint @uniformBlockIndex, GlUniformBlockPName @pname, int* @params);

        public void GetActiveUniformBlockiv(uint @program, uint @uniformBlockIndex, GlUniformBlockPName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetActiveUniformBlockiv(@program, @uniformBlockIndex, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetActiveUniformName")]
        static extern void Native_GetActiveUniformName(uint @program, uint @uniformIndex, int @bufSize, int* @length, byte* @uniformName);

        public void GetActiveUniformName(uint @program, uint @uniformIndex, int @bufSize, int[] @length, byte[] @uniformName) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_uniformName = @uniformName) {
                    Native_GetActiveUniformName(@program, @uniformIndex, @bufSize, @ptr_length, @ptr_uniformName);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetActiveUniformsiv")]
        static extern void Native_GetActiveUniformsiv(uint @program, int @uniformCount, uint* @uniformIndices, GlUniformPName @pname, int* @params);

        public void GetActiveUniformsiv(uint @program, int @uniformCount, uint[] @uniformIndices, GlUniformPName @pname, int[] @params) {
            fixed (uint *ptr_uniformIndices = @uniformIndices) {
                fixed (int *ptr_params = @params) {
                    Native_GetActiveUniformsiv(@program, @uniformCount, @ptr_uniformIndices, @pname, @ptr_params);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetActiveVaryingNV")]
        static extern void Native_GetActiveVaryingNV(uint @program, uint @index, int @bufSize, int* @length, int* @size, uint* @type, byte* @name);

        public void GetActiveVaryingNV(uint @program, uint @index, int @bufSize, int[] @length, int[] @size, uint[] @type, byte[] @name) {
            fixed (int *ptr_length = @length) {
                fixed (int *ptr_size = @size) {
                    fixed (uint *ptr_type = @type) {
                        fixed (byte *ptr_name = @name) {
                            Native_GetActiveVaryingNV(@program, @index, @bufSize, @ptr_length, @ptr_size, @ptr_type, @ptr_name);
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetArrayObjectfvATI")]
        static extern void Native_GetArrayObjectfvATI(GlEnableCap @array, uint @pname, float* @params);

        public void GetArrayObjectfvATI(GlEnableCap @array, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetArrayObjectfvATI(@array, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetArrayObjectivATI")]
        static extern void Native_GetArrayObjectivATI(GlEnableCap @array, uint @pname, int* @params);

        public void GetArrayObjectivATI(GlEnableCap @array, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetArrayObjectivATI(@array, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetAttachedObjectsARB")]
        static extern void Native_GetAttachedObjectsARB(IntPtr @containerObj, int @maxCount, int* @count, IntPtr* @obj);

        public void GetAttachedObjectsARB(IntPtr @containerObj, int @maxCount, int[] @count, IntPtr[] @obj) {
            fixed (int *ptr_count = @count) {
                fixed (IntPtr *ptr_obj = @obj) {
                    Native_GetAttachedObjectsARB(@containerObj, @maxCount, @ptr_count, @ptr_obj);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetAttachedShaders")]
        static extern void Native_GetAttachedShaders(uint @program, int @maxCount, int* @count, uint* @shaders);

        public void GetAttachedShaders(uint @program, int @maxCount, int[] @count, uint[] @shaders) {
            fixed (int *ptr_count = @count) {
                fixed (uint *ptr_shaders = @shaders) {
                    Native_GetAttachedShaders(@program, @maxCount, @ptr_count, @ptr_shaders);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetAttribLocation")]
        static extern int Native_GetAttribLocation(uint @program, byte* @name);

        public int GetAttribLocation(uint @program, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetAttribLocation(@program, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetAttribLocationARB")]
        static extern int Native_GetAttribLocationARB(IntPtr @programObj, byte* @name);

        public int GetAttribLocationARB(IntPtr @programObj, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetAttribLocationARB(@programObj, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetBooleanIndexedvEXT")]
        static extern void Native_GetBooleanIndexedvEXT(GlBufferTargetARB @target, uint @index, GlBoolean* @data);

        public void GetBooleanIndexedvEXT(GlBufferTargetARB @target, uint @index, GlBoolean[] @data) {
            fixed (GlBoolean *ptr_data = @data) {
                Native_GetBooleanIndexedvEXT(@target, @index, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetBooleani_v")]
        static extern void Native_GetBooleani_v(GlBufferTargetARB @target, uint @index, GlBoolean* @data);

        public void GetBooleani_v(GlBufferTargetARB @target, uint @index, GlBoolean[] @data) {
            fixed (GlBoolean *ptr_data = @data) {
                Native_GetBooleani_v(@target, @index, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetBooleanv")]
        static extern void Native_GetBooleanv(GlGetPName @pname, GlBoolean* @data);

        public void GetBooleanv(GlGetPName @pname, GlBoolean[] @data) {
            fixed (GlBoolean *ptr_data = @data) {
                Native_GetBooleanv(@pname, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetBufferParameteri64v")]
        static extern void Native_GetBufferParameteri64v(GlBufferTargetARB @target, uint @pname, long* @params);

        public void GetBufferParameteri64v(GlBufferTargetARB @target, uint @pname, long[] @params) {
            fixed (long *ptr_params = @params) {
                Native_GetBufferParameteri64v(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetBufferParameteriv")]
        static extern void Native_GetBufferParameteriv(GlBufferTargetARB @target, uint @pname, int* @params);

        public void GetBufferParameteriv(GlBufferTargetARB @target, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetBufferParameteriv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetBufferParameterivARB")]
        static extern void Native_GetBufferParameterivARB(GlBufferTargetARB @target, uint @pname, int* @params);

        public void GetBufferParameterivARB(GlBufferTargetARB @target, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetBufferParameterivARB(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetBufferParameterui64vNV")]
        static extern void Native_GetBufferParameterui64vNV(GlBufferTargetARB @target, uint @pname, ulong* @params);

        public void GetBufferParameterui64vNV(GlBufferTargetARB @target, uint @pname, ulong[] @params) {
            fixed (ulong *ptr_params = @params) {
                Native_GetBufferParameterui64vNV(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetBufferPointerv")]
        static extern void Native_GetBufferPointerv(GlBufferTargetARB @target, uint @pname, byte** @params);

        public void GetBufferPointerv(GlBufferTargetARB @target, uint @pname, byte[][] @params) {
            IntPtr ptr_params = Marshal.AllocHGlobal(@params.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_params, @params, (void **) ptr_params.ToPointer(), 0, __fixedLocals => {
                    Native_GetBufferPointerv(@target, @pname, (byte **) ptr_params.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetBufferPointervARB")]
        static extern void Native_GetBufferPointervARB(GlBufferTargetARB @target, uint @pname, byte** @params);

        public void GetBufferPointervARB(GlBufferTargetARB @target, uint @pname, byte[][] @params) {
            IntPtr ptr_params = Marshal.AllocHGlobal(@params.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_params, @params, (void **) ptr_params.ToPointer(), 0, __fixedLocals => {
                    Native_GetBufferPointervARB(@target, @pname, (byte **) ptr_params.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetBufferPointervOES")]
        static extern void Native_GetBufferPointervOES(GlBufferTargetARB @target, uint @pname, byte** @params);

        public void GetBufferPointervOES(GlBufferTargetARB @target, uint @pname, byte[][] @params) {
            IntPtr ptr_params = Marshal.AllocHGlobal(@params.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_params, @params, (void **) ptr_params.ToPointer(), 0, __fixedLocals => {
                    Native_GetBufferPointervOES(@target, @pname, (byte **) ptr_params.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetBufferSubData")]
        static extern void Native_GetBufferSubData(GlBufferTargetARB @target, long @offset, long @size, byte* @data);

        public void GetBufferSubData(GlBufferTargetARB @target, long @offset, long @size, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_GetBufferSubData(@target, @offset, @size, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetBufferSubDataARB")]
        static extern void Native_GetBufferSubDataARB(GlBufferTargetARB @target, long @offset, long @size, byte* @data);

        public void GetBufferSubDataARB(GlBufferTargetARB @target, long @offset, long @size, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_GetBufferSubDataARB(@target, @offset, @size, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetClipPlane")]
        static extern void Native_GetClipPlane(GlClipPlaneName @plane, double* @equation);

        public void GetClipPlane(GlClipPlaneName @plane, double[] @equation) {
            fixed (double *ptr_equation = @equation) {
                Native_GetClipPlane(@plane, @ptr_equation);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetClipPlanef")]
        static extern void Native_GetClipPlanef(GlClipPlaneName @plane, float* @equation);

        public void GetClipPlanef(GlClipPlaneName @plane, float[] @equation) {
            fixed (float *ptr_equation = @equation) {
                Native_GetClipPlanef(@plane, @ptr_equation);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetClipPlanefOES")]
        static extern void Native_GetClipPlanefOES(GlClipPlaneName @plane, float* @equation);

        public void GetClipPlanefOES(GlClipPlaneName @plane, float[] @equation) {
            fixed (float *ptr_equation = @equation) {
                Native_GetClipPlanefOES(@plane, @ptr_equation);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetClipPlanex")]
        static extern void Native_GetClipPlanex(GlClipPlaneName @plane, int* @equation);

        public void GetClipPlanex(GlClipPlaneName @plane, int[] @equation) {
            fixed (int *ptr_equation = @equation) {
                Native_GetClipPlanex(@plane, @ptr_equation);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetClipPlanexOES")]
        static extern void Native_GetClipPlanexOES(GlClipPlaneName @plane, int* @equation);

        public void GetClipPlanexOES(GlClipPlaneName @plane, int[] @equation) {
            fixed (int *ptr_equation = @equation) {
                Native_GetClipPlanexOES(@plane, @ptr_equation);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetColorTable")]
        static extern void Native_GetColorTable(GlColorTableTarget @target, GlPixelFormat @format, GlPixelType @type, byte* @table);

        public void GetColorTable(GlColorTableTarget @target, GlPixelFormat @format, GlPixelType @type, byte[] @table) {
            fixed (byte *ptr_table = @table) {
                Native_GetColorTable(@target, @format, @type, @ptr_table);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetColorTableEXT")]
        static extern void Native_GetColorTableEXT(GlColorTableTarget @target, GlPixelFormat @format, GlPixelType @type, byte* @data);

        public void GetColorTableEXT(GlColorTableTarget @target, GlPixelFormat @format, GlPixelType @type, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_GetColorTableEXT(@target, @format, @type, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetColorTableParameterfv")]
        static extern void Native_GetColorTableParameterfv(GlColorTableTarget @target, GlGetColorTableParameterPNameSGI @pname, float* @params);

        public void GetColorTableParameterfv(GlColorTableTarget @target, GlGetColorTableParameterPNameSGI @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetColorTableParameterfv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetColorTableParameterfvEXT")]
        static extern void Native_GetColorTableParameterfvEXT(GlColorTableTarget @target, GlGetColorTableParameterPNameSGI @pname, float* @params);

        public void GetColorTableParameterfvEXT(GlColorTableTarget @target, GlGetColorTableParameterPNameSGI @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetColorTableParameterfvEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetColorTableParameterfvSGI")]
        static extern void Native_GetColorTableParameterfvSGI(GlColorTableTargetSGI @target, GlGetColorTableParameterPNameSGI @pname, float* @params);

        public void GetColorTableParameterfvSGI(GlColorTableTargetSGI @target, GlGetColorTableParameterPNameSGI @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetColorTableParameterfvSGI(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetColorTableParameteriv")]
        static extern void Native_GetColorTableParameteriv(GlColorTableTarget @target, GlGetColorTableParameterPNameSGI @pname, int* @params);

        public void GetColorTableParameteriv(GlColorTableTarget @target, GlGetColorTableParameterPNameSGI @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetColorTableParameteriv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetColorTableParameterivEXT")]
        static extern void Native_GetColorTableParameterivEXT(GlColorTableTarget @target, GlGetColorTableParameterPNameSGI @pname, int* @params);

        public void GetColorTableParameterivEXT(GlColorTableTarget @target, GlGetColorTableParameterPNameSGI @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetColorTableParameterivEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetColorTableParameterivSGI")]
        static extern void Native_GetColorTableParameterivSGI(GlColorTableTargetSGI @target, GlGetColorTableParameterPNameSGI @pname, int* @params);

        public void GetColorTableParameterivSGI(GlColorTableTargetSGI @target, GlGetColorTableParameterPNameSGI @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetColorTableParameterivSGI(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetColorTableSGI")]
        static extern void Native_GetColorTableSGI(GlColorTableTargetSGI @target, GlPixelFormat @format, GlPixelType @type, byte* @table);

        public void GetColorTableSGI(GlColorTableTargetSGI @target, GlPixelFormat @format, GlPixelType @type, byte[] @table) {
            fixed (byte *ptr_table = @table) {
                Native_GetColorTableSGI(@target, @format, @type, @ptr_table);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetCombinerInputParameterfvNV")]
        static extern void Native_GetCombinerInputParameterfvNV(uint @stage, uint @portion, uint @variable, uint @pname, float* @params);

        public void GetCombinerInputParameterfvNV(uint @stage, uint @portion, uint @variable, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetCombinerInputParameterfvNV(@stage, @portion, @variable, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetCombinerInputParameterivNV")]
        static extern void Native_GetCombinerInputParameterivNV(uint @stage, uint @portion, uint @variable, uint @pname, int* @params);

        public void GetCombinerInputParameterivNV(uint @stage, uint @portion, uint @variable, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetCombinerInputParameterivNV(@stage, @portion, @variable, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetCombinerOutputParameterfvNV")]
        static extern void Native_GetCombinerOutputParameterfvNV(uint @stage, uint @portion, uint @pname, float* @params);

        public void GetCombinerOutputParameterfvNV(uint @stage, uint @portion, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetCombinerOutputParameterfvNV(@stage, @portion, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetCombinerOutputParameterivNV")]
        static extern void Native_GetCombinerOutputParameterivNV(uint @stage, uint @portion, uint @pname, int* @params);

        public void GetCombinerOutputParameterivNV(uint @stage, uint @portion, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetCombinerOutputParameterivNV(@stage, @portion, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetCombinerStageParameterfvNV")]
        static extern void Native_GetCombinerStageParameterfvNV(uint @stage, uint @pname, float* @params);

        public void GetCombinerStageParameterfvNV(uint @stage, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetCombinerStageParameterfvNV(@stage, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetCommandHeaderNV")]
        static extern uint Native_GetCommandHeaderNV(uint @tokenID, uint @size);

        public uint GetCommandHeaderNV(uint @tokenID, uint @size) {
            return Native_GetCommandHeaderNV(@tokenID, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetCompressedMultiTexImageEXT")]
        static extern void Native_GetCompressedMultiTexImageEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @lod, byte* @img);

        public void GetCompressedMultiTexImageEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @lod, byte[] @img) {
            fixed (byte *ptr_img = @img) {
                Native_GetCompressedMultiTexImageEXT(@texunit, @target, @lod, @ptr_img);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetCompressedTexImage")]
        static extern void Native_GetCompressedTexImage(GlTextureTarget @target, int @level, byte* @img);

        public void GetCompressedTexImage(GlTextureTarget @target, int @level, byte[] @img) {
            fixed (byte *ptr_img = @img) {
                Native_GetCompressedTexImage(@target, @level, @ptr_img);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetCompressedTexImageARB")]
        static extern void Native_GetCompressedTexImageARB(GlTextureTarget @target, int @level, byte* @img);

        public void GetCompressedTexImageARB(GlTextureTarget @target, int @level, byte[] @img) {
            fixed (byte *ptr_img = @img) {
                Native_GetCompressedTexImageARB(@target, @level, @ptr_img);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetCompressedTextureImage")]
        static extern void Native_GetCompressedTextureImage(uint @texture, int @level, int @bufSize, byte* @pixels);

        public void GetCompressedTextureImage(uint @texture, int @level, int @bufSize, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_GetCompressedTextureImage(@texture, @level, @bufSize, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetCompressedTextureImageEXT")]
        static extern void Native_GetCompressedTextureImageEXT(uint @texture, GlTextureTarget @target, int @lod, byte* @img);

        public void GetCompressedTextureImageEXT(uint @texture, GlTextureTarget @target, int @lod, byte[] @img) {
            fixed (byte *ptr_img = @img) {
                Native_GetCompressedTextureImageEXT(@texture, @target, @lod, @ptr_img);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetCompressedTextureSubImage")]
        static extern void Native_GetCompressedTextureSubImage(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, int @bufSize, byte* @pixels);

        public void GetCompressedTextureSubImage(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, int @bufSize, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_GetCompressedTextureSubImage(@texture, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @bufSize, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetConvolutionFilter")]
        static extern void Native_GetConvolutionFilter(GlConvolutionTarget @target, GlPixelFormat @format, GlPixelType @type, byte* @image);

        public void GetConvolutionFilter(GlConvolutionTarget @target, GlPixelFormat @format, GlPixelType @type, byte[] @image) {
            fixed (byte *ptr_image = @image) {
                Native_GetConvolutionFilter(@target, @format, @type, @ptr_image);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetConvolutionFilterEXT")]
        static extern void Native_GetConvolutionFilterEXT(GlConvolutionTargetEXT @target, GlPixelFormat @format, GlPixelType @type, byte* @image);

        public void GetConvolutionFilterEXT(GlConvolutionTargetEXT @target, GlPixelFormat @format, GlPixelType @type, byte[] @image) {
            fixed (byte *ptr_image = @image) {
                Native_GetConvolutionFilterEXT(@target, @format, @type, @ptr_image);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetConvolutionParameterfv")]
        static extern void Native_GetConvolutionParameterfv(GlConvolutionTarget @target, GlConvolutionParameterEXT @pname, float* @params);

        public void GetConvolutionParameterfv(GlConvolutionTarget @target, GlConvolutionParameterEXT @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetConvolutionParameterfv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetConvolutionParameterfvEXT")]
        static extern void Native_GetConvolutionParameterfvEXT(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, float* @params);

        public void GetConvolutionParameterfvEXT(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetConvolutionParameterfvEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetConvolutionParameteriv")]
        static extern void Native_GetConvolutionParameteriv(GlConvolutionTarget @target, GlConvolutionParameterEXT @pname, int* @params);

        public void GetConvolutionParameteriv(GlConvolutionTarget @target, GlConvolutionParameterEXT @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetConvolutionParameteriv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetConvolutionParameterivEXT")]
        static extern void Native_GetConvolutionParameterivEXT(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, int* @params);

        public void GetConvolutionParameterivEXT(GlConvolutionTargetEXT @target, GlConvolutionParameterEXT @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetConvolutionParameterivEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetConvolutionParameterxvOES")]
        static extern void Native_GetConvolutionParameterxvOES(uint @target, uint @pname, int* @params);

        public void GetConvolutionParameterxvOES(uint @target, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetConvolutionParameterxvOES(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetCoverageModulationTableNV")]
        static extern void Native_GetCoverageModulationTableNV(int @bufsize, float* @v);

        public void GetCoverageModulationTableNV(int @bufsize, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_GetCoverageModulationTableNV(@bufsize, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetDebugMessageLog")]
        static extern uint Native_GetDebugMessageLog(uint @count, int @bufSize, GlDebugSource* @sources, GlDebugType* @types, uint* @ids, GlDebugSeverity* @severities, int* @lengths, byte* @messageLog);

        public uint GetDebugMessageLog(uint @count, int @bufSize, GlDebugSource[] @sources, GlDebugType[] @types, uint[] @ids, GlDebugSeverity[] @severities, int[] @lengths, byte[] @messageLog) {
            fixed (GlDebugSource *ptr_sources = @sources) {
                fixed (GlDebugType *ptr_types = @types) {
                    fixed (uint *ptr_ids = @ids) {
                        fixed (GlDebugSeverity *ptr_severities = @severities) {
                            fixed (int *ptr_lengths = @lengths) {
                                fixed (byte *ptr_messageLog = @messageLog) {
                                    return Native_GetDebugMessageLog(@count, @bufSize, @ptr_sources, @ptr_types, @ptr_ids, @ptr_severities, @ptr_lengths, @ptr_messageLog);
                                }
                            }
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetDebugMessageLogAMD")]
        static extern uint Native_GetDebugMessageLogAMD(uint @count, int @bufsize, uint* @categories, GlDebugSeverity* @severities, uint* @ids, int* @lengths, byte* @message);

        public uint GetDebugMessageLogAMD(uint @count, int @bufsize, uint[] @categories, GlDebugSeverity[] @severities, uint[] @ids, int[] @lengths, byte[] @message) {
            fixed (uint *ptr_categories = @categories) {
                fixed (GlDebugSeverity *ptr_severities = @severities) {
                    fixed (uint *ptr_ids = @ids) {
                        fixed (int *ptr_lengths = @lengths) {
                            fixed (byte *ptr_message = @message) {
                                return Native_GetDebugMessageLogAMD(@count, @bufsize, @ptr_categories, @ptr_severities, @ptr_ids, @ptr_lengths, @ptr_message);
                            }
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetDebugMessageLogARB")]
        static extern uint Native_GetDebugMessageLogARB(uint @count, int @bufSize, GlDebugSource* @sources, GlDebugType* @types, uint* @ids, GlDebugSeverity* @severities, int* @lengths, byte* @messageLog);

        public uint GetDebugMessageLogARB(uint @count, int @bufSize, GlDebugSource[] @sources, GlDebugType[] @types, uint[] @ids, GlDebugSeverity[] @severities, int[] @lengths, byte[] @messageLog) {
            fixed (GlDebugSource *ptr_sources = @sources) {
                fixed (GlDebugType *ptr_types = @types) {
                    fixed (uint *ptr_ids = @ids) {
                        fixed (GlDebugSeverity *ptr_severities = @severities) {
                            fixed (int *ptr_lengths = @lengths) {
                                fixed (byte *ptr_messageLog = @messageLog) {
                                    return Native_GetDebugMessageLogARB(@count, @bufSize, @ptr_sources, @ptr_types, @ptr_ids, @ptr_severities, @ptr_lengths, @ptr_messageLog);
                                }
                            }
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetDebugMessageLogKHR")]
        static extern uint Native_GetDebugMessageLogKHR(uint @count, int @bufSize, GlDebugSource* @sources, GlDebugType* @types, uint* @ids, GlDebugSeverity* @severities, int* @lengths, byte* @messageLog);

        public uint GetDebugMessageLogKHR(uint @count, int @bufSize, GlDebugSource[] @sources, GlDebugType[] @types, uint[] @ids, GlDebugSeverity[] @severities, int[] @lengths, byte[] @messageLog) {
            fixed (GlDebugSource *ptr_sources = @sources) {
                fixed (GlDebugType *ptr_types = @types) {
                    fixed (uint *ptr_ids = @ids) {
                        fixed (GlDebugSeverity *ptr_severities = @severities) {
                            fixed (int *ptr_lengths = @lengths) {
                                fixed (byte *ptr_messageLog = @messageLog) {
                                    return Native_GetDebugMessageLogKHR(@count, @bufSize, @ptr_sources, @ptr_types, @ptr_ids, @ptr_severities, @ptr_lengths, @ptr_messageLog);
                                }
                            }
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetDetailTexFuncSGIS")]
        static extern void Native_GetDetailTexFuncSGIS(GlTextureTarget @target, float* @points);

        public void GetDetailTexFuncSGIS(GlTextureTarget @target, float[] @points) {
            fixed (float *ptr_points = @points) {
                Native_GetDetailTexFuncSGIS(@target, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetDoubleIndexedvEXT")]
        static extern void Native_GetDoubleIndexedvEXT(GlTypeEnum @target, uint @index, double* @data);

        public void GetDoubleIndexedvEXT(GlTypeEnum @target, uint @index, double[] @data) {
            fixed (double *ptr_data = @data) {
                Native_GetDoubleIndexedvEXT(@target, @index, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetDoublei_v")]
        static extern void Native_GetDoublei_v(GlTypeEnum @target, uint @index, double* @data);

        public void GetDoublei_v(GlTypeEnum @target, uint @index, double[] @data) {
            fixed (double *ptr_data = @data) {
                Native_GetDoublei_v(@target, @index, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetDoublei_vEXT")]
        static extern void Native_GetDoublei_vEXT(GlTypeEnum @pname, uint @index, double* @params);

        public void GetDoublei_vEXT(GlTypeEnum @pname, uint @index, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetDoublei_vEXT(@pname, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetDoublev")]
        static extern void Native_GetDoublev(GlGetPName @pname, double* @data);

        public void GetDoublev(GlGetPName @pname, double[] @data) {
            fixed (double *ptr_data = @data) {
                Native_GetDoublev(@pname, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetDriverControlStringQCOM")]
        static extern void Native_GetDriverControlStringQCOM(uint @driverControl, int @bufSize, int* @length, byte* @driverControlString);

        public void GetDriverControlStringQCOM(uint @driverControl, int @bufSize, int[] @length, byte[] @driverControlString) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_driverControlString = @driverControlString) {
                    Native_GetDriverControlStringQCOM(@driverControl, @bufSize, @ptr_length, @ptr_driverControlString);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetDriverControlsQCOM")]
        static extern void Native_GetDriverControlsQCOM(int* @num, int @size, uint* @driverControls);

        public void GetDriverControlsQCOM(int[] @num, int @size, uint[] @driverControls) {
            fixed (int *ptr_num = @num) {
                fixed (uint *ptr_driverControls = @driverControls) {
                    Native_GetDriverControlsQCOM(@ptr_num, @size, @ptr_driverControls);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetError")]
        static extern uint Native_GetError();

        public uint GetError() {
            return Native_GetError();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFenceivNV")]
        static extern void Native_GetFenceivNV(uint @fence, uint @pname, int* @params);

        public void GetFenceivNV(uint @fence, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetFenceivNV(@fence, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFinalCombinerInputParameterfvNV")]
        static extern void Native_GetFinalCombinerInputParameterfvNV(uint @variable, uint @pname, float* @params);

        public void GetFinalCombinerInputParameterfvNV(uint @variable, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetFinalCombinerInputParameterfvNV(@variable, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFinalCombinerInputParameterivNV")]
        static extern void Native_GetFinalCombinerInputParameterivNV(uint @variable, uint @pname, int* @params);

        public void GetFinalCombinerInputParameterivNV(uint @variable, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetFinalCombinerInputParameterivNV(@variable, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFirstPerfQueryIdINTEL")]
        static extern void Native_GetFirstPerfQueryIdINTEL(uint* @queryId);

        public void GetFirstPerfQueryIdINTEL(uint[] @queryId) {
            fixed (uint *ptr_queryId = @queryId) {
                Native_GetFirstPerfQueryIdINTEL(@ptr_queryId);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFixedv")]
        static extern void Native_GetFixedv(GlGetPName @pname, int* @params);

        public void GetFixedv(GlGetPName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetFixedv(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFixedvOES")]
        static extern void Native_GetFixedvOES(GlGetPName @pname, int* @params);

        public void GetFixedvOES(GlGetPName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetFixedvOES(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFloatIndexedvEXT")]
        static extern void Native_GetFloatIndexedvEXT(GlTypeEnum @target, uint @index, float* @data);

        public void GetFloatIndexedvEXT(GlTypeEnum @target, uint @index, float[] @data) {
            fixed (float *ptr_data = @data) {
                Native_GetFloatIndexedvEXT(@target, @index, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFloati_v")]
        static extern void Native_GetFloati_v(GlTypeEnum @target, uint @index, float* @data);

        public void GetFloati_v(GlTypeEnum @target, uint @index, float[] @data) {
            fixed (float *ptr_data = @data) {
                Native_GetFloati_v(@target, @index, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFloati_vEXT")]
        static extern void Native_GetFloati_vEXT(GlTypeEnum @pname, uint @index, float* @params);

        public void GetFloati_vEXT(GlTypeEnum @pname, uint @index, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetFloati_vEXT(@pname, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFloati_vNV")]
        static extern void Native_GetFloati_vNV(GlTypeEnum @target, uint @index, float* @data);

        public void GetFloati_vNV(GlTypeEnum @target, uint @index, float[] @data) {
            fixed (float *ptr_data = @data) {
                Native_GetFloati_vNV(@target, @index, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFloati_vOES")]
        static extern void Native_GetFloati_vOES(GlTypeEnum @target, uint @index, float* @data);

        public void GetFloati_vOES(GlTypeEnum @target, uint @index, float[] @data) {
            fixed (float *ptr_data = @data) {
                Native_GetFloati_vOES(@target, @index, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFloatv")]
        static extern void Native_GetFloatv(GlGetPName @pname, float* @data);

        public void GetFloatv(GlGetPName @pname, float[] @data) {
            fixed (float *ptr_data = @data) {
                Native_GetFloatv(@pname, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFogFuncSGIS")]
        static extern void Native_GetFogFuncSGIS(float* @points);

        public void GetFogFuncSGIS(float[] @points) {
            fixed (float *ptr_points = @points) {
                Native_GetFogFuncSGIS(@ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFragDataIndex")]
        static extern int Native_GetFragDataIndex(uint @program, byte* @name);

        public int GetFragDataIndex(uint @program, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetFragDataIndex(@program, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFragDataIndexEXT")]
        static extern int Native_GetFragDataIndexEXT(uint @program, byte* @name);

        public int GetFragDataIndexEXT(uint @program, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetFragDataIndexEXT(@program, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFragDataLocation")]
        static extern int Native_GetFragDataLocation(uint @program, byte* @name);

        public int GetFragDataLocation(uint @program, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetFragDataLocation(@program, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFragDataLocationEXT")]
        static extern int Native_GetFragDataLocationEXT(uint @program, byte* @name);

        public int GetFragDataLocationEXT(uint @program, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetFragDataLocationEXT(@program, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFragmentLightfvSGIX")]
        static extern void Native_GetFragmentLightfvSGIX(uint @light, uint @pname, float* @params);

        public void GetFragmentLightfvSGIX(uint @light, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetFragmentLightfvSGIX(@light, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFragmentLightivSGIX")]
        static extern void Native_GetFragmentLightivSGIX(uint @light, uint @pname, int* @params);

        public void GetFragmentLightivSGIX(uint @light, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetFragmentLightivSGIX(@light, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFragmentMaterialfvSGIX")]
        static extern void Native_GetFragmentMaterialfvSGIX(GlMaterialFace @face, GlMaterialParameter @pname, float* @params);

        public void GetFragmentMaterialfvSGIX(GlMaterialFace @face, GlMaterialParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetFragmentMaterialfvSGIX(@face, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFragmentMaterialivSGIX")]
        static extern void Native_GetFragmentMaterialivSGIX(GlMaterialFace @face, GlMaterialParameter @pname, int* @params);

        public void GetFragmentMaterialivSGIX(GlMaterialFace @face, GlMaterialParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetFragmentMaterialivSGIX(@face, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        static extern void Native_GetFramebufferAttachmentParameteriv(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlFramebufferAttachmentParameterName @pname, int* @params);

        public void GetFramebufferAttachmentParameteriv(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlFramebufferAttachmentParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetFramebufferAttachmentParameteriv(@target, @attachment, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFramebufferAttachmentParameterivEXT")]
        static extern void Native_GetFramebufferAttachmentParameterivEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlFramebufferAttachmentParameterName @pname, int* @params);

        public void GetFramebufferAttachmentParameterivEXT(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlFramebufferAttachmentParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetFramebufferAttachmentParameterivEXT(@target, @attachment, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFramebufferAttachmentParameterivOES")]
        static extern void Native_GetFramebufferAttachmentParameterivOES(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlFramebufferAttachmentParameterName @pname, int* @params);

        public void GetFramebufferAttachmentParameterivOES(GlFramebufferTarget @target, GlFramebufferAttachment @attachment, GlFramebufferAttachmentParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetFramebufferAttachmentParameterivOES(@target, @attachment, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFramebufferParameterfvAMD")]
        static extern void Native_GetFramebufferParameterfvAMD(GlFramebufferTarget @target, GlFramebufferAttachmentParameterName @pname, uint @numsamples, uint @pixelindex, int @size, float* @values);

        public void GetFramebufferParameterfvAMD(GlFramebufferTarget @target, GlFramebufferAttachmentParameterName @pname, uint @numsamples, uint @pixelindex, int @size, float[] @values) {
            fixed (float *ptr_values = @values) {
                Native_GetFramebufferParameterfvAMD(@target, @pname, @numsamples, @pixelindex, @size, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFramebufferParameteriv")]
        static extern void Native_GetFramebufferParameteriv(GlFramebufferTarget @target, GlFramebufferAttachmentParameterName @pname, int* @params);

        public void GetFramebufferParameteriv(GlFramebufferTarget @target, GlFramebufferAttachmentParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetFramebufferParameteriv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFramebufferParameterivEXT")]
        static extern void Native_GetFramebufferParameterivEXT(uint @framebuffer, GlGetFramebufferParameter @pname, int* @params);

        public void GetFramebufferParameterivEXT(uint @framebuffer, GlGetFramebufferParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetFramebufferParameterivEXT(@framebuffer, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetFramebufferPixelLocalStorageSizeEXT")]
        static extern int Native_GetFramebufferPixelLocalStorageSizeEXT(GlFramebufferTarget @target);

        public int GetFramebufferPixelLocalStorageSizeEXT(GlFramebufferTarget @target) {
            return Native_GetFramebufferPixelLocalStorageSizeEXT(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetGraphicsResetStatus")]
        static extern uint Native_GetGraphicsResetStatus();

        public uint GetGraphicsResetStatus() {
            return Native_GetGraphicsResetStatus();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetGraphicsResetStatusARB")]
        static extern uint Native_GetGraphicsResetStatusARB();

        public uint GetGraphicsResetStatusARB() {
            return Native_GetGraphicsResetStatusARB();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetGraphicsResetStatusEXT")]
        static extern uint Native_GetGraphicsResetStatusEXT();

        public uint GetGraphicsResetStatusEXT() {
            return Native_GetGraphicsResetStatusEXT();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetGraphicsResetStatusKHR")]
        static extern uint Native_GetGraphicsResetStatusKHR();

        public uint GetGraphicsResetStatusKHR() {
            return Native_GetGraphicsResetStatusKHR();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetHandleARB")]
        static extern IntPtr Native_GetHandleARB(uint @pname);

        public IntPtr GetHandleARB(uint @pname) {
            return Native_GetHandleARB(@pname);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetHistogram")]
        static extern void Native_GetHistogram(GlHistogramTargetEXT @target, GlBoolean @reset, GlPixelFormat @format, GlPixelType @type, byte* @values);

        public void GetHistogram(GlHistogramTargetEXT @target, GlBoolean @reset, GlPixelFormat @format, GlPixelType @type, byte[] @values) {
            fixed (byte *ptr_values = @values) {
                Native_GetHistogram(@target, @reset, @format, @type, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetHistogramEXT")]
        static extern void Native_GetHistogramEXT(GlHistogramTargetEXT @target, GlBoolean @reset, GlPixelFormat @format, GlPixelType @type, byte* @values);

        public void GetHistogramEXT(GlHistogramTargetEXT @target, GlBoolean @reset, GlPixelFormat @format, GlPixelType @type, byte[] @values) {
            fixed (byte *ptr_values = @values) {
                Native_GetHistogramEXT(@target, @reset, @format, @type, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetHistogramParameterfv")]
        static extern void Native_GetHistogramParameterfv(GlHistogramTargetEXT @target, GlGetHistogramParameterPNameEXT @pname, float* @params);

        public void GetHistogramParameterfv(GlHistogramTargetEXT @target, GlGetHistogramParameterPNameEXT @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetHistogramParameterfv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetHistogramParameterfvEXT")]
        static extern void Native_GetHistogramParameterfvEXT(GlHistogramTargetEXT @target, GlGetHistogramParameterPNameEXT @pname, float* @params);

        public void GetHistogramParameterfvEXT(GlHistogramTargetEXT @target, GlGetHistogramParameterPNameEXT @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetHistogramParameterfvEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetHistogramParameteriv")]
        static extern void Native_GetHistogramParameteriv(GlHistogramTargetEXT @target, GlGetHistogramParameterPNameEXT @pname, int* @params);

        public void GetHistogramParameteriv(GlHistogramTargetEXT @target, GlGetHistogramParameterPNameEXT @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetHistogramParameteriv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetHistogramParameterivEXT")]
        static extern void Native_GetHistogramParameterivEXT(GlHistogramTargetEXT @target, GlGetHistogramParameterPNameEXT @pname, int* @params);

        public void GetHistogramParameterivEXT(GlHistogramTargetEXT @target, GlGetHistogramParameterPNameEXT @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetHistogramParameterivEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetHistogramParameterxvOES")]
        static extern void Native_GetHistogramParameterxvOES(GlHistogramTargetEXT @target, GlGetHistogramParameterPNameEXT @pname, int* @params);

        public void GetHistogramParameterxvOES(GlHistogramTargetEXT @target, GlGetHistogramParameterPNameEXT @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetHistogramParameterxvOES(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetImageHandleARB")]
        static extern ulong Native_GetImageHandleARB(uint @texture, int @level, bool @layered, int @layer, GlPixelFormat @format);

        public ulong GetImageHandleARB(uint @texture, int @level, bool @layered, int @layer, GlPixelFormat @format) {
            return Native_GetImageHandleARB(@texture, @level, @layered, @layer, @format);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetImageHandleNV")]
        static extern ulong Native_GetImageHandleNV(uint @texture, int @level, GlBoolean @layered, int @layer, GlPixelFormat @format);

        public ulong GetImageHandleNV(uint @texture, int @level, GlBoolean @layered, int @layer, GlPixelFormat @format) {
            return Native_GetImageHandleNV(@texture, @level, @layered, @layer, @format);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetImageTransformParameterfvHP")]
        static extern void Native_GetImageTransformParameterfvHP(uint @target, uint @pname, float* @params);

        public void GetImageTransformParameterfvHP(uint @target, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetImageTransformParameterfvHP(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetImageTransformParameterivHP")]
        static extern void Native_GetImageTransformParameterivHP(uint @target, uint @pname, int* @params);

        public void GetImageTransformParameterivHP(uint @target, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetImageTransformParameterivHP(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetInfoLogARB")]
        static extern void Native_GetInfoLogARB(IntPtr @obj, int @maxLength, int* @length, byte* @infoLog);

        public void GetInfoLogARB(IntPtr @obj, int @maxLength, int[] @length, byte[] @infoLog) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_infoLog = @infoLog) {
                    Native_GetInfoLogARB(@obj, @maxLength, @ptr_length, @ptr_infoLog);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetInstrumentsSGIX")]
        static extern int Native_GetInstrumentsSGIX();

        public int GetInstrumentsSGIX() {
            return Native_GetInstrumentsSGIX();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetInteger64i_v")]
        static extern void Native_GetInteger64i_v(GlTypeEnum @target, uint @index, long* @data);

        public void GetInteger64i_v(GlTypeEnum @target, uint @index, long[] @data) {
            fixed (long *ptr_data = @data) {
                Native_GetInteger64i_v(@target, @index, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetInteger64v")]
        static extern void Native_GetInteger64v(GlGetPName @pname, long* @data);

        public void GetInteger64v(GlGetPName @pname, long[] @data) {
            fixed (long *ptr_data = @data) {
                Native_GetInteger64v(@pname, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetInteger64vAPPLE")]
        static extern void Native_GetInteger64vAPPLE(GlGetPName @pname, long* @params);

        public void GetInteger64vAPPLE(GlGetPName @pname, long[] @params) {
            fixed (long *ptr_params = @params) {
                Native_GetInteger64vAPPLE(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetIntegerIndexedvEXT")]
        static extern void Native_GetIntegerIndexedvEXT(uint @target, uint @index, int* @data);

        public void GetIntegerIndexedvEXT(uint @target, uint @index, int[] @data) {
            fixed (int *ptr_data = @data) {
                Native_GetIntegerIndexedvEXT(@target, @index, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetIntegeri_v")]
        static extern void Native_GetIntegeri_v(GlTypeEnum @target, uint @index, int* @data);

        public void GetIntegeri_v(GlTypeEnum @target, uint @index, int[] @data) {
            fixed (int *ptr_data = @data) {
                Native_GetIntegeri_v(@target, @index, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetIntegeri_vEXT")]
        static extern void Native_GetIntegeri_vEXT(GlTypeEnum @target, uint @index, int* @data);

        public void GetIntegeri_vEXT(GlTypeEnum @target, uint @index, int[] @data) {
            fixed (int *ptr_data = @data) {
                Native_GetIntegeri_vEXT(@target, @index, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetIntegerui64i_vNV")]
        static extern void Native_GetIntegerui64i_vNV(uint @value, uint @index, ulong* @result);

        public void GetIntegerui64i_vNV(uint @value, uint @index, ulong[] @result) {
            fixed (ulong *ptr_result = @result) {
                Native_GetIntegerui64i_vNV(@value, @index, @ptr_result);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetIntegerui64vNV")]
        static extern void Native_GetIntegerui64vNV(uint @value, ulong* @result);

        public void GetIntegerui64vNV(uint @value, ulong[] @result) {
            fixed (ulong *ptr_result = @result) {
                Native_GetIntegerui64vNV(@value, @ptr_result);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetIntegerv")]
        static extern void Native_GetIntegerv(GlGetPName @pname, int* @data);

        public void GetIntegerv(GlGetPName @pname, int[] @data) {
            fixed (int *ptr_data = @data) {
                Native_GetIntegerv(@pname, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetInternalformatSampleivNV")]
        static extern void Native_GetInternalformatSampleivNV(GlTextureTarget @target, GlInternalFormat @internalformat, int @samples, GlInternalFormatPName @pname, int @bufSize, int* @params);

        public void GetInternalformatSampleivNV(GlTextureTarget @target, GlInternalFormat @internalformat, int @samples, GlInternalFormatPName @pname, int @bufSize, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetInternalformatSampleivNV(@target, @internalformat, @samples, @pname, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetInternalformati64v")]
        static extern void Native_GetInternalformati64v(GlTextureTarget @target, GlInternalFormat @internalformat, GlInternalFormatPName @pname, int @bufSize, long* @params);

        public void GetInternalformati64v(GlTextureTarget @target, GlInternalFormat @internalformat, GlInternalFormatPName @pname, int @bufSize, long[] @params) {
            fixed (long *ptr_params = @params) {
                Native_GetInternalformati64v(@target, @internalformat, @pname, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetInternalformativ")]
        static extern void Native_GetInternalformativ(GlTextureTarget @target, GlInternalFormat @internalformat, GlInternalFormatPName @pname, int @bufSize, int* @params);

        public void GetInternalformativ(GlTextureTarget @target, GlInternalFormat @internalformat, GlInternalFormatPName @pname, int @bufSize, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetInternalformativ(@target, @internalformat, @pname, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetInvariantBooleanvEXT")]
        static extern void Native_GetInvariantBooleanvEXT(uint @id, uint @value, GlBoolean* @data);

        public void GetInvariantBooleanvEXT(uint @id, uint @value, GlBoolean[] @data) {
            fixed (GlBoolean *ptr_data = @data) {
                Native_GetInvariantBooleanvEXT(@id, @value, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetInvariantFloatvEXT")]
        static extern void Native_GetInvariantFloatvEXT(uint @id, uint @value, float* @data);

        public void GetInvariantFloatvEXT(uint @id, uint @value, float[] @data) {
            fixed (float *ptr_data = @data) {
                Native_GetInvariantFloatvEXT(@id, @value, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetInvariantIntegervEXT")]
        static extern void Native_GetInvariantIntegervEXT(uint @id, uint @value, int* @data);

        public void GetInvariantIntegervEXT(uint @id, uint @value, int[] @data) {
            fixed (int *ptr_data = @data) {
                Native_GetInvariantIntegervEXT(@id, @value, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetLightfv")]
        static extern void Native_GetLightfv(GlLightName @light, GlLightParameter @pname, float* @params);

        public void GetLightfv(GlLightName @light, GlLightParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetLightfv(@light, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetLightiv")]
        static extern void Native_GetLightiv(GlLightName @light, GlLightParameter @pname, int* @params);

        public void GetLightiv(GlLightName @light, GlLightParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetLightiv(@light, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetLightxOES")]
        static extern void Native_GetLightxOES(GlLightName @light, GlLightParameter @pname, int* @params);

        public void GetLightxOES(GlLightName @light, GlLightParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetLightxOES(@light, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetLightxv")]
        static extern void Native_GetLightxv(GlLightName @light, GlLightParameter @pname, int* @params);

        public void GetLightxv(GlLightName @light, GlLightParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetLightxv(@light, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetLightxvOES")]
        static extern void Native_GetLightxvOES(GlLightName @light, GlLightParameter @pname, int* @params);

        public void GetLightxvOES(GlLightName @light, GlLightParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetLightxvOES(@light, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetListParameterfvSGIX")]
        static extern void Native_GetListParameterfvSGIX(uint @list, GlListParameterName @pname, float* @params);

        public void GetListParameterfvSGIX(uint @list, GlListParameterName @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetListParameterfvSGIX(@list, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetListParameterivSGIX")]
        static extern void Native_GetListParameterivSGIX(uint @list, GlListParameterName @pname, int* @params);

        public void GetListParameterivSGIX(uint @list, GlListParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetListParameterivSGIX(@list, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetLocalConstantBooleanvEXT")]
        static extern void Native_GetLocalConstantBooleanvEXT(uint @id, uint @value, GlBoolean* @data);

        public void GetLocalConstantBooleanvEXT(uint @id, uint @value, GlBoolean[] @data) {
            fixed (GlBoolean *ptr_data = @data) {
                Native_GetLocalConstantBooleanvEXT(@id, @value, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetLocalConstantFloatvEXT")]
        static extern void Native_GetLocalConstantFloatvEXT(uint @id, uint @value, float* @data);

        public void GetLocalConstantFloatvEXT(uint @id, uint @value, float[] @data) {
            fixed (float *ptr_data = @data) {
                Native_GetLocalConstantFloatvEXT(@id, @value, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetLocalConstantIntegervEXT")]
        static extern void Native_GetLocalConstantIntegervEXT(uint @id, uint @value, int* @data);

        public void GetLocalConstantIntegervEXT(uint @id, uint @value, int[] @data) {
            fixed (int *ptr_data = @data) {
                Native_GetLocalConstantIntegervEXT(@id, @value, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMapAttribParameterfvNV")]
        static extern void Native_GetMapAttribParameterfvNV(uint @target, uint @index, uint @pname, float* @params);

        public void GetMapAttribParameterfvNV(uint @target, uint @index, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetMapAttribParameterfvNV(@target, @index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMapAttribParameterivNV")]
        static extern void Native_GetMapAttribParameterivNV(uint @target, uint @index, uint @pname, int* @params);

        public void GetMapAttribParameterivNV(uint @target, uint @index, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetMapAttribParameterivNV(@target, @index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMapControlPointsNV")]
        static extern void Native_GetMapControlPointsNV(uint @target, uint @index, uint @type, int @ustride, int @vstride, GlBoolean @packed, byte* @points);

        public void GetMapControlPointsNV(uint @target, uint @index, uint @type, int @ustride, int @vstride, GlBoolean @packed, byte[] @points) {
            fixed (byte *ptr_points = @points) {
                Native_GetMapControlPointsNV(@target, @index, @type, @ustride, @vstride, @packed, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMapParameterfvNV")]
        static extern void Native_GetMapParameterfvNV(uint @target, uint @pname, float* @params);

        public void GetMapParameterfvNV(uint @target, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetMapParameterfvNV(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMapParameterivNV")]
        static extern void Native_GetMapParameterivNV(uint @target, uint @pname, int* @params);

        public void GetMapParameterivNV(uint @target, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetMapParameterivNV(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMapdv")]
        static extern void Native_GetMapdv(GlMapTarget @target, GlGetMapQuery @query, double* @v);

        public void GetMapdv(GlMapTarget @target, GlGetMapQuery @query, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_GetMapdv(@target, @query, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMapfv")]
        static extern void Native_GetMapfv(GlMapTarget @target, GlGetMapQuery @query, float* @v);

        public void GetMapfv(GlMapTarget @target, GlGetMapQuery @query, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_GetMapfv(@target, @query, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMapiv")]
        static extern void Native_GetMapiv(GlMapTarget @target, GlGetMapQuery @query, int* @v);

        public void GetMapiv(GlMapTarget @target, GlGetMapQuery @query, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_GetMapiv(@target, @query, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMapxvOES")]
        static extern void Native_GetMapxvOES(GlMapTarget @target, GlGetMapQuery @query, int* @v);

        public void GetMapxvOES(GlMapTarget @target, GlGetMapQuery @query, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_GetMapxvOES(@target, @query, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMaterialfv")]
        static extern void Native_GetMaterialfv(GlMaterialFace @face, GlMaterialParameter @pname, float* @params);

        public void GetMaterialfv(GlMaterialFace @face, GlMaterialParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetMaterialfv(@face, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMaterialiv")]
        static extern void Native_GetMaterialiv(GlMaterialFace @face, GlMaterialParameter @pname, int* @params);

        public void GetMaterialiv(GlMaterialFace @face, GlMaterialParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetMaterialiv(@face, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMaterialxOES")]
        static extern void Native_GetMaterialxOES(GlMaterialFace @face, GlMaterialParameter @pname, int @param);

        public void GetMaterialxOES(GlMaterialFace @face, GlMaterialParameter @pname, int @param) {
            Native_GetMaterialxOES(@face, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMaterialxv")]
        static extern void Native_GetMaterialxv(GlMaterialFace @face, GlMaterialParameter @pname, int* @params);

        public void GetMaterialxv(GlMaterialFace @face, GlMaterialParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetMaterialxv(@face, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMaterialxvOES")]
        static extern void Native_GetMaterialxvOES(GlMaterialFace @face, GlMaterialParameter @pname, int* @params);

        public void GetMaterialxvOES(GlMaterialFace @face, GlMaterialParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetMaterialxvOES(@face, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMemoryObjectParameterivEXT")]
        static extern void Native_GetMemoryObjectParameterivEXT(uint @memoryObject, GlMemoryObjectParameterName @pname, int* @params);

        public void GetMemoryObjectParameterivEXT(uint @memoryObject, GlMemoryObjectParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetMemoryObjectParameterivEXT(@memoryObject, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMinmax")]
        static extern void Native_GetMinmax(GlMinmaxTargetEXT @target, GlBoolean @reset, GlPixelFormat @format, GlPixelType @type, byte* @values);

        public void GetMinmax(GlMinmaxTargetEXT @target, GlBoolean @reset, GlPixelFormat @format, GlPixelType @type, byte[] @values) {
            fixed (byte *ptr_values = @values) {
                Native_GetMinmax(@target, @reset, @format, @type, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMinmaxEXT")]
        static extern void Native_GetMinmaxEXT(GlMinmaxTargetEXT @target, GlBoolean @reset, GlPixelFormat @format, GlPixelType @type, byte* @values);

        public void GetMinmaxEXT(GlMinmaxTargetEXT @target, GlBoolean @reset, GlPixelFormat @format, GlPixelType @type, byte[] @values) {
            fixed (byte *ptr_values = @values) {
                Native_GetMinmaxEXT(@target, @reset, @format, @type, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMinmaxParameterfv")]
        static extern void Native_GetMinmaxParameterfv(GlMinmaxTargetEXT @target, GlGetMinmaxParameterPNameEXT @pname, float* @params);

        public void GetMinmaxParameterfv(GlMinmaxTargetEXT @target, GlGetMinmaxParameterPNameEXT @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetMinmaxParameterfv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMinmaxParameterfvEXT")]
        static extern void Native_GetMinmaxParameterfvEXT(GlMinmaxTargetEXT @target, GlGetMinmaxParameterPNameEXT @pname, float* @params);

        public void GetMinmaxParameterfvEXT(GlMinmaxTargetEXT @target, GlGetMinmaxParameterPNameEXT @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetMinmaxParameterfvEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMinmaxParameteriv")]
        static extern void Native_GetMinmaxParameteriv(GlMinmaxTargetEXT @target, GlGetMinmaxParameterPNameEXT @pname, int* @params);

        public void GetMinmaxParameteriv(GlMinmaxTargetEXT @target, GlGetMinmaxParameterPNameEXT @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetMinmaxParameteriv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMinmaxParameterivEXT")]
        static extern void Native_GetMinmaxParameterivEXT(GlMinmaxTargetEXT @target, GlGetMinmaxParameterPNameEXT @pname, int* @params);

        public void GetMinmaxParameterivEXT(GlMinmaxTargetEXT @target, GlGetMinmaxParameterPNameEXT @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetMinmaxParameterivEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMultiTexEnvfvEXT")]
        static extern void Native_GetMultiTexEnvfvEXT(GlTextureUnit @texunit, GlTextureEnvTarget @target, GlTextureEnvParameter @pname, float* @params);

        public void GetMultiTexEnvfvEXT(GlTextureUnit @texunit, GlTextureEnvTarget @target, GlTextureEnvParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetMultiTexEnvfvEXT(@texunit, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMultiTexEnvivEXT")]
        static extern void Native_GetMultiTexEnvivEXT(GlTextureUnit @texunit, GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int* @params);

        public void GetMultiTexEnvivEXT(GlTextureUnit @texunit, GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetMultiTexEnvivEXT(@texunit, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMultiTexGendvEXT")]
        static extern void Native_GetMultiTexGendvEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, double* @params);

        public void GetMultiTexGendvEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetMultiTexGendvEXT(@texunit, @coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMultiTexGenfvEXT")]
        static extern void Native_GetMultiTexGenfvEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, float* @params);

        public void GetMultiTexGenfvEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetMultiTexGenfvEXT(@texunit, @coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMultiTexGenivEXT")]
        static extern void Native_GetMultiTexGenivEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, int* @params);

        public void GetMultiTexGenivEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetMultiTexGenivEXT(@texunit, @coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMultiTexImageEXT")]
        static extern void Native_GetMultiTexImageEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void GetMultiTexImageEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_GetMultiTexImageEXT(@texunit, @target, @level, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
        static extern void Native_GetMultiTexLevelParameterfvEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlGetTextureParameter @pname, float* @params);

        public void GetMultiTexLevelParameterfvEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlGetTextureParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetMultiTexLevelParameterfvEXT(@texunit, @target, @level, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMultiTexLevelParameterivEXT")]
        static extern void Native_GetMultiTexLevelParameterivEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlGetTextureParameter @pname, int* @params);

        public void GetMultiTexLevelParameterivEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetMultiTexLevelParameterivEXT(@texunit, @target, @level, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMultiTexParameterIivEXT")]
        static extern void Native_GetMultiTexParameterIivEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlGetTextureParameter @pname, int* @params);

        public void GetMultiTexParameterIivEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetMultiTexParameterIivEXT(@texunit, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMultiTexParameterIuivEXT")]
        static extern void Native_GetMultiTexParameterIuivEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlGetTextureParameter @pname, uint* @params);

        public void GetMultiTexParameterIuivEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlGetTextureParameter @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetMultiTexParameterIuivEXT(@texunit, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMultiTexParameterfvEXT")]
        static extern void Native_GetMultiTexParameterfvEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlGetTextureParameter @pname, float* @params);

        public void GetMultiTexParameterfvEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlGetTextureParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetMultiTexParameterfvEXT(@texunit, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMultiTexParameterivEXT")]
        static extern void Native_GetMultiTexParameterivEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlGetTextureParameter @pname, int* @params);

        public void GetMultiTexParameterivEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetMultiTexParameterivEXT(@texunit, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMultisamplefv")]
        static extern void Native_GetMultisamplefv(uint @pname, uint @index, float* @val);

        public void GetMultisamplefv(uint @pname, uint @index, float[] @val) {
            fixed (float *ptr_val = @val) {
                Native_GetMultisamplefv(@pname, @index, @ptr_val);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetMultisamplefvNV")]
        static extern void Native_GetMultisamplefvNV(uint @pname, uint @index, float* @val);

        public void GetMultisamplefvNV(uint @pname, uint @index, float[] @val) {
            fixed (float *ptr_val = @val) {
                Native_GetMultisamplefvNV(@pname, @index, @ptr_val);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedBufferParameteri64v")]
        static extern void Native_GetNamedBufferParameteri64v(uint @buffer, GlVertexBufferObjectParameter @pname, long* @params);

        public void GetNamedBufferParameteri64v(uint @buffer, GlVertexBufferObjectParameter @pname, long[] @params) {
            fixed (long *ptr_params = @params) {
                Native_GetNamedBufferParameteri64v(@buffer, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedBufferParameteriv")]
        static extern void Native_GetNamedBufferParameteriv(uint @buffer, GlVertexBufferObjectParameter @pname, int* @params);

        public void GetNamedBufferParameteriv(uint @buffer, GlVertexBufferObjectParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetNamedBufferParameteriv(@buffer, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedBufferParameterivEXT")]
        static extern void Native_GetNamedBufferParameterivEXT(uint @buffer, GlVertexBufferObjectParameter @pname, int* @params);

        public void GetNamedBufferParameterivEXT(uint @buffer, GlVertexBufferObjectParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetNamedBufferParameterivEXT(@buffer, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedBufferParameterui64vNV")]
        static extern void Native_GetNamedBufferParameterui64vNV(uint @buffer, GlVertexBufferObjectParameter @pname, ulong* @params);

        public void GetNamedBufferParameterui64vNV(uint @buffer, GlVertexBufferObjectParameter @pname, ulong[] @params) {
            fixed (ulong *ptr_params = @params) {
                Native_GetNamedBufferParameterui64vNV(@buffer, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedBufferPointerv")]
        static extern void Native_GetNamedBufferPointerv(uint @buffer, GlVertexBufferObjectParameter @pname, byte** @params);

        public void GetNamedBufferPointerv(uint @buffer, GlVertexBufferObjectParameter @pname, byte[][] @params) {
            IntPtr ptr_params = Marshal.AllocHGlobal(@params.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_params, @params, (void **) ptr_params.ToPointer(), 0, __fixedLocals => {
                    Native_GetNamedBufferPointerv(@buffer, @pname, (byte **) ptr_params.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedBufferPointervEXT")]
        static extern void Native_GetNamedBufferPointervEXT(uint @buffer, GlVertexBufferObjectParameter @pname, byte** @params);

        public void GetNamedBufferPointervEXT(uint @buffer, GlVertexBufferObjectParameter @pname, byte[][] @params) {
            IntPtr ptr_params = Marshal.AllocHGlobal(@params.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_params, @params, (void **) ptr_params.ToPointer(), 0, __fixedLocals => {
                    Native_GetNamedBufferPointervEXT(@buffer, @pname, (byte **) ptr_params.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedBufferSubData")]
        static extern void Native_GetNamedBufferSubData(uint @buffer, long @offset, long @size, byte* @data);

        public void GetNamedBufferSubData(uint @buffer, long @offset, long @size, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_GetNamedBufferSubData(@buffer, @offset, @size, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedBufferSubDataEXT")]
        static extern void Native_GetNamedBufferSubDataEXT(uint @buffer, long @offset, long @size, byte* @data);

        public void GetNamedBufferSubDataEXT(uint @buffer, long @offset, long @size, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_GetNamedBufferSubDataEXT(@buffer, @offset, @size, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedFramebufferParameterfvAMD")]
        static extern void Native_GetNamedFramebufferParameterfvAMD(uint @framebuffer, uint @pname, uint @numsamples, uint @pixelindex, int @size, float* @values);

        public void GetNamedFramebufferParameterfvAMD(uint @framebuffer, uint @pname, uint @numsamples, uint @pixelindex, int @size, float[] @values) {
            fixed (float *ptr_values = @values) {
                Native_GetNamedFramebufferParameterfvAMD(@framebuffer, @pname, @numsamples, @pixelindex, @size, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedFramebufferAttachmentParameteriv")]
        static extern void Native_GetNamedFramebufferAttachmentParameteriv(uint @framebuffer, GlFramebufferAttachment @attachment, GlFramebufferAttachmentParameterName @pname, int* @params);

        public void GetNamedFramebufferAttachmentParameteriv(uint @framebuffer, GlFramebufferAttachment @attachment, GlFramebufferAttachmentParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetNamedFramebufferAttachmentParameteriv(@framebuffer, @attachment, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
        static extern void Native_GetNamedFramebufferAttachmentParameterivEXT(uint @framebuffer, GlFramebufferAttachment @attachment, GlFramebufferAttachmentParameterName @pname, int* @params);

        public void GetNamedFramebufferAttachmentParameterivEXT(uint @framebuffer, GlFramebufferAttachment @attachment, GlFramebufferAttachmentParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetNamedFramebufferAttachmentParameterivEXT(@framebuffer, @attachment, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedFramebufferParameteriv")]
        static extern void Native_GetNamedFramebufferParameteriv(uint @framebuffer, GlGetFramebufferParameter @pname, int* @param);

        public void GetNamedFramebufferParameteriv(uint @framebuffer, GlGetFramebufferParameter @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_GetNamedFramebufferParameteriv(@framebuffer, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedFramebufferParameterivEXT")]
        static extern void Native_GetNamedFramebufferParameterivEXT(uint @framebuffer, GlGetFramebufferParameter @pname, int* @params);

        public void GetNamedFramebufferParameterivEXT(uint @framebuffer, GlGetFramebufferParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetNamedFramebufferParameterivEXT(@framebuffer, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
        static extern void Native_GetNamedProgramLocalParameterIivEXT(uint @program, uint @target, uint @index, int* @params);

        public void GetNamedProgramLocalParameterIivEXT(uint @program, uint @target, uint @index, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetNamedProgramLocalParameterIivEXT(@program, @target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
        static extern void Native_GetNamedProgramLocalParameterIuivEXT(uint @program, uint @target, uint @index, uint* @params);

        public void GetNamedProgramLocalParameterIuivEXT(uint @program, uint @target, uint @index, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetNamedProgramLocalParameterIuivEXT(@program, @target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
        static extern void Native_GetNamedProgramLocalParameterdvEXT(uint @program, uint @target, uint @index, double* @params);

        public void GetNamedProgramLocalParameterdvEXT(uint @program, uint @target, uint @index, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetNamedProgramLocalParameterdvEXT(@program, @target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
        static extern void Native_GetNamedProgramLocalParameterfvEXT(uint @program, uint @target, uint @index, float* @params);

        public void GetNamedProgramLocalParameterfvEXT(uint @program, uint @target, uint @index, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetNamedProgramLocalParameterfvEXT(@program, @target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedProgramStringEXT")]
        static extern void Native_GetNamedProgramStringEXT(uint @program, uint @target, uint @pname, byte* @string);

        public void GetNamedProgramStringEXT(uint @program, uint @target, uint @pname, byte[] @string) {
            fixed (byte *ptr_string = @string) {
                Native_GetNamedProgramStringEXT(@program, @target, @pname, @ptr_string);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedProgramivEXT")]
        static extern void Native_GetNamedProgramivEXT(uint @program, uint @target, GlProgramPropertyARB @pname, int* @params);

        public void GetNamedProgramivEXT(uint @program, uint @target, GlProgramPropertyARB @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetNamedProgramivEXT(@program, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedRenderbufferParameteriv")]
        static extern void Native_GetNamedRenderbufferParameteriv(uint @renderbuffer, GlRenderbufferParameterName @pname, int* @params);

        public void GetNamedRenderbufferParameteriv(uint @renderbuffer, GlRenderbufferParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetNamedRenderbufferParameteriv(@renderbuffer, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
        static extern void Native_GetNamedRenderbufferParameterivEXT(uint @renderbuffer, GlRenderbufferParameterName @pname, int* @params);

        public void GetNamedRenderbufferParameterivEXT(uint @renderbuffer, GlRenderbufferParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetNamedRenderbufferParameterivEXT(@renderbuffer, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedStringARB")]
        static extern void Native_GetNamedStringARB(int @namelen, byte* @name, int @bufSize, int* @stringlen, byte* @string);

        public void GetNamedStringARB(int @namelen, byte[] @name, int @bufSize, int[] @stringlen, byte[] @string) {
            fixed (byte *ptr_name = @name) {
                fixed (int *ptr_stringlen = @stringlen) {
                    fixed (byte *ptr_string = @string) {
                        Native_GetNamedStringARB(@namelen, @ptr_name, @bufSize, @ptr_stringlen, @ptr_string);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNamedStringivARB")]
        static extern void Native_GetNamedStringivARB(int @namelen, byte* @name, uint @pname, int* @params);

        public void GetNamedStringivARB(int @namelen, byte[] @name, uint @pname, int[] @params) {
            fixed (byte *ptr_name = @name) {
                fixed (int *ptr_params = @params) {
                    Native_GetNamedStringivARB(@namelen, @ptr_name, @pname, @ptr_params);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetNextPerfQueryIdINTEL")]
        static extern void Native_GetNextPerfQueryIdINTEL(uint @queryId, uint* @nextQueryId);

        public void GetNextPerfQueryIdINTEL(uint @queryId, uint[] @nextQueryId) {
            fixed (uint *ptr_nextQueryId = @nextQueryId) {
                Native_GetNextPerfQueryIdINTEL(@queryId, @ptr_nextQueryId);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetObjectBufferfvATI")]
        static extern void Native_GetObjectBufferfvATI(uint @buffer, uint @pname, float* @params);

        public void GetObjectBufferfvATI(uint @buffer, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetObjectBufferfvATI(@buffer, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetObjectBufferivATI")]
        static extern void Native_GetObjectBufferivATI(uint @buffer, uint @pname, int* @params);

        public void GetObjectBufferivATI(uint @buffer, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetObjectBufferivATI(@buffer, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetObjectLabel")]
        static extern void Native_GetObjectLabel(uint @identifier, uint @name, int @bufSize, int* @length, byte* @label);

        public void GetObjectLabel(uint @identifier, uint @name, int @bufSize, int[] @length, byte[] @label) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_label = @label) {
                    Native_GetObjectLabel(@identifier, @name, @bufSize, @ptr_length, @ptr_label);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetObjectLabelEXT")]
        static extern void Native_GetObjectLabelEXT(uint @type, uint @object, int @bufSize, int* @length, byte* @label);

        public void GetObjectLabelEXT(uint @type, uint @object, int @bufSize, int[] @length, byte[] @label) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_label = @label) {
                    Native_GetObjectLabelEXT(@type, @object, @bufSize, @ptr_length, @ptr_label);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetObjectLabelKHR")]
        static extern void Native_GetObjectLabelKHR(uint @identifier, uint @name, int @bufSize, int* @length, byte* @label);

        public void GetObjectLabelKHR(uint @identifier, uint @name, int @bufSize, int[] @length, byte[] @label) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_label = @label) {
                    Native_GetObjectLabelKHR(@identifier, @name, @bufSize, @ptr_length, @ptr_label);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetObjectParameterfvARB")]
        static extern void Native_GetObjectParameterfvARB(IntPtr @obj, uint @pname, float* @params);

        public void GetObjectParameterfvARB(IntPtr @obj, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetObjectParameterfvARB(@obj, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetObjectParameterivAPPLE")]
        static extern void Native_GetObjectParameterivAPPLE(uint @objectType, uint @name, uint @pname, int* @params);

        public void GetObjectParameterivAPPLE(uint @objectType, uint @name, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetObjectParameterivAPPLE(@objectType, @name, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetObjectParameterivARB")]
        static extern void Native_GetObjectParameterivARB(IntPtr @obj, uint @pname, int* @params);

        public void GetObjectParameterivARB(IntPtr @obj, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetObjectParameterivARB(@obj, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetObjectPtrLabel")]
        static extern void Native_GetObjectPtrLabel(byte* @ptr, int @bufSize, int* @length, byte* @label);

        public void GetObjectPtrLabel(byte[] @ptr, int @bufSize, int[] @length, byte[] @label) {
            fixed (byte *ptr_ptr = @ptr) {
                fixed (int *ptr_length = @length) {
                    fixed (byte *ptr_label = @label) {
                        Native_GetObjectPtrLabel(@ptr_ptr, @bufSize, @ptr_length, @ptr_label);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetObjectPtrLabelKHR")]
        static extern void Native_GetObjectPtrLabelKHR(byte* @ptr, int @bufSize, int* @length, byte* @label);

        public void GetObjectPtrLabelKHR(byte[] @ptr, int @bufSize, int[] @length, byte[] @label) {
            fixed (byte *ptr_ptr = @ptr) {
                fixed (int *ptr_length = @length) {
                    fixed (byte *ptr_label = @label) {
                        Native_GetObjectPtrLabelKHR(@ptr_ptr, @bufSize, @ptr_length, @ptr_label);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetOcclusionQueryivNV")]
        static extern void Native_GetOcclusionQueryivNV(uint @id, uint @pname, int* @params);

        public void GetOcclusionQueryivNV(uint @id, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetOcclusionQueryivNV(@id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetOcclusionQueryuivNV")]
        static extern void Native_GetOcclusionQueryuivNV(uint @id, uint @pname, uint* @params);

        public void GetOcclusionQueryuivNV(uint @id, uint @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetOcclusionQueryuivNV(@id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPathColorGenfvNV")]
        static extern void Native_GetPathColorGenfvNV(GlPathColor @color, GlPathGenMode @pname, float* @value);

        public void GetPathColorGenfvNV(GlPathColor @color, GlPathGenMode @pname, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_GetPathColorGenfvNV(@color, @pname, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPathColorGenivNV")]
        static extern void Native_GetPathColorGenivNV(GlPathColor @color, GlPathGenMode @pname, int* @value);

        public void GetPathColorGenivNV(GlPathColor @color, GlPathGenMode @pname, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_GetPathColorGenivNV(@color, @pname, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPathCommandsNV")]
        static extern void Native_GetPathCommandsNV(uint @path, byte* @commands);

        public void GetPathCommandsNV(uint @path, byte[] @commands) {
            fixed (byte *ptr_commands = @commands) {
                Native_GetPathCommandsNV(@path, @ptr_commands);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPathCoordsNV")]
        static extern void Native_GetPathCoordsNV(uint @path, float* @coords);

        public void GetPathCoordsNV(uint @path, float[] @coords) {
            fixed (float *ptr_coords = @coords) {
                Native_GetPathCoordsNV(@path, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPathDashArrayNV")]
        static extern void Native_GetPathDashArrayNV(uint @path, float* @dashArray);

        public void GetPathDashArrayNV(uint @path, float[] @dashArray) {
            fixed (float *ptr_dashArray = @dashArray) {
                Native_GetPathDashArrayNV(@path, @ptr_dashArray);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPathLengthNV")]
        static extern float Native_GetPathLengthNV(uint @path, int @startSegment, int @numSegments);

        public float GetPathLengthNV(uint @path, int @startSegment, int @numSegments) {
            return Native_GetPathLengthNV(@path, @startSegment, @numSegments);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPathMetricRangeNV")]
        static extern void Native_GetPathMetricRangeNV(GlPathMetricMask @metricQueryMask, uint @firstPathName, int @numPaths, int @stride, float* @metrics);

        public void GetPathMetricRangeNV(GlPathMetricMask @metricQueryMask, uint @firstPathName, int @numPaths, int @stride, float[] @metrics) {
            fixed (float *ptr_metrics = @metrics) {
                Native_GetPathMetricRangeNV(@metricQueryMask, @firstPathName, @numPaths, @stride, @ptr_metrics);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPathMetricsNV")]
        static extern void Native_GetPathMetricsNV(GlPathMetricMask @metricQueryMask, int @numPaths, GlPathElementType @pathNameType, byte* @paths, uint @pathBase, int @stride, float* @metrics);

        public void GetPathMetricsNV(GlPathMetricMask @metricQueryMask, int @numPaths, GlPathElementType @pathNameType, byte[] @paths, uint @pathBase, int @stride, float[] @metrics) {
            fixed (byte *ptr_paths = @paths) {
                fixed (float *ptr_metrics = @metrics) {
                    Native_GetPathMetricsNV(@metricQueryMask, @numPaths, @pathNameType, @ptr_paths, @pathBase, @stride, @ptr_metrics);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPathParameterfvNV")]
        static extern void Native_GetPathParameterfvNV(uint @path, GlPathParameter @pname, float* @value);

        public void GetPathParameterfvNV(uint @path, GlPathParameter @pname, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_GetPathParameterfvNV(@path, @pname, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPathParameterivNV")]
        static extern void Native_GetPathParameterivNV(uint @path, GlPathParameter @pname, int* @value);

        public void GetPathParameterivNV(uint @path, GlPathParameter @pname, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_GetPathParameterivNV(@path, @pname, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPathSpacingNV")]
        static extern void Native_GetPathSpacingNV(GlPathListMode @pathListMode, int @numPaths, GlPathElementType @pathNameType, byte* @paths, uint @pathBase, float @advanceScale, float @kerningScale, GlPathTransformType @transformType, float* @returnedSpacing);

        public void GetPathSpacingNV(GlPathListMode @pathListMode, int @numPaths, GlPathElementType @pathNameType, byte[] @paths, uint @pathBase, float @advanceScale, float @kerningScale, GlPathTransformType @transformType, float[] @returnedSpacing) {
            fixed (byte *ptr_paths = @paths) {
                fixed (float *ptr_returnedSpacing = @returnedSpacing) {
                    Native_GetPathSpacingNV(@pathListMode, @numPaths, @pathNameType, @ptr_paths, @pathBase, @advanceScale, @kerningScale, @transformType, @ptr_returnedSpacing);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPathTexGenfvNV")]
        static extern void Native_GetPathTexGenfvNV(GlTextureUnit @texCoordSet, GlPathGenMode @pname, float* @value);

        public void GetPathTexGenfvNV(GlTextureUnit @texCoordSet, GlPathGenMode @pname, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_GetPathTexGenfvNV(@texCoordSet, @pname, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPathTexGenivNV")]
        static extern void Native_GetPathTexGenivNV(GlTextureUnit @texCoordSet, GlPathGenMode @pname, int* @value);

        public void GetPathTexGenivNV(GlTextureUnit @texCoordSet, GlPathGenMode @pname, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_GetPathTexGenivNV(@texCoordSet, @pname, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPerfCounterInfoINTEL")]
        static extern void Native_GetPerfCounterInfoINTEL(uint @queryId, uint @counterId, uint @counterNameLength, byte* @counterName, uint @counterDescLength, byte* @counterDesc, uint* @counterOffset, uint* @counterDataSize, uint* @counterTypeEnum, uint* @counterDataTypeEnum, ulong* @rawCounterMaxValue);

        public void GetPerfCounterInfoINTEL(uint @queryId, uint @counterId, uint @counterNameLength, byte[] @counterName, uint @counterDescLength, byte[] @counterDesc, uint[] @counterOffset, uint[] @counterDataSize, uint[] @counterTypeEnum, uint[] @counterDataTypeEnum, ulong[] @rawCounterMaxValue) {
            fixed (byte *ptr_counterName = @counterName) {
                fixed (byte *ptr_counterDesc = @counterDesc) {
                    fixed (uint *ptr_counterOffset = @counterOffset) {
                        fixed (uint *ptr_counterDataSize = @counterDataSize) {
                            fixed (uint *ptr_counterTypeEnum = @counterTypeEnum) {
                                fixed (uint *ptr_counterDataTypeEnum = @counterDataTypeEnum) {
                                    fixed (ulong *ptr_rawCounterMaxValue = @rawCounterMaxValue) {
                                        Native_GetPerfCounterInfoINTEL(@queryId, @counterId, @counterNameLength, @ptr_counterName, @counterDescLength, @ptr_counterDesc, @ptr_counterOffset, @ptr_counterDataSize, @ptr_counterTypeEnum, @ptr_counterDataTypeEnum, @ptr_rawCounterMaxValue);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPerfMonitorCounterDataAMD")]
        static extern void Native_GetPerfMonitorCounterDataAMD(uint @monitor, uint @pname, int @dataSize, uint* @data, int* @bytesWritten);

        public void GetPerfMonitorCounterDataAMD(uint @monitor, uint @pname, int @dataSize, uint[] @data, int[] @bytesWritten) {
            fixed (uint *ptr_data = @data) {
                fixed (int *ptr_bytesWritten = @bytesWritten) {
                    Native_GetPerfMonitorCounterDataAMD(@monitor, @pname, @dataSize, @ptr_data, @ptr_bytesWritten);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
        static extern void Native_GetPerfMonitorCounterInfoAMD(uint @group, uint @counter, uint @pname, byte* @data);

        public void GetPerfMonitorCounterInfoAMD(uint @group, uint @counter, uint @pname, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_GetPerfMonitorCounterInfoAMD(@group, @counter, @pname, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPerfMonitorCounterStringAMD")]
        static extern void Native_GetPerfMonitorCounterStringAMD(uint @group, uint @counter, int @bufSize, int* @length, byte* @counterString);

        public void GetPerfMonitorCounterStringAMD(uint @group, uint @counter, int @bufSize, int[] @length, byte[] @counterString) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_counterString = @counterString) {
                    Native_GetPerfMonitorCounterStringAMD(@group, @counter, @bufSize, @ptr_length, @ptr_counterString);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPerfMonitorCountersAMD")]
        static extern void Native_GetPerfMonitorCountersAMD(uint @group, int* @numCounters, int* @maxActiveCounters, int @counterSize, uint* @counters);

        public void GetPerfMonitorCountersAMD(uint @group, int[] @numCounters, int[] @maxActiveCounters, int @counterSize, uint[] @counters) {
            fixed (int *ptr_numCounters = @numCounters) {
                fixed (int *ptr_maxActiveCounters = @maxActiveCounters) {
                    fixed (uint *ptr_counters = @counters) {
                        Native_GetPerfMonitorCountersAMD(@group, @ptr_numCounters, @ptr_maxActiveCounters, @counterSize, @ptr_counters);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPerfMonitorGroupStringAMD")]
        static extern void Native_GetPerfMonitorGroupStringAMD(uint @group, int @bufSize, int* @length, byte* @groupString);

        public void GetPerfMonitorGroupStringAMD(uint @group, int @bufSize, int[] @length, byte[] @groupString) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_groupString = @groupString) {
                    Native_GetPerfMonitorGroupStringAMD(@group, @bufSize, @ptr_length, @ptr_groupString);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPerfMonitorGroupsAMD")]
        static extern void Native_GetPerfMonitorGroupsAMD(int* @numGroups, int @groupsSize, uint* @groups);

        public void GetPerfMonitorGroupsAMD(int[] @numGroups, int @groupsSize, uint[] @groups) {
            fixed (int *ptr_numGroups = @numGroups) {
                fixed (uint *ptr_groups = @groups) {
                    Native_GetPerfMonitorGroupsAMD(@ptr_numGroups, @groupsSize, @ptr_groups);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPerfQueryDataINTEL")]
        static extern void Native_GetPerfQueryDataINTEL(uint @queryHandle, uint @flags, int @dataSize, byte* @data, uint* @bytesWritten);

        public void GetPerfQueryDataINTEL(uint @queryHandle, uint @flags, int @dataSize, byte[] @data, uint[] @bytesWritten) {
            fixed (byte *ptr_data = @data) {
                fixed (uint *ptr_bytesWritten = @bytesWritten) {
                    Native_GetPerfQueryDataINTEL(@queryHandle, @flags, @dataSize, @ptr_data, @ptr_bytesWritten);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPerfQueryIdByNameINTEL")]
        static extern void Native_GetPerfQueryIdByNameINTEL(byte* @queryName, uint* @queryId);

        public void GetPerfQueryIdByNameINTEL(byte[] @queryName, uint[] @queryId) {
            fixed (byte *ptr_queryName = @queryName) {
                fixed (uint *ptr_queryId = @queryId) {
                    Native_GetPerfQueryIdByNameINTEL(@ptr_queryName, @ptr_queryId);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPerfQueryInfoINTEL")]
        static extern void Native_GetPerfQueryInfoINTEL(uint @queryId, uint @queryNameLength, byte* @queryName, uint* @dataSize, uint* @noCounters, uint* @noInstances, uint* @capsMask);

        public void GetPerfQueryInfoINTEL(uint @queryId, uint @queryNameLength, byte[] @queryName, uint[] @dataSize, uint[] @noCounters, uint[] @noInstances, uint[] @capsMask) {
            fixed (byte *ptr_queryName = @queryName) {
                fixed (uint *ptr_dataSize = @dataSize) {
                    fixed (uint *ptr_noCounters = @noCounters) {
                        fixed (uint *ptr_noInstances = @noInstances) {
                            fixed (uint *ptr_capsMask = @capsMask) {
                                Native_GetPerfQueryInfoINTEL(@queryId, @queryNameLength, @ptr_queryName, @ptr_dataSize, @ptr_noCounters, @ptr_noInstances, @ptr_capsMask);
                            }
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPixelMapfv")]
        static extern void Native_GetPixelMapfv(GlPixelMap @map, float* @values);

        public void GetPixelMapfv(GlPixelMap @map, float[] @values) {
            fixed (float *ptr_values = @values) {
                Native_GetPixelMapfv(@map, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPixelMapuiv")]
        static extern void Native_GetPixelMapuiv(GlPixelMap @map, uint* @values);

        public void GetPixelMapuiv(GlPixelMap @map, uint[] @values) {
            fixed (uint *ptr_values = @values) {
                Native_GetPixelMapuiv(@map, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPixelMapusv")]
        static extern void Native_GetPixelMapusv(GlPixelMap @map, ushort* @values);

        public void GetPixelMapusv(GlPixelMap @map, ushort[] @values) {
            fixed (ushort *ptr_values = @values) {
                Native_GetPixelMapusv(@map, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPixelMapxv")]
        static extern void Native_GetPixelMapxv(GlPixelMap @map, int @size, int* @values);

        public void GetPixelMapxv(GlPixelMap @map, int @size, int[] @values) {
            fixed (int *ptr_values = @values) {
                Native_GetPixelMapxv(@map, @size, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPixelTexGenParameterfvSGIS")]
        static extern void Native_GetPixelTexGenParameterfvSGIS(GlPixelTexGenParameterNameSGIS @pname, float* @params);

        public void GetPixelTexGenParameterfvSGIS(GlPixelTexGenParameterNameSGIS @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetPixelTexGenParameterfvSGIS(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPixelTexGenParameterivSGIS")]
        static extern void Native_GetPixelTexGenParameterivSGIS(GlPixelTexGenParameterNameSGIS @pname, int* @params);

        public void GetPixelTexGenParameterivSGIS(GlPixelTexGenParameterNameSGIS @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetPixelTexGenParameterivSGIS(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPixelTransformParameterfvEXT")]
        static extern void Native_GetPixelTransformParameterfvEXT(GlTypeEnum @target, uint @pname, float* @params);

        public void GetPixelTransformParameterfvEXT(GlTypeEnum @target, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetPixelTransformParameterfvEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPixelTransformParameterivEXT")]
        static extern void Native_GetPixelTransformParameterivEXT(GlTypeEnum @target, uint @pname, int* @params);

        public void GetPixelTransformParameterivEXT(GlTypeEnum @target, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetPixelTransformParameterivEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPointerIndexedvEXT")]
        static extern void Native_GetPointerIndexedvEXT(GlTypeEnum @target, uint @index, byte** @data);

        public void GetPointerIndexedvEXT(GlTypeEnum @target, uint @index, byte[][] @data) {
            IntPtr ptr_data = Marshal.AllocHGlobal(@data.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_data, @data, (void **) ptr_data.ToPointer(), 0, __fixedLocals => {
                    Native_GetPointerIndexedvEXT(@target, @index, (byte **) ptr_data.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPointeri_vEXT")]
        static extern void Native_GetPointeri_vEXT(GlTypeEnum @pname, uint @index, byte** @params);

        public void GetPointeri_vEXT(GlTypeEnum @pname, uint @index, byte[][] @params) {
            IntPtr ptr_params = Marshal.AllocHGlobal(@params.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_params, @params, (void **) ptr_params.ToPointer(), 0, __fixedLocals => {
                    Native_GetPointeri_vEXT(@pname, @index, (byte **) ptr_params.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPointerv")]
        static extern void Native_GetPointerv(GlGetPointervPName @pname, byte** @params);

        public void GetPointerv(GlGetPointervPName @pname, byte[][] @params) {
            IntPtr ptr_params = Marshal.AllocHGlobal(@params.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_params, @params, (void **) ptr_params.ToPointer(), 0, __fixedLocals => {
                    Native_GetPointerv(@pname, (byte **) ptr_params.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPointervEXT")]
        static extern void Native_GetPointervEXT(GlGetPointervPName @pname, byte** @params);

        public void GetPointervEXT(GlGetPointervPName @pname, byte[][] @params) {
            IntPtr ptr_params = Marshal.AllocHGlobal(@params.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_params, @params, (void **) ptr_params.ToPointer(), 0, __fixedLocals => {
                    Native_GetPointervEXT(@pname, (byte **) ptr_params.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPointervKHR")]
        static extern void Native_GetPointervKHR(uint @pname, byte** @params);

        public void GetPointervKHR(uint @pname, byte[][] @params) {
            IntPtr ptr_params = Marshal.AllocHGlobal(@params.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_params, @params, (void **) ptr_params.ToPointer(), 0, __fixedLocals => {
                    Native_GetPointervKHR(@pname, (byte **) ptr_params.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetPolygonStipple")]
        static extern void Native_GetPolygonStipple(byte* @mask);

        public void GetPolygonStipple(byte[] @mask) {
            fixed (byte *ptr_mask = @mask) {
                Native_GetPolygonStipple(@ptr_mask);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramBinary")]
        static extern void Native_GetProgramBinary(uint @program, int @bufSize, int* @length, uint* @binaryFormat, byte* @binary);

        public void GetProgramBinary(uint @program, int @bufSize, int[] @length, uint[] @binaryFormat, byte[] @binary) {
            fixed (int *ptr_length = @length) {
                fixed (uint *ptr_binaryFormat = @binaryFormat) {
                    fixed (byte *ptr_binary = @binary) {
                        Native_GetProgramBinary(@program, @bufSize, @ptr_length, @ptr_binaryFormat, @ptr_binary);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramBinaryOES")]
        static extern void Native_GetProgramBinaryOES(uint @program, int @bufSize, int* @length, uint* @binaryFormat, byte* @binary);

        public void GetProgramBinaryOES(uint @program, int @bufSize, int[] @length, uint[] @binaryFormat, byte[] @binary) {
            fixed (int *ptr_length = @length) {
                fixed (uint *ptr_binaryFormat = @binaryFormat) {
                    fixed (byte *ptr_binary = @binary) {
                        Native_GetProgramBinaryOES(@program, @bufSize, @ptr_length, @ptr_binaryFormat, @ptr_binary);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramEnvParameterIivNV")]
        static extern void Native_GetProgramEnvParameterIivNV(uint @target, uint @index, int* @params);

        public void GetProgramEnvParameterIivNV(uint @target, uint @index, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetProgramEnvParameterIivNV(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramEnvParameterIuivNV")]
        static extern void Native_GetProgramEnvParameterIuivNV(uint @target, uint @index, uint* @params);

        public void GetProgramEnvParameterIuivNV(uint @target, uint @index, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetProgramEnvParameterIuivNV(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramEnvParameterdvARB")]
        static extern void Native_GetProgramEnvParameterdvARB(uint @target, uint @index, double* @params);

        public void GetProgramEnvParameterdvARB(uint @target, uint @index, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetProgramEnvParameterdvARB(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramEnvParameterfvARB")]
        static extern void Native_GetProgramEnvParameterfvARB(uint @target, uint @index, float* @params);

        public void GetProgramEnvParameterfvARB(uint @target, uint @index, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetProgramEnvParameterfvARB(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramInfoLog")]
        static extern void Native_GetProgramInfoLog(uint @program, int @bufSize, int* @length, byte* @infoLog);

        public void GetProgramInfoLog(uint @program, int @bufSize, int[] @length, byte[] @infoLog) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_infoLog = @infoLog) {
                    Native_GetProgramInfoLog(@program, @bufSize, @ptr_length, @ptr_infoLog);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramInterfaceiv")]
        static extern void Native_GetProgramInterfaceiv(uint @program, GlProgramInterface @programInterface, GlProgramInterfacePName @pname, int* @params);

        public void GetProgramInterfaceiv(uint @program, GlProgramInterface @programInterface, GlProgramInterfacePName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetProgramInterfaceiv(@program, @programInterface, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramLocalParameterIivNV")]
        static extern void Native_GetProgramLocalParameterIivNV(uint @target, uint @index, int* @params);

        public void GetProgramLocalParameterIivNV(uint @target, uint @index, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetProgramLocalParameterIivNV(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramLocalParameterIuivNV")]
        static extern void Native_GetProgramLocalParameterIuivNV(uint @target, uint @index, uint* @params);

        public void GetProgramLocalParameterIuivNV(uint @target, uint @index, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetProgramLocalParameterIuivNV(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramLocalParameterdvARB")]
        static extern void Native_GetProgramLocalParameterdvARB(uint @target, uint @index, double* @params);

        public void GetProgramLocalParameterdvARB(uint @target, uint @index, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetProgramLocalParameterdvARB(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramLocalParameterfvARB")]
        static extern void Native_GetProgramLocalParameterfvARB(uint @target, uint @index, float* @params);

        public void GetProgramLocalParameterfvARB(uint @target, uint @index, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetProgramLocalParameterfvARB(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramNamedParameterdvNV")]
        static extern void Native_GetProgramNamedParameterdvNV(uint @id, int @len, byte* @name, double* @params);

        public void GetProgramNamedParameterdvNV(uint @id, int @len, byte[] @name, double[] @params) {
            fixed (byte *ptr_name = @name) {
                fixed (double *ptr_params = @params) {
                    Native_GetProgramNamedParameterdvNV(@id, @len, @ptr_name, @ptr_params);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramNamedParameterfvNV")]
        static extern void Native_GetProgramNamedParameterfvNV(uint @id, int @len, byte* @name, float* @params);

        public void GetProgramNamedParameterfvNV(uint @id, int @len, byte[] @name, float[] @params) {
            fixed (byte *ptr_name = @name) {
                fixed (float *ptr_params = @params) {
                    Native_GetProgramNamedParameterfvNV(@id, @len, @ptr_name, @ptr_params);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramParameterdvNV")]
        static extern void Native_GetProgramParameterdvNV(uint @target, uint @index, uint @pname, double* @params);

        public void GetProgramParameterdvNV(uint @target, uint @index, uint @pname, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetProgramParameterdvNV(@target, @index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramParameterfvNV")]
        static extern void Native_GetProgramParameterfvNV(uint @target, uint @index, uint @pname, float* @params);

        public void GetProgramParameterfvNV(uint @target, uint @index, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetProgramParameterfvNV(@target, @index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramPipelineInfoLog")]
        static extern void Native_GetProgramPipelineInfoLog(uint @pipeline, int @bufSize, int* @length, byte* @infoLog);

        public void GetProgramPipelineInfoLog(uint @pipeline, int @bufSize, int[] @length, byte[] @infoLog) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_infoLog = @infoLog) {
                    Native_GetProgramPipelineInfoLog(@pipeline, @bufSize, @ptr_length, @ptr_infoLog);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramPipelineInfoLogEXT")]
        static extern void Native_GetProgramPipelineInfoLogEXT(uint @pipeline, int @bufSize, int* @length, byte* @infoLog);

        public void GetProgramPipelineInfoLogEXT(uint @pipeline, int @bufSize, int[] @length, byte[] @infoLog) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_infoLog = @infoLog) {
                    Native_GetProgramPipelineInfoLogEXT(@pipeline, @bufSize, @ptr_length, @ptr_infoLog);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramPipelineiv")]
        static extern void Native_GetProgramPipelineiv(uint @pipeline, GlPipelineParameterName @pname, int* @params);

        public void GetProgramPipelineiv(uint @pipeline, GlPipelineParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetProgramPipelineiv(@pipeline, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramPipelineivEXT")]
        static extern void Native_GetProgramPipelineivEXT(uint @pipeline, GlPipelineParameterName @pname, int* @params);

        public void GetProgramPipelineivEXT(uint @pipeline, GlPipelineParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetProgramPipelineivEXT(@pipeline, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramResourceIndex")]
        static extern uint Native_GetProgramResourceIndex(uint @program, GlProgramInterface @programInterface, byte* @name);

        public uint GetProgramResourceIndex(uint @program, GlProgramInterface @programInterface, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetProgramResourceIndex(@program, @programInterface, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramResourceLocation")]
        static extern int Native_GetProgramResourceLocation(uint @program, GlProgramInterface @programInterface, byte* @name);

        public int GetProgramResourceLocation(uint @program, GlProgramInterface @programInterface, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetProgramResourceLocation(@program, @programInterface, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramResourceLocationIndex")]
        static extern int Native_GetProgramResourceLocationIndex(uint @program, GlProgramInterface @programInterface, byte* @name);

        public int GetProgramResourceLocationIndex(uint @program, GlProgramInterface @programInterface, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetProgramResourceLocationIndex(@program, @programInterface, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramResourceLocationIndexEXT")]
        static extern int Native_GetProgramResourceLocationIndexEXT(uint @program, GlProgramInterface @programInterface, byte* @name);

        public int GetProgramResourceLocationIndexEXT(uint @program, GlProgramInterface @programInterface, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetProgramResourceLocationIndexEXT(@program, @programInterface, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramResourceName")]
        static extern void Native_GetProgramResourceName(uint @program, GlProgramInterface @programInterface, uint @index, int @bufSize, int* @length, byte* @name);

        public void GetProgramResourceName(uint @program, GlProgramInterface @programInterface, uint @index, int @bufSize, int[] @length, byte[] @name) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_name = @name) {
                    Native_GetProgramResourceName(@program, @programInterface, @index, @bufSize, @ptr_length, @ptr_name);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramResourcefvNV")]
        static extern void Native_GetProgramResourcefvNV(uint @program, GlProgramInterface @programInterface, uint @index, int @propCount, uint* @props, int @bufSize, int* @length, float* @params);

        public void GetProgramResourcefvNV(uint @program, GlProgramInterface @programInterface, uint @index, int @propCount, uint[] @props, int @bufSize, int[] @length, float[] @params) {
            fixed (uint *ptr_props = @props) {
                fixed (int *ptr_length = @length) {
                    fixed (float *ptr_params = @params) {
                        Native_GetProgramResourcefvNV(@program, @programInterface, @index, @propCount, @ptr_props, @bufSize, @ptr_length, @ptr_params);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramResourceiv")]
        static extern void Native_GetProgramResourceiv(uint @program, GlProgramInterface @programInterface, uint @index, int @propCount, uint* @props, int @bufSize, int* @length, int* @params);

        public void GetProgramResourceiv(uint @program, GlProgramInterface @programInterface, uint @index, int @propCount, uint[] @props, int @bufSize, int[] @length, int[] @params) {
            fixed (uint *ptr_props = @props) {
                fixed (int *ptr_length = @length) {
                    fixed (int *ptr_params = @params) {
                        Native_GetProgramResourceiv(@program, @programInterface, @index, @propCount, @ptr_props, @bufSize, @ptr_length, @ptr_params);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramStageiv")]
        static extern void Native_GetProgramStageiv(uint @program, GlShaderType @shadertype, GlProgramStagePName @pname, int* @values);

        public void GetProgramStageiv(uint @program, GlShaderType @shadertype, GlProgramStagePName @pname, int[] @values) {
            fixed (int *ptr_values = @values) {
                Native_GetProgramStageiv(@program, @shadertype, @pname, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramStringARB")]
        static extern void Native_GetProgramStringARB(uint @target, uint @pname, byte* @string);

        public void GetProgramStringARB(uint @target, uint @pname, byte[] @string) {
            fixed (byte *ptr_string = @string) {
                Native_GetProgramStringARB(@target, @pname, @ptr_string);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramStringNV")]
        static extern void Native_GetProgramStringNV(uint @id, uint @pname, byte* @program);

        public void GetProgramStringNV(uint @id, uint @pname, byte[] @program) {
            fixed (byte *ptr_program = @program) {
                Native_GetProgramStringNV(@id, @pname, @ptr_program);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramSubroutineParameteruivNV")]
        static extern void Native_GetProgramSubroutineParameteruivNV(uint @target, uint @index, uint* @param);

        public void GetProgramSubroutineParameteruivNV(uint @target, uint @index, uint[] @param) {
            fixed (uint *ptr_param = @param) {
                Native_GetProgramSubroutineParameteruivNV(@target, @index, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramiv")]
        static extern void Native_GetProgramiv(uint @program, GlProgramPropertyARB @pname, int* @params);

        public void GetProgramiv(uint @program, GlProgramPropertyARB @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetProgramiv(@program, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramivARB")]
        static extern void Native_GetProgramivARB(uint @target, GlProgramPropertyARB @pname, int* @params);

        public void GetProgramivARB(uint @target, GlProgramPropertyARB @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetProgramivARB(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetProgramivNV")]
        static extern void Native_GetProgramivNV(uint @id, uint @pname, int* @params);

        public void GetProgramivNV(uint @id, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetProgramivNV(@id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryBufferObjecti64v")]
        static extern void Native_GetQueryBufferObjecti64v(uint @id, uint @buffer, GlQueryObjectParameterName @pname, long @offset);

        public void GetQueryBufferObjecti64v(uint @id, uint @buffer, GlQueryObjectParameterName @pname, long @offset) {
            Native_GetQueryBufferObjecti64v(@id, @buffer, @pname, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryBufferObjectiv")]
        static extern void Native_GetQueryBufferObjectiv(uint @id, uint @buffer, GlQueryObjectParameterName @pname, long @offset);

        public void GetQueryBufferObjectiv(uint @id, uint @buffer, GlQueryObjectParameterName @pname, long @offset) {
            Native_GetQueryBufferObjectiv(@id, @buffer, @pname, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryBufferObjectui64v")]
        static extern void Native_GetQueryBufferObjectui64v(uint @id, uint @buffer, GlQueryObjectParameterName @pname, long @offset);

        public void GetQueryBufferObjectui64v(uint @id, uint @buffer, GlQueryObjectParameterName @pname, long @offset) {
            Native_GetQueryBufferObjectui64v(@id, @buffer, @pname, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryBufferObjectuiv")]
        static extern void Native_GetQueryBufferObjectuiv(uint @id, uint @buffer, GlQueryObjectParameterName @pname, long @offset);

        public void GetQueryBufferObjectuiv(uint @id, uint @buffer, GlQueryObjectParameterName @pname, long @offset) {
            Native_GetQueryBufferObjectuiv(@id, @buffer, @pname, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryIndexediv")]
        static extern void Native_GetQueryIndexediv(uint @target, uint @index, GlQueryParameterName @pname, int* @params);

        public void GetQueryIndexediv(uint @target, uint @index, GlQueryParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetQueryIndexediv(@target, @index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryObjecti64v")]
        static extern void Native_GetQueryObjecti64v(uint @id, GlQueryObjectParameterName @pname, long* @params);

        public void GetQueryObjecti64v(uint @id, GlQueryObjectParameterName @pname, long[] @params) {
            fixed (long *ptr_params = @params) {
                Native_GetQueryObjecti64v(@id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryObjecti64vEXT")]
        static extern void Native_GetQueryObjecti64vEXT(uint @id, GlQueryObjectParameterName @pname, long* @params);

        public void GetQueryObjecti64vEXT(uint @id, GlQueryObjectParameterName @pname, long[] @params) {
            fixed (long *ptr_params = @params) {
                Native_GetQueryObjecti64vEXT(@id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryObjectiv")]
        static extern void Native_GetQueryObjectiv(uint @id, GlQueryObjectParameterName @pname, int* @params);

        public void GetQueryObjectiv(uint @id, GlQueryObjectParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetQueryObjectiv(@id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryObjectivARB")]
        static extern void Native_GetQueryObjectivARB(uint @id, GlQueryObjectParameterName @pname, int* @params);

        public void GetQueryObjectivARB(uint @id, GlQueryObjectParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetQueryObjectivARB(@id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryObjectivEXT")]
        static extern void Native_GetQueryObjectivEXT(uint @id, GlQueryObjectParameterName @pname, int* @params);

        public void GetQueryObjectivEXT(uint @id, GlQueryObjectParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetQueryObjectivEXT(@id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryObjectui64v")]
        static extern void Native_GetQueryObjectui64v(uint @id, GlQueryObjectParameterName @pname, ulong* @params);

        public void GetQueryObjectui64v(uint @id, GlQueryObjectParameterName @pname, ulong[] @params) {
            fixed (ulong *ptr_params = @params) {
                Native_GetQueryObjectui64v(@id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryObjectui64vEXT")]
        static extern void Native_GetQueryObjectui64vEXT(uint @id, GlQueryObjectParameterName @pname, ulong* @params);

        public void GetQueryObjectui64vEXT(uint @id, GlQueryObjectParameterName @pname, ulong[] @params) {
            fixed (ulong *ptr_params = @params) {
                Native_GetQueryObjectui64vEXT(@id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryObjectuiv")]
        static extern void Native_GetQueryObjectuiv(uint @id, GlQueryObjectParameterName @pname, uint* @params);

        public void GetQueryObjectuiv(uint @id, GlQueryObjectParameterName @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetQueryObjectuiv(@id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryObjectuivARB")]
        static extern void Native_GetQueryObjectuivARB(uint @id, GlQueryObjectParameterName @pname, uint* @params);

        public void GetQueryObjectuivARB(uint @id, GlQueryObjectParameterName @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetQueryObjectuivARB(@id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryObjectuivEXT")]
        static extern void Native_GetQueryObjectuivEXT(uint @id, GlQueryObjectParameterName @pname, uint* @params);

        public void GetQueryObjectuivEXT(uint @id, GlQueryObjectParameterName @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetQueryObjectuivEXT(@id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryiv")]
        static extern void Native_GetQueryiv(GlQueryTarget @target, GlQueryParameterName @pname, int* @params);

        public void GetQueryiv(GlQueryTarget @target, GlQueryParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetQueryiv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryivARB")]
        static extern void Native_GetQueryivARB(GlQueryTarget @target, GlQueryParameterName @pname, int* @params);

        public void GetQueryivARB(GlQueryTarget @target, GlQueryParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetQueryivARB(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetQueryivEXT")]
        static extern void Native_GetQueryivEXT(GlQueryTarget @target, GlQueryParameterName @pname, int* @params);

        public void GetQueryivEXT(GlQueryTarget @target, GlQueryParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetQueryivEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetRenderbufferParameteriv")]
        static extern void Native_GetRenderbufferParameteriv(GlRenderbufferTarget @target, GlRenderbufferParameterName @pname, int* @params);

        public void GetRenderbufferParameteriv(GlRenderbufferTarget @target, GlRenderbufferParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetRenderbufferParameteriv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetRenderbufferParameterivEXT")]
        static extern void Native_GetRenderbufferParameterivEXT(GlRenderbufferTarget @target, GlRenderbufferParameterName @pname, int* @params);

        public void GetRenderbufferParameterivEXT(GlRenderbufferTarget @target, GlRenderbufferParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetRenderbufferParameterivEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetRenderbufferParameterivOES")]
        static extern void Native_GetRenderbufferParameterivOES(GlRenderbufferTarget @target, GlRenderbufferParameterName @pname, int* @params);

        public void GetRenderbufferParameterivOES(GlRenderbufferTarget @target, GlRenderbufferParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetRenderbufferParameterivOES(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSamplerParameterIiv")]
        static extern void Native_GetSamplerParameterIiv(uint @sampler, GlSamplerParameterName @pname, int* @params);

        public void GetSamplerParameterIiv(uint @sampler, GlSamplerParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetSamplerParameterIiv(@sampler, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSamplerParameterIivEXT")]
        static extern void Native_GetSamplerParameterIivEXT(uint @sampler, GlSamplerParameterName @pname, int* @params);

        public void GetSamplerParameterIivEXT(uint @sampler, GlSamplerParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetSamplerParameterIivEXT(@sampler, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSamplerParameterIivOES")]
        static extern void Native_GetSamplerParameterIivOES(uint @sampler, GlSamplerParameterName @pname, int* @params);

        public void GetSamplerParameterIivOES(uint @sampler, GlSamplerParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetSamplerParameterIivOES(@sampler, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSamplerParameterIuiv")]
        static extern void Native_GetSamplerParameterIuiv(uint @sampler, GlSamplerParameterName @pname, uint* @params);

        public void GetSamplerParameterIuiv(uint @sampler, GlSamplerParameterName @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetSamplerParameterIuiv(@sampler, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSamplerParameterIuivEXT")]
        static extern void Native_GetSamplerParameterIuivEXT(uint @sampler, GlSamplerParameterName @pname, uint* @params);

        public void GetSamplerParameterIuivEXT(uint @sampler, GlSamplerParameterName @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetSamplerParameterIuivEXT(@sampler, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSamplerParameterIuivOES")]
        static extern void Native_GetSamplerParameterIuivOES(uint @sampler, GlSamplerParameterName @pname, uint* @params);

        public void GetSamplerParameterIuivOES(uint @sampler, GlSamplerParameterName @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetSamplerParameterIuivOES(@sampler, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSamplerParameterfv")]
        static extern void Native_GetSamplerParameterfv(uint @sampler, GlSamplerParameterName @pname, float* @params);

        public void GetSamplerParameterfv(uint @sampler, GlSamplerParameterName @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetSamplerParameterfv(@sampler, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSamplerParameteriv")]
        static extern void Native_GetSamplerParameteriv(uint @sampler, GlSamplerParameterName @pname, int* @params);

        public void GetSamplerParameteriv(uint @sampler, GlSamplerParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetSamplerParameteriv(@sampler, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSemaphoreParameterui64vEXT")]
        static extern void Native_GetSemaphoreParameterui64vEXT(uint @semaphore, GlSemaphoreParameterName @pname, ulong* @params);

        public void GetSemaphoreParameterui64vEXT(uint @semaphore, GlSemaphoreParameterName @pname, ulong[] @params) {
            fixed (ulong *ptr_params = @params) {
                Native_GetSemaphoreParameterui64vEXT(@semaphore, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSeparableFilter")]
        static extern void Native_GetSeparableFilter(GlSeparableTargetEXT @target, GlPixelFormat @format, GlPixelType @type, byte* @row, byte* @column, byte* @span);

        public void GetSeparableFilter(GlSeparableTargetEXT @target, GlPixelFormat @format, GlPixelType @type, byte[] @row, byte[] @column, byte[] @span) {
            fixed (byte *ptr_row = @row) {
                fixed (byte *ptr_column = @column) {
                    fixed (byte *ptr_span = @span) {
                        Native_GetSeparableFilter(@target, @format, @type, @ptr_row, @ptr_column, @ptr_span);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSeparableFilterEXT")]
        static extern void Native_GetSeparableFilterEXT(GlSeparableTargetEXT @target, GlPixelFormat @format, GlPixelType @type, byte* @row, byte* @column, byte* @span);

        public void GetSeparableFilterEXT(GlSeparableTargetEXT @target, GlPixelFormat @format, GlPixelType @type, byte[] @row, byte[] @column, byte[] @span) {
            fixed (byte *ptr_row = @row) {
                fixed (byte *ptr_column = @column) {
                    fixed (byte *ptr_span = @span) {
                        Native_GetSeparableFilterEXT(@target, @format, @type, @ptr_row, @ptr_column, @ptr_span);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetShaderInfoLog")]
        static extern void Native_GetShaderInfoLog(uint @shader, int @bufSize, int* @length, byte* @infoLog);

        public void GetShaderInfoLog(uint @shader, int @bufSize, int[] @length, byte[] @infoLog) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_infoLog = @infoLog) {
                    Native_GetShaderInfoLog(@shader, @bufSize, @ptr_length, @ptr_infoLog);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetShaderPrecisionFormat")]
        static extern void Native_GetShaderPrecisionFormat(GlShaderType @shadertype, GlPrecisionType @precisiontype, int* @range, int* @precision);

        public void GetShaderPrecisionFormat(GlShaderType @shadertype, GlPrecisionType @precisiontype, int[] @range, int[] @precision) {
            fixed (int *ptr_range = @range) {
                fixed (int *ptr_precision = @precision) {
                    Native_GetShaderPrecisionFormat(@shadertype, @precisiontype, @ptr_range, @ptr_precision);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetShaderSource")]
        static extern void Native_GetShaderSource(uint @shader, int @bufSize, int* @length, byte* @source);

        public void GetShaderSource(uint @shader, int @bufSize, int[] @length, byte[] @source) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_source = @source) {
                    Native_GetShaderSource(@shader, @bufSize, @ptr_length, @ptr_source);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetShaderSourceARB")]
        static extern void Native_GetShaderSourceARB(IntPtr @obj, int @maxLength, int* @length, byte* @source);

        public void GetShaderSourceARB(IntPtr @obj, int @maxLength, int[] @length, byte[] @source) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_source = @source) {
                    Native_GetShaderSourceARB(@obj, @maxLength, @ptr_length, @ptr_source);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetShaderiv")]
        static extern void Native_GetShaderiv(uint @shader, GlShaderParameterName @pname, int* @params);

        public void GetShaderiv(uint @shader, GlShaderParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetShaderiv(@shader, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSharpenTexFuncSGIS")]
        static extern void Native_GetSharpenTexFuncSGIS(GlTextureTarget @target, float* @points);

        public void GetSharpenTexFuncSGIS(GlTextureTarget @target, float[] @points) {
            fixed (float *ptr_points = @points) {
                Native_GetSharpenTexFuncSGIS(@target, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetStageIndexNV")]
        static extern ushort Native_GetStageIndexNV(GlShaderType @shadertype);

        public ushort GetStageIndexNV(GlShaderType @shadertype) {
            return Native_GetStageIndexNV(@shadertype);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetString")]
        static extern byte Native_GetString(GlStringName @name);

        public byte GetString(GlStringName @name) {
            return Native_GetString(@name);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetStringi")]
        static extern byte Native_GetStringi(GlStringName @name, uint @index);

        public byte GetStringi(GlStringName @name, uint @index) {
            return Native_GetStringi(@name, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSubroutineIndex")]
        static extern uint Native_GetSubroutineIndex(uint @program, GlShaderType @shadertype, byte* @name);

        public uint GetSubroutineIndex(uint @program, GlShaderType @shadertype, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetSubroutineIndex(@program, @shadertype, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSubroutineUniformLocation")]
        static extern int Native_GetSubroutineUniformLocation(uint @program, GlShaderType @shadertype, byte* @name);

        public int GetSubroutineUniformLocation(uint @program, GlShaderType @shadertype, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetSubroutineUniformLocation(@program, @shadertype, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSynciv")]
        static extern void Native_GetSynciv(IntPtr @sync, GlSyncParameterName @pname, int @bufSize, int* @length, int* @values);

        public void GetSynciv(IntPtr @sync, GlSyncParameterName @pname, int @bufSize, int[] @length, int[] @values) {
            fixed (int *ptr_length = @length) {
                fixed (int *ptr_values = @values) {
                    Native_GetSynciv(@sync, @pname, @bufSize, @ptr_length, @ptr_values);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetSyncivAPPLE")]
        static extern void Native_GetSyncivAPPLE(IntPtr @sync, GlSyncParameterName @pname, int @bufSize, int* @length, int* @values);

        public void GetSyncivAPPLE(IntPtr @sync, GlSyncParameterName @pname, int @bufSize, int[] @length, int[] @values) {
            fixed (int *ptr_length = @length) {
                fixed (int *ptr_values = @values) {
                    Native_GetSyncivAPPLE(@sync, @pname, @bufSize, @ptr_length, @ptr_values);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexBumpParameterfvATI")]
        static extern void Native_GetTexBumpParameterfvATI(uint @pname, float* @param);

        public void GetTexBumpParameterfvATI(uint @pname, float[] @param) {
            fixed (float *ptr_param = @param) {
                Native_GetTexBumpParameterfvATI(@pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexBumpParameterivATI")]
        static extern void Native_GetTexBumpParameterivATI(uint @pname, int* @param);

        public void GetTexBumpParameterivATI(uint @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_GetTexBumpParameterivATI(@pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexEnvfv")]
        static extern void Native_GetTexEnvfv(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, float* @params);

        public void GetTexEnvfv(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetTexEnvfv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexEnviv")]
        static extern void Native_GetTexEnviv(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int* @params);

        public void GetTexEnviv(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTexEnviv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexEnvxv")]
        static extern void Native_GetTexEnvxv(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int* @params);

        public void GetTexEnvxv(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTexEnvxv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexEnvxvOES")]
        static extern void Native_GetTexEnvxvOES(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int* @params);

        public void GetTexEnvxvOES(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTexEnvxvOES(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexFilterFuncSGIS")]
        static extern void Native_GetTexFilterFuncSGIS(GlTextureTarget @target, uint @filter, float* @weights);

        public void GetTexFilterFuncSGIS(GlTextureTarget @target, uint @filter, float[] @weights) {
            fixed (float *ptr_weights = @weights) {
                Native_GetTexFilterFuncSGIS(@target, @filter, @ptr_weights);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexGendv")]
        static extern void Native_GetTexGendv(GlTextureCoordName @coord, GlTextureGenParameter @pname, double* @params);

        public void GetTexGendv(GlTextureCoordName @coord, GlTextureGenParameter @pname, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetTexGendv(@coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexGenfv")]
        static extern void Native_GetTexGenfv(GlTextureCoordName @coord, GlTextureGenParameter @pname, float* @params);

        public void GetTexGenfv(GlTextureCoordName @coord, GlTextureGenParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetTexGenfv(@coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexGenfvOES")]
        static extern void Native_GetTexGenfvOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, float* @params);

        public void GetTexGenfvOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetTexGenfvOES(@coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexGeniv")]
        static extern void Native_GetTexGeniv(GlTextureCoordName @coord, GlTextureGenParameter @pname, int* @params);

        public void GetTexGeniv(GlTextureCoordName @coord, GlTextureGenParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTexGeniv(@coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexGenivOES")]
        static extern void Native_GetTexGenivOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, int* @params);

        public void GetTexGenivOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTexGenivOES(@coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexGenxvOES")]
        static extern void Native_GetTexGenxvOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, int* @params);

        public void GetTexGenxvOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTexGenxvOES(@coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexImage")]
        static extern void Native_GetTexImage(GlTextureTarget @target, int @level, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void GetTexImage(GlTextureTarget @target, int @level, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_GetTexImage(@target, @level, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexLevelParameterfv")]
        static extern void Native_GetTexLevelParameterfv(GlTextureTarget @target, int @level, GlGetTextureParameter @pname, float* @params);

        public void GetTexLevelParameterfv(GlTextureTarget @target, int @level, GlGetTextureParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetTexLevelParameterfv(@target, @level, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexLevelParameteriv")]
        static extern void Native_GetTexLevelParameteriv(GlTextureTarget @target, int @level, GlGetTextureParameter @pname, int* @params);

        public void GetTexLevelParameteriv(GlTextureTarget @target, int @level, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTexLevelParameteriv(@target, @level, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexLevelParameterxvOES")]
        static extern void Native_GetTexLevelParameterxvOES(GlTextureTarget @target, int @level, GlGetTextureParameter @pname, int* @params);

        public void GetTexLevelParameterxvOES(GlTextureTarget @target, int @level, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTexLevelParameterxvOES(@target, @level, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexParameterIiv")]
        static extern void Native_GetTexParameterIiv(GlTextureTarget @target, GlGetTextureParameter @pname, int* @params);

        public void GetTexParameterIiv(GlTextureTarget @target, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTexParameterIiv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexParameterIivEXT")]
        static extern void Native_GetTexParameterIivEXT(GlTextureTarget @target, GlGetTextureParameter @pname, int* @params);

        public void GetTexParameterIivEXT(GlTextureTarget @target, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTexParameterIivEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexParameterIivOES")]
        static extern void Native_GetTexParameterIivOES(GlTextureTarget @target, GlGetTextureParameter @pname, int* @params);

        public void GetTexParameterIivOES(GlTextureTarget @target, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTexParameterIivOES(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexParameterIuiv")]
        static extern void Native_GetTexParameterIuiv(GlTextureTarget @target, GlGetTextureParameter @pname, uint* @params);

        public void GetTexParameterIuiv(GlTextureTarget @target, GlGetTextureParameter @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetTexParameterIuiv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexParameterIuivEXT")]
        static extern void Native_GetTexParameterIuivEXT(GlTextureTarget @target, GlGetTextureParameter @pname, uint* @params);

        public void GetTexParameterIuivEXT(GlTextureTarget @target, GlGetTextureParameter @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetTexParameterIuivEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexParameterIuivOES")]
        static extern void Native_GetTexParameterIuivOES(GlTextureTarget @target, GlGetTextureParameter @pname, uint* @params);

        public void GetTexParameterIuivOES(GlTextureTarget @target, GlGetTextureParameter @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetTexParameterIuivOES(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexParameterPointervAPPLE")]
        static extern void Native_GetTexParameterPointervAPPLE(uint @target, uint @pname, byte** @params);

        public void GetTexParameterPointervAPPLE(uint @target, uint @pname, byte[][] @params) {
            IntPtr ptr_params = Marshal.AllocHGlobal(@params.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_params, @params, (void **) ptr_params.ToPointer(), 0, __fixedLocals => {
                    Native_GetTexParameterPointervAPPLE(@target, @pname, (byte **) ptr_params.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexParameterfv")]
        static extern void Native_GetTexParameterfv(GlTextureTarget @target, GlGetTextureParameter @pname, float* @params);

        public void GetTexParameterfv(GlTextureTarget @target, GlGetTextureParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetTexParameterfv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexParameteriv")]
        static extern void Native_GetTexParameteriv(GlTextureTarget @target, GlGetTextureParameter @pname, int* @params);

        public void GetTexParameteriv(GlTextureTarget @target, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTexParameteriv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexParameterxv")]
        static extern void Native_GetTexParameterxv(GlTextureTarget @target, GlGetTextureParameter @pname, int* @params);

        public void GetTexParameterxv(GlTextureTarget @target, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTexParameterxv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTexParameterxvOES")]
        static extern void Native_GetTexParameterxvOES(GlTextureTarget @target, GlGetTextureParameter @pname, int* @params);

        public void GetTexParameterxvOES(GlTextureTarget @target, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTexParameterxvOES(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureHandleARB")]
        static extern ulong Native_GetTextureHandleARB(uint @texture);

        public ulong GetTextureHandleARB(uint @texture) {
            return Native_GetTextureHandleARB(@texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureHandleIMG")]
        static extern ulong Native_GetTextureHandleIMG(uint @texture);

        public ulong GetTextureHandleIMG(uint @texture) {
            return Native_GetTextureHandleIMG(@texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureHandleNV")]
        static extern ulong Native_GetTextureHandleNV(uint @texture);

        public ulong GetTextureHandleNV(uint @texture) {
            return Native_GetTextureHandleNV(@texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureImage")]
        static extern void Native_GetTextureImage(uint @texture, int @level, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @pixels);

        public void GetTextureImage(uint @texture, int @level, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_GetTextureImage(@texture, @level, @format, @type, @bufSize, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureImageEXT")]
        static extern void Native_GetTextureImageEXT(uint @texture, GlTextureTarget @target, int @level, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void GetTextureImageEXT(uint @texture, GlTextureTarget @target, int @level, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_GetTextureImageEXT(@texture, @target, @level, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureLevelParameterfv")]
        static extern void Native_GetTextureLevelParameterfv(uint @texture, int @level, GlGetTextureParameter @pname, float* @params);

        public void GetTextureLevelParameterfv(uint @texture, int @level, GlGetTextureParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetTextureLevelParameterfv(@texture, @level, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureLevelParameterfvEXT")]
        static extern void Native_GetTextureLevelParameterfvEXT(uint @texture, GlTextureTarget @target, int @level, GlGetTextureParameter @pname, float* @params);

        public void GetTextureLevelParameterfvEXT(uint @texture, GlTextureTarget @target, int @level, GlGetTextureParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetTextureLevelParameterfvEXT(@texture, @target, @level, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureLevelParameteriv")]
        static extern void Native_GetTextureLevelParameteriv(uint @texture, int @level, GlGetTextureParameter @pname, int* @params);

        public void GetTextureLevelParameteriv(uint @texture, int @level, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTextureLevelParameteriv(@texture, @level, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureLevelParameterivEXT")]
        static extern void Native_GetTextureLevelParameterivEXT(uint @texture, GlTextureTarget @target, int @level, GlGetTextureParameter @pname, int* @params);

        public void GetTextureLevelParameterivEXT(uint @texture, GlTextureTarget @target, int @level, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTextureLevelParameterivEXT(@texture, @target, @level, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureParameterIiv")]
        static extern void Native_GetTextureParameterIiv(uint @texture, GlGetTextureParameter @pname, int* @params);

        public void GetTextureParameterIiv(uint @texture, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTextureParameterIiv(@texture, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureParameterIivEXT")]
        static extern void Native_GetTextureParameterIivEXT(uint @texture, GlTextureTarget @target, GlGetTextureParameter @pname, int* @params);

        public void GetTextureParameterIivEXT(uint @texture, GlTextureTarget @target, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTextureParameterIivEXT(@texture, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureParameterIuiv")]
        static extern void Native_GetTextureParameterIuiv(uint @texture, GlGetTextureParameter @pname, uint* @params);

        public void GetTextureParameterIuiv(uint @texture, GlGetTextureParameter @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetTextureParameterIuiv(@texture, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureParameterIuivEXT")]
        static extern void Native_GetTextureParameterIuivEXT(uint @texture, GlTextureTarget @target, GlGetTextureParameter @pname, uint* @params);

        public void GetTextureParameterIuivEXT(uint @texture, GlTextureTarget @target, GlGetTextureParameter @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetTextureParameterIuivEXT(@texture, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureParameterfv")]
        static extern void Native_GetTextureParameterfv(uint @texture, GlGetTextureParameter @pname, float* @params);

        public void GetTextureParameterfv(uint @texture, GlGetTextureParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetTextureParameterfv(@texture, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureParameterfvEXT")]
        static extern void Native_GetTextureParameterfvEXT(uint @texture, GlTextureTarget @target, GlGetTextureParameter @pname, float* @params);

        public void GetTextureParameterfvEXT(uint @texture, GlTextureTarget @target, GlGetTextureParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetTextureParameterfvEXT(@texture, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureParameteriv")]
        static extern void Native_GetTextureParameteriv(uint @texture, GlGetTextureParameter @pname, int* @params);

        public void GetTextureParameteriv(uint @texture, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTextureParameteriv(@texture, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureParameterivEXT")]
        static extern void Native_GetTextureParameterivEXT(uint @texture, GlTextureTarget @target, GlGetTextureParameter @pname, int* @params);

        public void GetTextureParameterivEXT(uint @texture, GlTextureTarget @target, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTextureParameterivEXT(@texture, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureSamplerHandleARB")]
        static extern ulong Native_GetTextureSamplerHandleARB(uint @texture, uint @sampler);

        public ulong GetTextureSamplerHandleARB(uint @texture, uint @sampler) {
            return Native_GetTextureSamplerHandleARB(@texture, @sampler);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureSamplerHandleIMG")]
        static extern ulong Native_GetTextureSamplerHandleIMG(uint @texture, uint @sampler);

        public ulong GetTextureSamplerHandleIMG(uint @texture, uint @sampler) {
            return Native_GetTextureSamplerHandleIMG(@texture, @sampler);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureSamplerHandleNV")]
        static extern ulong Native_GetTextureSamplerHandleNV(uint @texture, uint @sampler);

        public ulong GetTextureSamplerHandleNV(uint @texture, uint @sampler) {
            return Native_GetTextureSamplerHandleNV(@texture, @sampler);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTextureSubImage")]
        static extern void Native_GetTextureSubImage(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @pixels);

        public void GetTextureSubImage(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_GetTextureSubImage(@texture, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @type, @bufSize, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTrackMatrixivNV")]
        static extern void Native_GetTrackMatrixivNV(uint @target, uint @address, uint @pname, int* @params);

        public void GetTrackMatrixivNV(uint @target, uint @address, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetTrackMatrixivNV(@target, @address, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTransformFeedbackVarying")]
        static extern void Native_GetTransformFeedbackVarying(uint @program, uint @index, int @bufSize, int* @length, int* @size, uint* @type, byte* @name);

        public void GetTransformFeedbackVarying(uint @program, uint @index, int @bufSize, int[] @length, int[] @size, uint[] @type, byte[] @name) {
            fixed (int *ptr_length = @length) {
                fixed (int *ptr_size = @size) {
                    fixed (uint *ptr_type = @type) {
                        fixed (byte *ptr_name = @name) {
                            Native_GetTransformFeedbackVarying(@program, @index, @bufSize, @ptr_length, @ptr_size, @ptr_type, @ptr_name);
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTransformFeedbackVaryingEXT")]
        static extern void Native_GetTransformFeedbackVaryingEXT(uint @program, uint @index, int @bufSize, int* @length, int* @size, uint* @type, byte* @name);

        public void GetTransformFeedbackVaryingEXT(uint @program, uint @index, int @bufSize, int[] @length, int[] @size, uint[] @type, byte[] @name) {
            fixed (int *ptr_length = @length) {
                fixed (int *ptr_size = @size) {
                    fixed (uint *ptr_type = @type) {
                        fixed (byte *ptr_name = @name) {
                            Native_GetTransformFeedbackVaryingEXT(@program, @index, @bufSize, @ptr_length, @ptr_size, @ptr_type, @ptr_name);
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTransformFeedbackVaryingNV")]
        static extern void Native_GetTransformFeedbackVaryingNV(uint @program, uint @index, int* @location);

        public void GetTransformFeedbackVaryingNV(uint @program, uint @index, int[] @location) {
            fixed (int *ptr_location = @location) {
                Native_GetTransformFeedbackVaryingNV(@program, @index, @ptr_location);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTransformFeedbacki64_v")]
        static extern void Native_GetTransformFeedbacki64_v(uint @xfb, GlTransformFeedbackPName @pname, uint @index, long* @param);

        public void GetTransformFeedbacki64_v(uint @xfb, GlTransformFeedbackPName @pname, uint @index, long[] @param) {
            fixed (long *ptr_param = @param) {
                Native_GetTransformFeedbacki64_v(@xfb, @pname, @index, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTransformFeedbacki_v")]
        static extern void Native_GetTransformFeedbacki_v(uint @xfb, GlTransformFeedbackPName @pname, uint @index, int* @param);

        public void GetTransformFeedbacki_v(uint @xfb, GlTransformFeedbackPName @pname, uint @index, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_GetTransformFeedbacki_v(@xfb, @pname, @index, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTransformFeedbackiv")]
        static extern void Native_GetTransformFeedbackiv(uint @xfb, GlTransformFeedbackPName @pname, int* @param);

        public void GetTransformFeedbackiv(uint @xfb, GlTransformFeedbackPName @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_GetTransformFeedbackiv(@xfb, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetTranslatedShaderSourceANGLE")]
        static extern void Native_GetTranslatedShaderSourceANGLE(uint @shader, int @bufsize, int* @length, byte* @source);

        public void GetTranslatedShaderSourceANGLE(uint @shader, int @bufsize, int[] @length, byte[] @source) {
            fixed (int *ptr_length = @length) {
                fixed (byte *ptr_source = @source) {
                    Native_GetTranslatedShaderSourceANGLE(@shader, @bufsize, @ptr_length, @ptr_source);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformBlockIndex")]
        static extern uint Native_GetUniformBlockIndex(uint @program, byte* @uniformBlockName);

        public uint GetUniformBlockIndex(uint @program, byte[] @uniformBlockName) {
            fixed (byte *ptr_uniformBlockName = @uniformBlockName) {
                return Native_GetUniformBlockIndex(@program, @ptr_uniformBlockName);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformBufferSizeEXT")]
        static extern int Native_GetUniformBufferSizeEXT(uint @program, int @location);

        public int GetUniformBufferSizeEXT(uint @program, int @location) {
            return Native_GetUniformBufferSizeEXT(@program, @location);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformIndices")]
        static extern void Native_GetUniformIndices(uint @program, int @uniformCount, byte** @uniformNames, uint* @uniformIndices);

        public void GetUniformIndices(uint @program, int @uniformCount, byte[][] @uniformNames, uint[] @uniformIndices) {
            IntPtr ptr_uniformNames = Marshal.AllocHGlobal(@uniformNames.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_uniformNames, @uniformNames, (void **) ptr_uniformNames.ToPointer(), 0, __fixedLocals => {
                    fixed (uint *ptr_uniformIndices = @uniformIndices) {
                        Native_GetUniformIndices(@program, @uniformCount, (byte **) ptr_uniformNames.ToPointer(), @ptr_uniformIndices);
                    }
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_uniformNames);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformLocation")]
        static extern int Native_GetUniformLocation(uint @program, byte* @name);

        public int GetUniformLocation(uint @program, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetUniformLocation(@program, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformLocationARB")]
        static extern int Native_GetUniformLocationARB(IntPtr @programObj, byte* @name);

        public int GetUniformLocationARB(IntPtr @programObj, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetUniformLocationARB(@programObj, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformOffsetEXT")]
        static extern long Native_GetUniformOffsetEXT(uint @program, int @location);

        public long GetUniformOffsetEXT(uint @program, int @location) {
            return Native_GetUniformOffsetEXT(@program, @location);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformSubroutineuiv")]
        static extern void Native_GetUniformSubroutineuiv(GlShaderType @shadertype, int @location, uint* @params);

        public void GetUniformSubroutineuiv(GlShaderType @shadertype, int @location, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetUniformSubroutineuiv(@shadertype, @location, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformdv")]
        static extern void Native_GetUniformdv(uint @program, int @location, double* @params);

        public void GetUniformdv(uint @program, int @location, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetUniformdv(@program, @location, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformfv")]
        static extern void Native_GetUniformfv(uint @program, int @location, float* @params);

        public void GetUniformfv(uint @program, int @location, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetUniformfv(@program, @location, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformfvARB")]
        static extern void Native_GetUniformfvARB(IntPtr @programObj, int @location, float* @params);

        public void GetUniformfvARB(IntPtr @programObj, int @location, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetUniformfvARB(@programObj, @location, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformi64vARB")]
        static extern void Native_GetUniformi64vARB(uint @program, int @location, long* @params);

        public void GetUniformi64vARB(uint @program, int @location, long[] @params) {
            fixed (long *ptr_params = @params) {
                Native_GetUniformi64vARB(@program, @location, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformi64vNV")]
        static extern void Native_GetUniformi64vNV(uint @program, int @location, long* @params);

        public void GetUniformi64vNV(uint @program, int @location, long[] @params) {
            fixed (long *ptr_params = @params) {
                Native_GetUniformi64vNV(@program, @location, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformiv")]
        static extern void Native_GetUniformiv(uint @program, int @location, int* @params);

        public void GetUniformiv(uint @program, int @location, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetUniformiv(@program, @location, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformivARB")]
        static extern void Native_GetUniformivARB(IntPtr @programObj, int @location, int* @params);

        public void GetUniformivARB(IntPtr @programObj, int @location, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetUniformivARB(@programObj, @location, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformui64vARB")]
        static extern void Native_GetUniformui64vARB(uint @program, int @location, ulong* @params);

        public void GetUniformui64vARB(uint @program, int @location, ulong[] @params) {
            fixed (ulong *ptr_params = @params) {
                Native_GetUniformui64vARB(@program, @location, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformui64vNV")]
        static extern void Native_GetUniformui64vNV(uint @program, int @location, ulong* @params);

        public void GetUniformui64vNV(uint @program, int @location, ulong[] @params) {
            fixed (ulong *ptr_params = @params) {
                Native_GetUniformui64vNV(@program, @location, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformuiv")]
        static extern void Native_GetUniformuiv(uint @program, int @location, uint* @params);

        public void GetUniformuiv(uint @program, int @location, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetUniformuiv(@program, @location, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUniformuivEXT")]
        static extern void Native_GetUniformuivEXT(uint @program, int @location, uint* @params);

        public void GetUniformuivEXT(uint @program, int @location, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetUniformuivEXT(@program, @location, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUnsignedBytevEXT")]
        static extern void Native_GetUnsignedBytevEXT(GlGetPName @pname, byte* @data);

        public void GetUnsignedBytevEXT(GlGetPName @pname, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_GetUnsignedBytevEXT(@pname, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetUnsignedBytei_vEXT")]
        static extern void Native_GetUnsignedBytei_vEXT(uint @target, uint @index, byte* @data);

        public void GetUnsignedBytei_vEXT(uint @target, uint @index, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_GetUnsignedBytei_vEXT(@target, @index, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVariantArrayObjectfvATI")]
        static extern void Native_GetVariantArrayObjectfvATI(uint @id, uint @pname, float* @params);

        public void GetVariantArrayObjectfvATI(uint @id, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetVariantArrayObjectfvATI(@id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVariantArrayObjectivATI")]
        static extern void Native_GetVariantArrayObjectivATI(uint @id, uint @pname, int* @params);

        public void GetVariantArrayObjectivATI(uint @id, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetVariantArrayObjectivATI(@id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVariantBooleanvEXT")]
        static extern void Native_GetVariantBooleanvEXT(uint @id, uint @value, GlBoolean* @data);

        public void GetVariantBooleanvEXT(uint @id, uint @value, GlBoolean[] @data) {
            fixed (GlBoolean *ptr_data = @data) {
                Native_GetVariantBooleanvEXT(@id, @value, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVariantFloatvEXT")]
        static extern void Native_GetVariantFloatvEXT(uint @id, uint @value, float* @data);

        public void GetVariantFloatvEXT(uint @id, uint @value, float[] @data) {
            fixed (float *ptr_data = @data) {
                Native_GetVariantFloatvEXT(@id, @value, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVariantIntegervEXT")]
        static extern void Native_GetVariantIntegervEXT(uint @id, uint @value, int* @data);

        public void GetVariantIntegervEXT(uint @id, uint @value, int[] @data) {
            fixed (int *ptr_data = @data) {
                Native_GetVariantIntegervEXT(@id, @value, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVariantPointervEXT")]
        static extern void Native_GetVariantPointervEXT(uint @id, uint @value, byte** @data);

        public void GetVariantPointervEXT(uint @id, uint @value, byte[][] @data) {
            IntPtr ptr_data = Marshal.AllocHGlobal(@data.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_data, @data, (void **) ptr_data.ToPointer(), 0, __fixedLocals => {
                    Native_GetVariantPointervEXT(@id, @value, (byte **) ptr_data.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVaryingLocationNV")]
        static extern int Native_GetVaryingLocationNV(uint @program, byte* @name);

        public int GetVaryingLocationNV(uint @program, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetVaryingLocationNV(@program, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexArrayIndexed64iv")]
        static extern void Native_GetVertexArrayIndexed64iv(uint @vaobj, uint @index, GlVertexArrayPName @pname, long* @param);

        public void GetVertexArrayIndexed64iv(uint @vaobj, uint @index, GlVertexArrayPName @pname, long[] @param) {
            fixed (long *ptr_param = @param) {
                Native_GetVertexArrayIndexed64iv(@vaobj, @index, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexArrayIndexediv")]
        static extern void Native_GetVertexArrayIndexediv(uint @vaobj, uint @index, GlVertexArrayPName @pname, int* @param);

        public void GetVertexArrayIndexediv(uint @vaobj, uint @index, GlVertexArrayPName @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_GetVertexArrayIndexediv(@vaobj, @index, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexArrayIntegeri_vEXT")]
        static extern void Native_GetVertexArrayIntegeri_vEXT(uint @vaobj, uint @index, GlVertexArrayPName @pname, int* @param);

        public void GetVertexArrayIntegeri_vEXT(uint @vaobj, uint @index, GlVertexArrayPName @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_GetVertexArrayIntegeri_vEXT(@vaobj, @index, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexArrayIntegervEXT")]
        static extern void Native_GetVertexArrayIntegervEXT(uint @vaobj, GlVertexArrayPName @pname, int* @param);

        public void GetVertexArrayIntegervEXT(uint @vaobj, GlVertexArrayPName @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_GetVertexArrayIntegervEXT(@vaobj, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexArrayPointeri_vEXT")]
        static extern void Native_GetVertexArrayPointeri_vEXT(uint @vaobj, uint @index, GlVertexArrayPName @pname, byte** @param);

        public void GetVertexArrayPointeri_vEXT(uint @vaobj, uint @index, GlVertexArrayPName @pname, byte[][] @param) {
            IntPtr ptr_param = Marshal.AllocHGlobal(@param.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_param, @param, (void **) ptr_param.ToPointer(), 0, __fixedLocals => {
                    Native_GetVertexArrayPointeri_vEXT(@vaobj, @index, @pname, (byte **) ptr_param.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexArrayPointervEXT")]
        static extern void Native_GetVertexArrayPointervEXT(uint @vaobj, GlVertexArrayPName @pname, byte** @param);

        public void GetVertexArrayPointervEXT(uint @vaobj, GlVertexArrayPName @pname, byte[][] @param) {
            IntPtr ptr_param = Marshal.AllocHGlobal(@param.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_param, @param, (void **) ptr_param.ToPointer(), 0, __fixedLocals => {
                    Native_GetVertexArrayPointervEXT(@vaobj, @pname, (byte **) ptr_param.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexArrayiv")]
        static extern void Native_GetVertexArrayiv(uint @vaobj, GlVertexArrayPName @pname, int* @param);

        public void GetVertexArrayiv(uint @vaobj, GlVertexArrayPName @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_GetVertexArrayiv(@vaobj, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribArrayObjectfvATI")]
        static extern void Native_GetVertexAttribArrayObjectfvATI(uint @index, uint @pname, float* @params);

        public void GetVertexAttribArrayObjectfvATI(uint @index, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetVertexAttribArrayObjectfvATI(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribArrayObjectivATI")]
        static extern void Native_GetVertexAttribArrayObjectivATI(uint @index, uint @pname, int* @params);

        public void GetVertexAttribArrayObjectivATI(uint @index, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetVertexAttribArrayObjectivATI(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribIiv")]
        static extern void Native_GetVertexAttribIiv(uint @index, GlVertexAttribEnum @pname, int* @params);

        public void GetVertexAttribIiv(uint @index, GlVertexAttribEnum @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetVertexAttribIiv(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribIivEXT")]
        static extern void Native_GetVertexAttribIivEXT(uint @index, GlVertexAttribEnum @pname, int* @params);

        public void GetVertexAttribIivEXT(uint @index, GlVertexAttribEnum @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetVertexAttribIivEXT(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribIuiv")]
        static extern void Native_GetVertexAttribIuiv(uint @index, GlVertexAttribEnum @pname, uint* @params);

        public void GetVertexAttribIuiv(uint @index, GlVertexAttribEnum @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetVertexAttribIuiv(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribIuivEXT")]
        static extern void Native_GetVertexAttribIuivEXT(uint @index, GlVertexAttribEnum @pname, uint* @params);

        public void GetVertexAttribIuivEXT(uint @index, GlVertexAttribEnum @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetVertexAttribIuivEXT(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribLdv")]
        static extern void Native_GetVertexAttribLdv(uint @index, GlVertexAttribEnum @pname, double* @params);

        public void GetVertexAttribLdv(uint @index, GlVertexAttribEnum @pname, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetVertexAttribLdv(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribLdvEXT")]
        static extern void Native_GetVertexAttribLdvEXT(uint @index, GlVertexAttribEnum @pname, double* @params);

        public void GetVertexAttribLdvEXT(uint @index, GlVertexAttribEnum @pname, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetVertexAttribLdvEXT(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribLi64vNV")]
        static extern void Native_GetVertexAttribLi64vNV(uint @index, GlVertexAttribEnum @pname, long* @params);

        public void GetVertexAttribLi64vNV(uint @index, GlVertexAttribEnum @pname, long[] @params) {
            fixed (long *ptr_params = @params) {
                Native_GetVertexAttribLi64vNV(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribLui64vARB")]
        static extern void Native_GetVertexAttribLui64vARB(uint @index, GlVertexAttribEnum @pname, ulong* @params);

        public void GetVertexAttribLui64vARB(uint @index, GlVertexAttribEnum @pname, ulong[] @params) {
            fixed (ulong *ptr_params = @params) {
                Native_GetVertexAttribLui64vARB(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribLui64vNV")]
        static extern void Native_GetVertexAttribLui64vNV(uint @index, GlVertexAttribEnum @pname, ulong* @params);

        public void GetVertexAttribLui64vNV(uint @index, GlVertexAttribEnum @pname, ulong[] @params) {
            fixed (ulong *ptr_params = @params) {
                Native_GetVertexAttribLui64vNV(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribPointerv")]
        static extern void Native_GetVertexAttribPointerv(uint @index, uint @pname, byte** @pointer);

        public void GetVertexAttribPointerv(uint @index, uint @pname, byte[][] @pointer) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_GetVertexAttribPointerv(@index, @pname, (byte **) ptr_pointer.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribPointervARB")]
        static extern void Native_GetVertexAttribPointervARB(uint @index, uint @pname, byte** @pointer);

        public void GetVertexAttribPointervARB(uint @index, uint @pname, byte[][] @pointer) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_GetVertexAttribPointervARB(@index, @pname, (byte **) ptr_pointer.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribPointervNV")]
        static extern void Native_GetVertexAttribPointervNV(uint @index, uint @pname, byte** @pointer);

        public void GetVertexAttribPointervNV(uint @index, uint @pname, byte[][] @pointer) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_GetVertexAttribPointervNV(@index, @pname, (byte **) ptr_pointer.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribdv")]
        static extern void Native_GetVertexAttribdv(uint @index, uint @pname, double* @params);

        public void GetVertexAttribdv(uint @index, uint @pname, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetVertexAttribdv(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribdvARB")]
        static extern void Native_GetVertexAttribdvARB(uint @index, uint @pname, double* @params);

        public void GetVertexAttribdvARB(uint @index, uint @pname, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetVertexAttribdvARB(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribdvNV")]
        static extern void Native_GetVertexAttribdvNV(uint @index, uint @pname, double* @params);

        public void GetVertexAttribdvNV(uint @index, uint @pname, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetVertexAttribdvNV(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribfv")]
        static extern void Native_GetVertexAttribfv(uint @index, uint @pname, float* @params);

        public void GetVertexAttribfv(uint @index, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetVertexAttribfv(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribfvARB")]
        static extern void Native_GetVertexAttribfvARB(uint @index, uint @pname, float* @params);

        public void GetVertexAttribfvARB(uint @index, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetVertexAttribfvARB(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribfvNV")]
        static extern void Native_GetVertexAttribfvNV(uint @index, uint @pname, float* @params);

        public void GetVertexAttribfvNV(uint @index, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetVertexAttribfvNV(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribiv")]
        static extern void Native_GetVertexAttribiv(uint @index, uint @pname, int* @params);

        public void GetVertexAttribiv(uint @index, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetVertexAttribiv(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribivARB")]
        static extern void Native_GetVertexAttribivARB(uint @index, uint @pname, int* @params);

        public void GetVertexAttribivARB(uint @index, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetVertexAttribivARB(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVertexAttribivNV")]
        static extern void Native_GetVertexAttribivNV(uint @index, uint @pname, int* @params);

        public void GetVertexAttribivNV(uint @index, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetVertexAttribivNV(@index, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVideoCaptureStreamdvNV")]
        static extern void Native_GetVideoCaptureStreamdvNV(uint @video_capture_slot, uint @stream, uint @pname, double* @params);

        public void GetVideoCaptureStreamdvNV(uint @video_capture_slot, uint @stream, uint @pname, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetVideoCaptureStreamdvNV(@video_capture_slot, @stream, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVideoCaptureStreamfvNV")]
        static extern void Native_GetVideoCaptureStreamfvNV(uint @video_capture_slot, uint @stream, uint @pname, float* @params);

        public void GetVideoCaptureStreamfvNV(uint @video_capture_slot, uint @stream, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetVideoCaptureStreamfvNV(@video_capture_slot, @stream, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVideoCaptureStreamivNV")]
        static extern void Native_GetVideoCaptureStreamivNV(uint @video_capture_slot, uint @stream, uint @pname, int* @params);

        public void GetVideoCaptureStreamivNV(uint @video_capture_slot, uint @stream, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetVideoCaptureStreamivNV(@video_capture_slot, @stream, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVideoCaptureivNV")]
        static extern void Native_GetVideoCaptureivNV(uint @video_capture_slot, uint @pname, int* @params);

        public void GetVideoCaptureivNV(uint @video_capture_slot, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetVideoCaptureivNV(@video_capture_slot, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVideoi64vNV")]
        static extern void Native_GetVideoi64vNV(uint @video_slot, uint @pname, long* @params);

        public void GetVideoi64vNV(uint @video_slot, uint @pname, long[] @params) {
            fixed (long *ptr_params = @params) {
                Native_GetVideoi64vNV(@video_slot, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVideoivNV")]
        static extern void Native_GetVideoivNV(uint @video_slot, uint @pname, int* @params);

        public void GetVideoivNV(uint @video_slot, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetVideoivNV(@video_slot, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVideoui64vNV")]
        static extern void Native_GetVideoui64vNV(uint @video_slot, uint @pname, ulong* @params);

        public void GetVideoui64vNV(uint @video_slot, uint @pname, ulong[] @params) {
            fixed (ulong *ptr_params = @params) {
                Native_GetVideoui64vNV(@video_slot, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVideouivNV")]
        static extern void Native_GetVideouivNV(uint @video_slot, uint @pname, uint* @params);

        public void GetVideouivNV(uint @video_slot, uint @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetVideouivNV(@video_slot, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnColorTable")]
        static extern void Native_GetnColorTable(GlColorTableTarget @target, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @table);

        public void GetnColorTable(GlColorTableTarget @target, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @table) {
            fixed (byte *ptr_table = @table) {
                Native_GetnColorTable(@target, @format, @type, @bufSize, @ptr_table);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnColorTableARB")]
        static extern void Native_GetnColorTableARB(GlColorTableTarget @target, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @table);

        public void GetnColorTableARB(GlColorTableTarget @target, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @table) {
            fixed (byte *ptr_table = @table) {
                Native_GetnColorTableARB(@target, @format, @type, @bufSize, @ptr_table);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnCompressedTexImage")]
        static extern void Native_GetnCompressedTexImage(GlTextureTarget @target, int @lod, int @bufSize, byte* @pixels);

        public void GetnCompressedTexImage(GlTextureTarget @target, int @lod, int @bufSize, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_GetnCompressedTexImage(@target, @lod, @bufSize, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnCompressedTexImageARB")]
        static extern void Native_GetnCompressedTexImageARB(GlTextureTarget @target, int @lod, int @bufSize, byte* @img);

        public void GetnCompressedTexImageARB(GlTextureTarget @target, int @lod, int @bufSize, byte[] @img) {
            fixed (byte *ptr_img = @img) {
                Native_GetnCompressedTexImageARB(@target, @lod, @bufSize, @ptr_img);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnConvolutionFilter")]
        static extern void Native_GetnConvolutionFilter(GlConvolutionTarget @target, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @image);

        public void GetnConvolutionFilter(GlConvolutionTarget @target, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @image) {
            fixed (byte *ptr_image = @image) {
                Native_GetnConvolutionFilter(@target, @format, @type, @bufSize, @ptr_image);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnConvolutionFilterARB")]
        static extern void Native_GetnConvolutionFilterARB(GlConvolutionTarget @target, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @image);

        public void GetnConvolutionFilterARB(GlConvolutionTarget @target, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @image) {
            fixed (byte *ptr_image = @image) {
                Native_GetnConvolutionFilterARB(@target, @format, @type, @bufSize, @ptr_image);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnHistogram")]
        static extern void Native_GetnHistogram(GlHistogramTargetEXT @target, bool @reset, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @values);

        public void GetnHistogram(GlHistogramTargetEXT @target, bool @reset, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @values) {
            fixed (byte *ptr_values = @values) {
                Native_GetnHistogram(@target, @reset, @format, @type, @bufSize, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnHistogramARB")]
        static extern void Native_GetnHistogramARB(GlHistogramTargetEXT @target, GlBoolean @reset, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @values);

        public void GetnHistogramARB(GlHistogramTargetEXT @target, GlBoolean @reset, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @values) {
            fixed (byte *ptr_values = @values) {
                Native_GetnHistogramARB(@target, @reset, @format, @type, @bufSize, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnMapdv")]
        static extern void Native_GetnMapdv(GlMapTarget @target, GlMapQuery @query, int @bufSize, double* @v);

        public void GetnMapdv(GlMapTarget @target, GlMapQuery @query, int @bufSize, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_GetnMapdv(@target, @query, @bufSize, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnMapdvARB")]
        static extern void Native_GetnMapdvARB(GlMapTarget @target, GlMapQuery @query, int @bufSize, double* @v);

        public void GetnMapdvARB(GlMapTarget @target, GlMapQuery @query, int @bufSize, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_GetnMapdvARB(@target, @query, @bufSize, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnMapfv")]
        static extern void Native_GetnMapfv(GlMapTarget @target, GlMapQuery @query, int @bufSize, float* @v);

        public void GetnMapfv(GlMapTarget @target, GlMapQuery @query, int @bufSize, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_GetnMapfv(@target, @query, @bufSize, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnMapfvARB")]
        static extern void Native_GetnMapfvARB(GlMapTarget @target, GlMapQuery @query, int @bufSize, float* @v);

        public void GetnMapfvARB(GlMapTarget @target, GlMapQuery @query, int @bufSize, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_GetnMapfvARB(@target, @query, @bufSize, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnMapiv")]
        static extern void Native_GetnMapiv(GlMapTarget @target, GlMapQuery @query, int @bufSize, int* @v);

        public void GetnMapiv(GlMapTarget @target, GlMapQuery @query, int @bufSize, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_GetnMapiv(@target, @query, @bufSize, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnMapivARB")]
        static extern void Native_GetnMapivARB(GlMapTarget @target, GlMapQuery @query, int @bufSize, int* @v);

        public void GetnMapivARB(GlMapTarget @target, GlMapQuery @query, int @bufSize, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_GetnMapivARB(@target, @query, @bufSize, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnMinmax")]
        static extern void Native_GetnMinmax(GlMinmaxTargetEXT @target, bool @reset, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @values);

        public void GetnMinmax(GlMinmaxTargetEXT @target, bool @reset, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @values) {
            fixed (byte *ptr_values = @values) {
                Native_GetnMinmax(@target, @reset, @format, @type, @bufSize, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnMinmaxARB")]
        static extern void Native_GetnMinmaxARB(GlMinmaxTargetEXT @target, GlBoolean @reset, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @values);

        public void GetnMinmaxARB(GlMinmaxTargetEXT @target, GlBoolean @reset, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @values) {
            fixed (byte *ptr_values = @values) {
                Native_GetnMinmaxARB(@target, @reset, @format, @type, @bufSize, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnPixelMapfv")]
        static extern void Native_GetnPixelMapfv(GlPixelMap @map, int @bufSize, float* @values);

        public void GetnPixelMapfv(GlPixelMap @map, int @bufSize, float[] @values) {
            fixed (float *ptr_values = @values) {
                Native_GetnPixelMapfv(@map, @bufSize, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnPixelMapfvARB")]
        static extern void Native_GetnPixelMapfvARB(GlPixelMap @map, int @bufSize, float* @values);

        public void GetnPixelMapfvARB(GlPixelMap @map, int @bufSize, float[] @values) {
            fixed (float *ptr_values = @values) {
                Native_GetnPixelMapfvARB(@map, @bufSize, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnPixelMapuiv")]
        static extern void Native_GetnPixelMapuiv(GlPixelMap @map, int @bufSize, uint* @values);

        public void GetnPixelMapuiv(GlPixelMap @map, int @bufSize, uint[] @values) {
            fixed (uint *ptr_values = @values) {
                Native_GetnPixelMapuiv(@map, @bufSize, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnPixelMapuivARB")]
        static extern void Native_GetnPixelMapuivARB(GlPixelMap @map, int @bufSize, uint* @values);

        public void GetnPixelMapuivARB(GlPixelMap @map, int @bufSize, uint[] @values) {
            fixed (uint *ptr_values = @values) {
                Native_GetnPixelMapuivARB(@map, @bufSize, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnPixelMapusv")]
        static extern void Native_GetnPixelMapusv(GlPixelMap @map, int @bufSize, ushort* @values);

        public void GetnPixelMapusv(GlPixelMap @map, int @bufSize, ushort[] @values) {
            fixed (ushort *ptr_values = @values) {
                Native_GetnPixelMapusv(@map, @bufSize, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnPixelMapusvARB")]
        static extern void Native_GetnPixelMapusvARB(GlPixelMap @map, int @bufSize, ushort* @values);

        public void GetnPixelMapusvARB(GlPixelMap @map, int @bufSize, ushort[] @values) {
            fixed (ushort *ptr_values = @values) {
                Native_GetnPixelMapusvARB(@map, @bufSize, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnPolygonStipple")]
        static extern void Native_GetnPolygonStipple(int @bufSize, byte* @pattern);

        public void GetnPolygonStipple(int @bufSize, byte[] @pattern) {
            fixed (byte *ptr_pattern = @pattern) {
                Native_GetnPolygonStipple(@bufSize, @ptr_pattern);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnPolygonStippleARB")]
        static extern void Native_GetnPolygonStippleARB(int @bufSize, byte* @pattern);

        public void GetnPolygonStippleARB(int @bufSize, byte[] @pattern) {
            fixed (byte *ptr_pattern = @pattern) {
                Native_GetnPolygonStippleARB(@bufSize, @ptr_pattern);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnSeparableFilter")]
        static extern void Native_GetnSeparableFilter(GlSeparableTargetEXT @target, GlPixelFormat @format, GlPixelType @type, int @rowBufSize, byte* @row, int @columnBufSize, byte* @column, byte* @span);

        public void GetnSeparableFilter(GlSeparableTargetEXT @target, GlPixelFormat @format, GlPixelType @type, int @rowBufSize, byte[] @row, int @columnBufSize, byte[] @column, byte[] @span) {
            fixed (byte *ptr_row = @row) {
                fixed (byte *ptr_column = @column) {
                    fixed (byte *ptr_span = @span) {
                        Native_GetnSeparableFilter(@target, @format, @type, @rowBufSize, @ptr_row, @columnBufSize, @ptr_column, @ptr_span);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnSeparableFilterARB")]
        static extern void Native_GetnSeparableFilterARB(GlSeparableTargetEXT @target, GlPixelFormat @format, GlPixelType @type, int @rowBufSize, byte* @row, int @columnBufSize, byte* @column, byte* @span);

        public void GetnSeparableFilterARB(GlSeparableTargetEXT @target, GlPixelFormat @format, GlPixelType @type, int @rowBufSize, byte[] @row, int @columnBufSize, byte[] @column, byte[] @span) {
            fixed (byte *ptr_row = @row) {
                fixed (byte *ptr_column = @column) {
                    fixed (byte *ptr_span = @span) {
                        Native_GetnSeparableFilterARB(@target, @format, @type, @rowBufSize, @ptr_row, @columnBufSize, @ptr_column, @ptr_span);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnTexImage")]
        static extern void Native_GetnTexImage(GlTextureTarget @target, int @level, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @pixels);

        public void GetnTexImage(GlTextureTarget @target, int @level, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_GetnTexImage(@target, @level, @format, @type, @bufSize, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnTexImageARB")]
        static extern void Native_GetnTexImageARB(GlTextureTarget @target, int @level, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @img);

        public void GetnTexImageARB(GlTextureTarget @target, int @level, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @img) {
            fixed (byte *ptr_img = @img) {
                Native_GetnTexImageARB(@target, @level, @format, @type, @bufSize, @ptr_img);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnUniformdv")]
        static extern void Native_GetnUniformdv(uint @program, int @location, int @bufSize, double* @params);

        public void GetnUniformdv(uint @program, int @location, int @bufSize, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetnUniformdv(@program, @location, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnUniformdvARB")]
        static extern void Native_GetnUniformdvARB(uint @program, int @location, int @bufSize, double* @params);

        public void GetnUniformdvARB(uint @program, int @location, int @bufSize, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_GetnUniformdvARB(@program, @location, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnUniformfv")]
        static extern void Native_GetnUniformfv(uint @program, int @location, int @bufSize, float* @params);

        public void GetnUniformfv(uint @program, int @location, int @bufSize, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetnUniformfv(@program, @location, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnUniformfvARB")]
        static extern void Native_GetnUniformfvARB(uint @program, int @location, int @bufSize, float* @params);

        public void GetnUniformfvARB(uint @program, int @location, int @bufSize, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetnUniformfvARB(@program, @location, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnUniformfvEXT")]
        static extern void Native_GetnUniformfvEXT(uint @program, int @location, int @bufSize, float* @params);

        public void GetnUniformfvEXT(uint @program, int @location, int @bufSize, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetnUniformfvEXT(@program, @location, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnUniformfvKHR")]
        static extern void Native_GetnUniformfvKHR(uint @program, int @location, int @bufSize, float* @params);

        public void GetnUniformfvKHR(uint @program, int @location, int @bufSize, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_GetnUniformfvKHR(@program, @location, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnUniformi64vARB")]
        static extern void Native_GetnUniformi64vARB(uint @program, int @location, int @bufSize, long* @params);

        public void GetnUniformi64vARB(uint @program, int @location, int @bufSize, long[] @params) {
            fixed (long *ptr_params = @params) {
                Native_GetnUniformi64vARB(@program, @location, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnUniformiv")]
        static extern void Native_GetnUniformiv(uint @program, int @location, int @bufSize, int* @params);

        public void GetnUniformiv(uint @program, int @location, int @bufSize, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetnUniformiv(@program, @location, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnUniformivARB")]
        static extern void Native_GetnUniformivARB(uint @program, int @location, int @bufSize, int* @params);

        public void GetnUniformivARB(uint @program, int @location, int @bufSize, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetnUniformivARB(@program, @location, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnUniformivEXT")]
        static extern void Native_GetnUniformivEXT(uint @program, int @location, int @bufSize, int* @params);

        public void GetnUniformivEXT(uint @program, int @location, int @bufSize, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetnUniformivEXT(@program, @location, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnUniformivKHR")]
        static extern void Native_GetnUniformivKHR(uint @program, int @location, int @bufSize, int* @params);

        public void GetnUniformivKHR(uint @program, int @location, int @bufSize, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_GetnUniformivKHR(@program, @location, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnUniformui64vARB")]
        static extern void Native_GetnUniformui64vARB(uint @program, int @location, int @bufSize, ulong* @params);

        public void GetnUniformui64vARB(uint @program, int @location, int @bufSize, ulong[] @params) {
            fixed (ulong *ptr_params = @params) {
                Native_GetnUniformui64vARB(@program, @location, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnUniformuiv")]
        static extern void Native_GetnUniformuiv(uint @program, int @location, int @bufSize, uint* @params);

        public void GetnUniformuiv(uint @program, int @location, int @bufSize, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetnUniformuiv(@program, @location, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnUniformuivARB")]
        static extern void Native_GetnUniformuivARB(uint @program, int @location, int @bufSize, uint* @params);

        public void GetnUniformuivARB(uint @program, int @location, int @bufSize, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetnUniformuivARB(@program, @location, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetnUniformuivKHR")]
        static extern void Native_GetnUniformuivKHR(uint @program, int @location, int @bufSize, uint* @params);

        public void GetnUniformuivKHR(uint @program, int @location, int @bufSize, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_GetnUniformuivKHR(@program, @location, @bufSize, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGlobalAlphaFactorbSUN")]
        static extern void Native_GlobalAlphaFactorbSUN(sbyte @factor);

        public void GlobalAlphaFactorbSUN(sbyte @factor) {
            Native_GlobalAlphaFactorbSUN(@factor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGlobalAlphaFactordSUN")]
        static extern void Native_GlobalAlphaFactordSUN(double @factor);

        public void GlobalAlphaFactordSUN(double @factor) {
            Native_GlobalAlphaFactordSUN(@factor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGlobalAlphaFactorfSUN")]
        static extern void Native_GlobalAlphaFactorfSUN(float @factor);

        public void GlobalAlphaFactorfSUN(float @factor) {
            Native_GlobalAlphaFactorfSUN(@factor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGlobalAlphaFactoriSUN")]
        static extern void Native_GlobalAlphaFactoriSUN(int @factor);

        public void GlobalAlphaFactoriSUN(int @factor) {
            Native_GlobalAlphaFactoriSUN(@factor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGlobalAlphaFactorsSUN")]
        static extern void Native_GlobalAlphaFactorsSUN(short @factor);

        public void GlobalAlphaFactorsSUN(short @factor) {
            Native_GlobalAlphaFactorsSUN(@factor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGlobalAlphaFactorubSUN")]
        static extern void Native_GlobalAlphaFactorubSUN(byte @factor);

        public void GlobalAlphaFactorubSUN(byte @factor) {
            Native_GlobalAlphaFactorubSUN(@factor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGlobalAlphaFactoruiSUN")]
        static extern void Native_GlobalAlphaFactoruiSUN(uint @factor);

        public void GlobalAlphaFactoruiSUN(uint @factor) {
            Native_GlobalAlphaFactoruiSUN(@factor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGlobalAlphaFactorusSUN")]
        static extern void Native_GlobalAlphaFactorusSUN(ushort @factor);

        public void GlobalAlphaFactorusSUN(ushort @factor) {
            Native_GlobalAlphaFactorusSUN(@factor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glHint")]
        static extern void Native_Hint(GlHintTarget @target, GlHintMode @mode);

        public void Hint(GlHintTarget @target, GlHintMode @mode) {
            Native_Hint(@target, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glHintPGI")]
        static extern void Native_HintPGI(uint @target, int @mode);

        public void HintPGI(uint @target, int @mode) {
            Native_HintPGI(@target, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glHistogram")]
        static extern void Native_Histogram(GlHistogramTargetEXT @target, int @width, GlInternalFormat @internalformat, GlBoolean @sink);

        public void Histogram(GlHistogramTargetEXT @target, int @width, GlInternalFormat @internalformat, GlBoolean @sink) {
            Native_Histogram(@target, @width, @internalformat, @sink);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glHistogramEXT")]
        static extern void Native_HistogramEXT(GlHistogramTargetEXT @target, int @width, GlInternalFormat @internalformat, GlBoolean @sink);

        public void HistogramEXT(GlHistogramTargetEXT @target, int @width, GlInternalFormat @internalformat, GlBoolean @sink) {
            Native_HistogramEXT(@target, @width, @internalformat, @sink);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIglooInterfaceSGIX")]
        static extern void Native_IglooInterfaceSGIX(uint @pname, byte* @params);

        public void IglooInterfaceSGIX(uint @pname, byte[] @params) {
            fixed (byte *ptr_params = @params) {
                Native_IglooInterfaceSGIX(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glImageTransformParameterfHP")]
        static extern void Native_ImageTransformParameterfHP(uint @target, uint @pname, float @param);

        public void ImageTransformParameterfHP(uint @target, uint @pname, float @param) {
            Native_ImageTransformParameterfHP(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glImageTransformParameterfvHP")]
        static extern void Native_ImageTransformParameterfvHP(uint @target, uint @pname, float* @params);

        public void ImageTransformParameterfvHP(uint @target, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_ImageTransformParameterfvHP(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glImageTransformParameteriHP")]
        static extern void Native_ImageTransformParameteriHP(uint @target, uint @pname, int @param);

        public void ImageTransformParameteriHP(uint @target, uint @pname, int @param) {
            Native_ImageTransformParameteriHP(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glImageTransformParameterivHP")]
        static extern void Native_ImageTransformParameterivHP(uint @target, uint @pname, int* @params);

        public void ImageTransformParameterivHP(uint @target, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_ImageTransformParameterivHP(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glImportMemoryFdEXT")]
        static extern void Native_ImportMemoryFdEXT(uint @memory, ulong @size, GlExternalHandleType @handleType, int @fd);

        public void ImportMemoryFdEXT(uint @memory, ulong @size, GlExternalHandleType @handleType, int @fd) {
            Native_ImportMemoryFdEXT(@memory, @size, @handleType, @fd);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glImportMemoryWin32HandleEXT")]
        static extern void Native_ImportMemoryWin32HandleEXT(uint @memory, ulong @size, GlExternalHandleType @handleType, byte* @handle);

        public void ImportMemoryWin32HandleEXT(uint @memory, ulong @size, GlExternalHandleType @handleType, byte[] @handle) {
            fixed (byte *ptr_handle = @handle) {
                Native_ImportMemoryWin32HandleEXT(@memory, @size, @handleType, @ptr_handle);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glImportMemoryWin32NameEXT")]
        static extern void Native_ImportMemoryWin32NameEXT(uint @memory, ulong @size, GlExternalHandleType @handleType, byte* @name);

        public void ImportMemoryWin32NameEXT(uint @memory, ulong @size, GlExternalHandleType @handleType, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                Native_ImportMemoryWin32NameEXT(@memory, @size, @handleType, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glImportSemaphoreFdEXT")]
        static extern void Native_ImportSemaphoreFdEXT(uint @semaphore, GlExternalHandleType @handleType, int @fd);

        public void ImportSemaphoreFdEXT(uint @semaphore, GlExternalHandleType @handleType, int @fd) {
            Native_ImportSemaphoreFdEXT(@semaphore, @handleType, @fd);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glImportSemaphoreWin32HandleEXT")]
        static extern void Native_ImportSemaphoreWin32HandleEXT(uint @semaphore, GlExternalHandleType @handleType, byte* @handle);

        public void ImportSemaphoreWin32HandleEXT(uint @semaphore, GlExternalHandleType @handleType, byte[] @handle) {
            fixed (byte *ptr_handle = @handle) {
                Native_ImportSemaphoreWin32HandleEXT(@semaphore, @handleType, @ptr_handle);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glImportSemaphoreWin32NameEXT")]
        static extern void Native_ImportSemaphoreWin32NameEXT(uint @semaphore, GlExternalHandleType @handleType, byte* @name);

        public void ImportSemaphoreWin32NameEXT(uint @semaphore, GlExternalHandleType @handleType, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                Native_ImportSemaphoreWin32NameEXT(@semaphore, @handleType, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glImportSyncEXT")]
        static extern IntPtr Native_ImportSyncEXT(uint @external_sync_type, long @external_sync, uint @flags);

        public IntPtr ImportSyncEXT(uint @external_sync_type, long @external_sync, uint @flags) {
            return Native_ImportSyncEXT(@external_sync_type, @external_sync, @flags);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexFormatNV")]
        static extern void Native_IndexFormatNV(uint @type, int @stride);

        public void IndexFormatNV(uint @type, int @stride) {
            Native_IndexFormatNV(@type, @stride);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexFuncEXT")]
        static extern void Native_IndexFuncEXT(uint @func, float @ref);

        public void IndexFuncEXT(uint @func, float @ref) {
            Native_IndexFuncEXT(@func, @ref);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexMask")]
        static extern void Native_IndexMask(uint @mask);

        public void IndexMask(uint @mask) {
            Native_IndexMask(@mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexMaterialEXT")]
        static extern void Native_IndexMaterialEXT(GlMaterialFace @face, uint @mode);

        public void IndexMaterialEXT(GlMaterialFace @face, uint @mode) {
            Native_IndexMaterialEXT(@face, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexPointer")]
        static extern void Native_IndexPointer(GlIndexPointerType @type, int @stride, byte* @pointer);

        public void IndexPointer(GlIndexPointerType @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_IndexPointer(@type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexPointerEXT")]
        static extern void Native_IndexPointerEXT(GlIndexPointerType @type, int @stride, int @count, byte* @pointer);

        public void IndexPointerEXT(GlIndexPointerType @type, int @stride, int @count, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_IndexPointerEXT(@type, @stride, @count, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexPointerListIBM")]
        static extern void Native_IndexPointerListIBM(GlIndexPointerType @type, int @stride, byte** @pointer, int @ptrstride);

        public void IndexPointerListIBM(GlIndexPointerType @type, int @stride, byte[][] @pointer, int @ptrstride) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_IndexPointerListIBM(@type, @stride, (byte **) ptr_pointer.ToPointer(), @ptrstride);
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexd")]
        static extern void Native_Indexd(double @c);

        public void Indexd(double @c) {
            Native_Indexd(@c);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexdv")]
        static extern void Native_Indexdv(double* @c);

        public void Indexdv(double[] @c) {
            fixed (double *ptr_c = @c) {
                Native_Indexdv(@ptr_c);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexf")]
        static extern void Native_Indexf(float @c);

        public void Indexf(float @c) {
            Native_Indexf(@c);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexfv")]
        static extern void Native_Indexfv(float* @c);

        public void Indexfv(float[] @c) {
            fixed (float *ptr_c = @c) {
                Native_Indexfv(@ptr_c);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexi")]
        static extern void Native_Indexi(int @c);

        public void Indexi(int @c) {
            Native_Indexi(@c);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexiv")]
        static extern void Native_Indexiv(int* @c);

        public void Indexiv(int[] @c) {
            fixed (int *ptr_c = @c) {
                Native_Indexiv(@ptr_c);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexs")]
        static extern void Native_Indexs(short @c);

        public void Indexs(short @c) {
            Native_Indexs(@c);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexsv")]
        static extern void Native_Indexsv(short* @c);

        public void Indexsv(short[] @c) {
            fixed (short *ptr_c = @c) {
                Native_Indexsv(@ptr_c);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexub")]
        static extern void Native_Indexub(byte @c);

        public void Indexub(byte @c) {
            Native_Indexub(@c);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexubv")]
        static extern void Native_Indexubv(byte* @c);

        public void Indexubv(byte[] @c) {
            fixed (byte *ptr_c = @c) {
                Native_Indexubv(@ptr_c);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexxOES")]
        static extern void Native_IndexxOES(int @component);

        public void IndexxOES(int @component) {
            Native_IndexxOES(@component);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIndexxvOES")]
        static extern void Native_IndexxvOES(int* @component);

        public void IndexxvOES(int[] @component) {
            fixed (int *ptr_component = @component) {
                Native_IndexxvOES(@ptr_component);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glInitNames")]
        static extern void Native_InitNames();

        public void InitNames() {
            Native_InitNames();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glInsertComponentEXT")]
        static extern void Native_InsertComponentEXT(uint @res, uint @src, uint @num);

        public void InsertComponentEXT(uint @res, uint @src, uint @num) {
            Native_InsertComponentEXT(@res, @src, @num);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glInsertEventMarkerEXT")]
        static extern void Native_InsertEventMarkerEXT(int @length, byte* @marker);

        public void InsertEventMarkerEXT(int @length, byte[] @marker) {
            fixed (byte *ptr_marker = @marker) {
                Native_InsertEventMarkerEXT(@length, @ptr_marker);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glInstrumentsBufferSGIX")]
        static extern void Native_InstrumentsBufferSGIX(int @size, int* @buffer);

        public void InstrumentsBufferSGIX(int @size, int[] @buffer) {
            fixed (int *ptr_buffer = @buffer) {
                Native_InstrumentsBufferSGIX(@size, @ptr_buffer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glInterleavedArrays")]
        static extern void Native_InterleavedArrays(GlInterleavedArrayFormat @format, int @stride, byte* @pointer);

        public void InterleavedArrays(GlInterleavedArrayFormat @format, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_InterleavedArrays(@format, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glInterpolatePathsNV")]
        static extern void Native_InterpolatePathsNV(uint @resultPath, uint @pathA, uint @pathB, float @weight);

        public void InterpolatePathsNV(uint @resultPath, uint @pathA, uint @pathB, float @weight) {
            Native_InterpolatePathsNV(@resultPath, @pathA, @pathB, @weight);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glInvalidateBufferData")]
        static extern void Native_InvalidateBufferData(uint @buffer);

        public void InvalidateBufferData(uint @buffer) {
            Native_InvalidateBufferData(@buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glInvalidateBufferSubData")]
        static extern void Native_InvalidateBufferSubData(uint @buffer, long @offset, long @length);

        public void InvalidateBufferSubData(uint @buffer, long @offset, long @length) {
            Native_InvalidateBufferSubData(@buffer, @offset, @length);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glInvalidateFramebuffer")]
        static extern void Native_InvalidateFramebuffer(GlFramebufferTarget @target, int @numAttachments, uint* @attachments);

        public void InvalidateFramebuffer(GlFramebufferTarget @target, int @numAttachments, uint[] @attachments) {
            fixed (uint *ptr_attachments = @attachments) {
                Native_InvalidateFramebuffer(@target, @numAttachments, @ptr_attachments);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glInvalidateNamedFramebufferData")]
        static extern void Native_InvalidateNamedFramebufferData(uint @framebuffer, int @numAttachments, GlFramebufferAttachment* @attachments);

        public void InvalidateNamedFramebufferData(uint @framebuffer, int @numAttachments, GlFramebufferAttachment[] @attachments) {
            fixed (GlFramebufferAttachment *ptr_attachments = @attachments) {
                Native_InvalidateNamedFramebufferData(@framebuffer, @numAttachments, @ptr_attachments);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glInvalidateNamedFramebufferSubData")]
        static extern void Native_InvalidateNamedFramebufferSubData(uint @framebuffer, int @numAttachments, GlFramebufferAttachment* @attachments, int @x, int @y, int @width, int @height);

        public void InvalidateNamedFramebufferSubData(uint @framebuffer, int @numAttachments, GlFramebufferAttachment[] @attachments, int @x, int @y, int @width, int @height) {
            fixed (GlFramebufferAttachment *ptr_attachments = @attachments) {
                Native_InvalidateNamedFramebufferSubData(@framebuffer, @numAttachments, @ptr_attachments, @x, @y, @width, @height);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glInvalidateSubFramebuffer")]
        static extern void Native_InvalidateSubFramebuffer(uint @target, int @numAttachments, GlFramebufferAttachment* @attachments, int @x, int @y, int @width, int @height);

        public void InvalidateSubFramebuffer(uint @target, int @numAttachments, GlFramebufferAttachment[] @attachments, int @x, int @y, int @width, int @height) {
            fixed (GlFramebufferAttachment *ptr_attachments = @attachments) {
                Native_InvalidateSubFramebuffer(@target, @numAttachments, @ptr_attachments, @x, @y, @width, @height);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glInvalidateTexImage")]
        static extern void Native_InvalidateTexImage(uint @texture, int @level);

        public void InvalidateTexImage(uint @texture, int @level) {
            Native_InvalidateTexImage(@texture, @level);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glInvalidateTexSubImage")]
        static extern void Native_InvalidateTexSubImage(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth);

        public void InvalidateTexSubImage(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth) {
            Native_InvalidateTexSubImage(@texture, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsAsyncMarkerSGIX")]
        static extern bool Native_IsAsyncMarkerSGIX(uint @marker);

        public bool IsAsyncMarkerSGIX(uint @marker) {
            return Native_IsAsyncMarkerSGIX(@marker);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsBuffer")]
        static extern bool Native_IsBuffer(uint @buffer);

        public bool IsBuffer(uint @buffer) {
            return Native_IsBuffer(@buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsBufferARB")]
        static extern bool Native_IsBufferARB(uint @buffer);

        public bool IsBufferARB(uint @buffer) {
            return Native_IsBufferARB(@buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsBufferResidentNV")]
        static extern bool Native_IsBufferResidentNV(uint @target);

        public bool IsBufferResidentNV(uint @target) {
            return Native_IsBufferResidentNV(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsCommandListNV")]
        static extern bool Native_IsCommandListNV(uint @list);

        public bool IsCommandListNV(uint @list) {
            return Native_IsCommandListNV(@list);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsEnabled")]
        static extern bool Native_IsEnabled(GlEnableCap @cap);

        public bool IsEnabled(GlEnableCap @cap) {
            return Native_IsEnabled(@cap);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsEnabledIndexedEXT")]
        static extern bool Native_IsEnabledIndexedEXT(GlEnableCap @target, uint @index);

        public bool IsEnabledIndexedEXT(GlEnableCap @target, uint @index) {
            return Native_IsEnabledIndexedEXT(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsEnabledi")]
        static extern bool Native_IsEnabledi(GlEnableCap @target, uint @index);

        public bool IsEnabledi(GlEnableCap @target, uint @index) {
            return Native_IsEnabledi(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsEnablediEXT")]
        static extern bool Native_IsEnablediEXT(GlEnableCap @target, uint @index);

        public bool IsEnablediEXT(GlEnableCap @target, uint @index) {
            return Native_IsEnablediEXT(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsEnablediNV")]
        static extern bool Native_IsEnablediNV(GlEnableCap @target, uint @index);

        public bool IsEnablediNV(GlEnableCap @target, uint @index) {
            return Native_IsEnablediNV(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsEnablediOES")]
        static extern bool Native_IsEnablediOES(GlEnableCap @target, uint @index);

        public bool IsEnablediOES(GlEnableCap @target, uint @index) {
            return Native_IsEnablediOES(@target, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsFenceAPPLE")]
        static extern bool Native_IsFenceAPPLE(uint @fence);

        public bool IsFenceAPPLE(uint @fence) {
            return Native_IsFenceAPPLE(@fence);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsFenceNV")]
        static extern bool Native_IsFenceNV(uint @fence);

        public bool IsFenceNV(uint @fence) {
            return Native_IsFenceNV(@fence);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsFramebuffer")]
        static extern bool Native_IsFramebuffer(uint @framebuffer);

        public bool IsFramebuffer(uint @framebuffer) {
            return Native_IsFramebuffer(@framebuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsFramebufferEXT")]
        static extern bool Native_IsFramebufferEXT(uint @framebuffer);

        public bool IsFramebufferEXT(uint @framebuffer) {
            return Native_IsFramebufferEXT(@framebuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsFramebufferOES")]
        static extern bool Native_IsFramebufferOES(uint @framebuffer);

        public bool IsFramebufferOES(uint @framebuffer) {
            return Native_IsFramebufferOES(@framebuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsImageHandleResidentARB")]
        static extern bool Native_IsImageHandleResidentARB(ulong @handle);

        public bool IsImageHandleResidentARB(ulong @handle) {
            return Native_IsImageHandleResidentARB(@handle);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsImageHandleResidentNV")]
        static extern bool Native_IsImageHandleResidentNV(ulong @handle);

        public bool IsImageHandleResidentNV(ulong @handle) {
            return Native_IsImageHandleResidentNV(@handle);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsList")]
        static extern bool Native_IsList(uint @list);

        public bool IsList(uint @list) {
            return Native_IsList(@list);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsMemoryObjectEXT")]
        static extern bool Native_IsMemoryObjectEXT(uint @memoryObject);

        public bool IsMemoryObjectEXT(uint @memoryObject) {
            return Native_IsMemoryObjectEXT(@memoryObject);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsNameAMD")]
        static extern bool Native_IsNameAMD(uint @identifier, uint @name);

        public bool IsNameAMD(uint @identifier, uint @name) {
            return Native_IsNameAMD(@identifier, @name);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsNamedBufferResidentNV")]
        static extern bool Native_IsNamedBufferResidentNV(uint @buffer);

        public bool IsNamedBufferResidentNV(uint @buffer) {
            return Native_IsNamedBufferResidentNV(@buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsNamedStringARB")]
        static extern bool Native_IsNamedStringARB(int @namelen, byte* @name);

        public bool IsNamedStringARB(int @namelen, byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_IsNamedStringARB(@namelen, @ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsObjectBufferATI")]
        static extern bool Native_IsObjectBufferATI(uint @buffer);

        public bool IsObjectBufferATI(uint @buffer) {
            return Native_IsObjectBufferATI(@buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsOcclusionQueryNV")]
        static extern bool Native_IsOcclusionQueryNV(uint @id);

        public bool IsOcclusionQueryNV(uint @id) {
            return Native_IsOcclusionQueryNV(@id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsPathNV")]
        static extern bool Native_IsPathNV(uint @path);

        public bool IsPathNV(uint @path) {
            return Native_IsPathNV(@path);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsPointInFillPathNV")]
        static extern bool Native_IsPointInFillPathNV(uint @path, uint @mask, float @x, float @y);

        public bool IsPointInFillPathNV(uint @path, uint @mask, float @x, float @y) {
            return Native_IsPointInFillPathNV(@path, @mask, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsPointInStrokePathNV")]
        static extern bool Native_IsPointInStrokePathNV(uint @path, float @x, float @y);

        public bool IsPointInStrokePathNV(uint @path, float @x, float @y) {
            return Native_IsPointInStrokePathNV(@path, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsProgram")]
        static extern bool Native_IsProgram(uint @program);

        public bool IsProgram(uint @program) {
            return Native_IsProgram(@program);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsProgramARB")]
        static extern bool Native_IsProgramARB(uint @program);

        public bool IsProgramARB(uint @program) {
            return Native_IsProgramARB(@program);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsProgramNV")]
        static extern bool Native_IsProgramNV(uint @id);

        public bool IsProgramNV(uint @id) {
            return Native_IsProgramNV(@id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsProgramPipeline")]
        static extern bool Native_IsProgramPipeline(uint @pipeline);

        public bool IsProgramPipeline(uint @pipeline) {
            return Native_IsProgramPipeline(@pipeline);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsProgramPipelineEXT")]
        static extern bool Native_IsProgramPipelineEXT(uint @pipeline);

        public bool IsProgramPipelineEXT(uint @pipeline) {
            return Native_IsProgramPipelineEXT(@pipeline);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsQuery")]
        static extern bool Native_IsQuery(uint @id);

        public bool IsQuery(uint @id) {
            return Native_IsQuery(@id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsQueryARB")]
        static extern bool Native_IsQueryARB(uint @id);

        public bool IsQueryARB(uint @id) {
            return Native_IsQueryARB(@id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsQueryEXT")]
        static extern bool Native_IsQueryEXT(uint @id);

        public bool IsQueryEXT(uint @id) {
            return Native_IsQueryEXT(@id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsRenderbuffer")]
        static extern bool Native_IsRenderbuffer(uint @renderbuffer);

        public bool IsRenderbuffer(uint @renderbuffer) {
            return Native_IsRenderbuffer(@renderbuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsRenderbufferEXT")]
        static extern bool Native_IsRenderbufferEXT(uint @renderbuffer);

        public bool IsRenderbufferEXT(uint @renderbuffer) {
            return Native_IsRenderbufferEXT(@renderbuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsRenderbufferOES")]
        static extern bool Native_IsRenderbufferOES(uint @renderbuffer);

        public bool IsRenderbufferOES(uint @renderbuffer) {
            return Native_IsRenderbufferOES(@renderbuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsSemaphoreEXT")]
        static extern bool Native_IsSemaphoreEXT(uint @semaphore);

        public bool IsSemaphoreEXT(uint @semaphore) {
            return Native_IsSemaphoreEXT(@semaphore);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsSampler")]
        static extern bool Native_IsSampler(uint @sampler);

        public bool IsSampler(uint @sampler) {
            return Native_IsSampler(@sampler);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsShader")]
        static extern bool Native_IsShader(uint @shader);

        public bool IsShader(uint @shader) {
            return Native_IsShader(@shader);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsStateNV")]
        static extern bool Native_IsStateNV(uint @state);

        public bool IsStateNV(uint @state) {
            return Native_IsStateNV(@state);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsSync")]
        static extern bool Native_IsSync(IntPtr @sync);

        public bool IsSync(IntPtr @sync) {
            return Native_IsSync(@sync);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsSyncAPPLE")]
        static extern bool Native_IsSyncAPPLE(IntPtr @sync);

        public bool IsSyncAPPLE(IntPtr @sync) {
            return Native_IsSyncAPPLE(@sync);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsTexture")]
        static extern bool Native_IsTexture(uint @texture);

        public bool IsTexture(uint @texture) {
            return Native_IsTexture(@texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsTextureEXT")]
        static extern bool Native_IsTextureEXT(uint @texture);

        public bool IsTextureEXT(uint @texture) {
            return Native_IsTextureEXT(@texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsTextureHandleResidentARB")]
        static extern bool Native_IsTextureHandleResidentARB(ulong @handle);

        public bool IsTextureHandleResidentARB(ulong @handle) {
            return Native_IsTextureHandleResidentARB(@handle);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsTextureHandleResidentNV")]
        static extern bool Native_IsTextureHandleResidentNV(ulong @handle);

        public bool IsTextureHandleResidentNV(ulong @handle) {
            return Native_IsTextureHandleResidentNV(@handle);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsTransformFeedback")]
        static extern bool Native_IsTransformFeedback(uint @id);

        public bool IsTransformFeedback(uint @id) {
            return Native_IsTransformFeedback(@id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsTransformFeedbackNV")]
        static extern bool Native_IsTransformFeedbackNV(uint @id);

        public bool IsTransformFeedbackNV(uint @id) {
            return Native_IsTransformFeedbackNV(@id);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsVariantEnabledEXT")]
        static extern bool Native_IsVariantEnabledEXT(uint @id, uint @cap);

        public bool IsVariantEnabledEXT(uint @id, uint @cap) {
            return Native_IsVariantEnabledEXT(@id, @cap);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsVertexArray")]
        static extern bool Native_IsVertexArray(uint @array);

        public bool IsVertexArray(uint @array) {
            return Native_IsVertexArray(@array);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsVertexArrayAPPLE")]
        static extern bool Native_IsVertexArrayAPPLE(uint @array);

        public bool IsVertexArrayAPPLE(uint @array) {
            return Native_IsVertexArrayAPPLE(@array);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsVertexArrayOES")]
        static extern bool Native_IsVertexArrayOES(uint @array);

        public bool IsVertexArrayOES(uint @array) {
            return Native_IsVertexArrayOES(@array);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glIsVertexAttribEnabledAPPLE")]
        static extern bool Native_IsVertexAttribEnabledAPPLE(uint @index, uint @pname);

        public bool IsVertexAttribEnabledAPPLE(uint @index, uint @pname) {
            return Native_IsVertexAttribEnabledAPPLE(@index, @pname);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLGPUCopyImageSubDataNVX")]
        static extern void Native_LGPUCopyImageSubDataNVX(uint @sourceGpu, uint @destinationGpuMask, uint @srcName, uint @srcTarget, int @srcLevel, int @srcX, int @srxY, int @srcZ, uint @dstName, uint @dstTarget, int @dstLevel, int @dstX, int @dstY, int @dstZ, int @width, int @height, int @depth);

        public void LGPUCopyImageSubDataNVX(uint @sourceGpu, uint @destinationGpuMask, uint @srcName, uint @srcTarget, int @srcLevel, int @srcX, int @srxY, int @srcZ, uint @dstName, uint @dstTarget, int @dstLevel, int @dstX, int @dstY, int @dstZ, int @width, int @height, int @depth) {
            Native_LGPUCopyImageSubDataNVX(@sourceGpu, @destinationGpuMask, @srcName, @srcTarget, @srcLevel, @srcX, @srxY, @srcZ, @dstName, @dstTarget, @dstLevel, @dstX, @dstY, @dstZ, @width, @height, @depth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLGPUInterlockNVX")]
        static extern void Native_LGPUInterlockNVX();

        public void LGPUInterlockNVX() {
            Native_LGPUInterlockNVX();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLGPUNamedBufferSubDataNVX")]
        static extern void Native_LGPUNamedBufferSubDataNVX(uint @gpuMask, uint @buffer, long @offset, long @size, byte* @data);

        public void LGPUNamedBufferSubDataNVX(uint @gpuMask, uint @buffer, long @offset, long @size, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_LGPUNamedBufferSubDataNVX(@gpuMask, @buffer, @offset, @size, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLabelObjectEXT")]
        static extern void Native_LabelObjectEXT(uint @type, uint @object, int @length, byte* @label);

        public void LabelObjectEXT(uint @type, uint @object, int @length, byte[] @label) {
            fixed (byte *ptr_label = @label) {
                Native_LabelObjectEXT(@type, @object, @length, @ptr_label);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightEnviSGIX")]
        static extern void Native_LightEnviSGIX(GlLightEnvParameterSGIX @pname, int @param);

        public void LightEnviSGIX(GlLightEnvParameterSGIX @pname, int @param) {
            Native_LightEnviSGIX(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightModelf")]
        static extern void Native_LightModelf(GlLightModelParameter @pname, float @param);

        public void LightModelf(GlLightModelParameter @pname, float @param) {
            Native_LightModelf(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightModelfv")]
        static extern void Native_LightModelfv(GlLightModelParameter @pname, float* @params);

        public void LightModelfv(GlLightModelParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_LightModelfv(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightModeli")]
        static extern void Native_LightModeli(GlLightModelParameter @pname, int @param);

        public void LightModeli(GlLightModelParameter @pname, int @param) {
            Native_LightModeli(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightModeliv")]
        static extern void Native_LightModeliv(GlLightModelParameter @pname, int* @params);

        public void LightModeliv(GlLightModelParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_LightModeliv(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightModelx")]
        static extern void Native_LightModelx(GlLightModelParameter @pname, int @param);

        public void LightModelx(GlLightModelParameter @pname, int @param) {
            Native_LightModelx(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightModelxOES")]
        static extern void Native_LightModelxOES(GlLightModelParameter @pname, int @param);

        public void LightModelxOES(GlLightModelParameter @pname, int @param) {
            Native_LightModelxOES(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightModelxv")]
        static extern void Native_LightModelxv(GlLightModelParameter @pname, int* @param);

        public void LightModelxv(GlLightModelParameter @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_LightModelxv(@pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightModelxvOES")]
        static extern void Native_LightModelxvOES(GlLightModelParameter @pname, int* @param);

        public void LightModelxvOES(GlLightModelParameter @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_LightModelxvOES(@pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightf")]
        static extern void Native_Lightf(GlLightName @light, GlLightParameter @pname, float @param);

        public void Lightf(GlLightName @light, GlLightParameter @pname, float @param) {
            Native_Lightf(@light, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightfv")]
        static extern void Native_Lightfv(GlLightName @light, GlLightParameter @pname, float* @params);

        public void Lightfv(GlLightName @light, GlLightParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_Lightfv(@light, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLighti")]
        static extern void Native_Lighti(GlLightName @light, GlLightParameter @pname, int @param);

        public void Lighti(GlLightName @light, GlLightParameter @pname, int @param) {
            Native_Lighti(@light, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightiv")]
        static extern void Native_Lightiv(GlLightName @light, GlLightParameter @pname, int* @params);

        public void Lightiv(GlLightName @light, GlLightParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_Lightiv(@light, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightx")]
        static extern void Native_Lightx(GlLightName @light, GlLightParameter @pname, int @param);

        public void Lightx(GlLightName @light, GlLightParameter @pname, int @param) {
            Native_Lightx(@light, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightxOES")]
        static extern void Native_LightxOES(GlLightName @light, GlLightParameter @pname, int @param);

        public void LightxOES(GlLightName @light, GlLightParameter @pname, int @param) {
            Native_LightxOES(@light, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightxv")]
        static extern void Native_Lightxv(GlLightName @light, GlLightParameter @pname, int* @params);

        public void Lightxv(GlLightName @light, GlLightParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_Lightxv(@light, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLightxvOES")]
        static extern void Native_LightxvOES(GlLightName @light, GlLightParameter @pname, int* @params);

        public void LightxvOES(GlLightName @light, GlLightParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_LightxvOES(@light, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLineStipple")]
        static extern void Native_LineStipple(int @factor, ushort @pattern);

        public void LineStipple(int @factor, ushort @pattern) {
            Native_LineStipple(@factor, @pattern);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLineWidth")]
        static extern void Native_LineWidth(float @width);

        public void LineWidth(float @width) {
            Native_LineWidth(@width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLineWidthx")]
        static extern void Native_LineWidthx(int @width);

        public void LineWidthx(int @width) {
            Native_LineWidthx(@width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLineWidthxOES")]
        static extern void Native_LineWidthxOES(int @width);

        public void LineWidthxOES(int @width) {
            Native_LineWidthxOES(@width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLinkProgram")]
        static extern void Native_LinkProgram(uint @program);

        public void LinkProgram(uint @program) {
            Native_LinkProgram(@program);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLinkProgramARB")]
        static extern void Native_LinkProgramARB(IntPtr @programObj);

        public void LinkProgramARB(IntPtr @programObj) {
            Native_LinkProgramARB(@programObj);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glListBase")]
        static extern void Native_ListBase(uint @base);

        public void ListBase(uint @base) {
            Native_ListBase(@base);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glListDrawCommandsStatesClientNV")]
        static extern void Native_ListDrawCommandsStatesClientNV(uint @list, uint @segment, byte** @indirects, int* @sizes, uint* @states, uint* @fbos, uint @count);

        public void ListDrawCommandsStatesClientNV(uint @list, uint @segment, byte[][] @indirects, int[] @sizes, uint[] @states, uint[] @fbos, uint @count) {
            IntPtr ptr_indirects = Marshal.AllocHGlobal(@indirects.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_indirects, @indirects, (void **) ptr_indirects.ToPointer(), 0, __fixedLocals => {
                    fixed (int *ptr_sizes = @sizes) {
                        fixed (uint *ptr_states = @states) {
                            fixed (uint *ptr_fbos = @fbos) {
                                Native_ListDrawCommandsStatesClientNV(@list, @segment, (byte **) ptr_indirects.ToPointer(), @ptr_sizes, @ptr_states, @ptr_fbos, @count);
                            }
                        }
                    }
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_indirects);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glListParameterfSGIX")]
        static extern void Native_ListParameterfSGIX(uint @list, GlListParameterName @pname, float @param);

        public void ListParameterfSGIX(uint @list, GlListParameterName @pname, float @param) {
            Native_ListParameterfSGIX(@list, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glListParameterfvSGIX")]
        static extern void Native_ListParameterfvSGIX(uint @list, GlListParameterName @pname, float* @params);

        public void ListParameterfvSGIX(uint @list, GlListParameterName @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_ListParameterfvSGIX(@list, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glListParameteriSGIX")]
        static extern void Native_ListParameteriSGIX(uint @list, GlListParameterName @pname, int @param);

        public void ListParameteriSGIX(uint @list, GlListParameterName @pname, int @param) {
            Native_ListParameteriSGIX(@list, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glListParameterivSGIX")]
        static extern void Native_ListParameterivSGIX(uint @list, GlListParameterName @pname, int* @params);

        public void ListParameterivSGIX(uint @list, GlListParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_ListParameterivSGIX(@list, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLoadIdentity")]
        static extern void Native_LoadIdentity();

        public void LoadIdentity() {
            Native_LoadIdentity();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLoadIdentityDeformationMapSGIX")]
        static extern void Native_LoadIdentityDeformationMapSGIX(GlFfdMaskSGIX @mask);

        public void LoadIdentityDeformationMapSGIX(GlFfdMaskSGIX @mask) {
            Native_LoadIdentityDeformationMapSGIX(@mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLoadMatrixd")]
        static extern void Native_LoadMatrixd(double* @m);

        public void LoadMatrixd(double[] @m) {
            fixed (double *ptr_m = @m) {
                Native_LoadMatrixd(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLoadMatrixf")]
        static extern void Native_LoadMatrixf(float* @m);

        public void LoadMatrixf(float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_LoadMatrixf(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLoadMatrixx")]
        static extern void Native_LoadMatrixx(int* @m);

        public void LoadMatrixx(int[] @m) {
            fixed (int *ptr_m = @m) {
                Native_LoadMatrixx(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLoadMatrixxOES")]
        static extern void Native_LoadMatrixxOES(int* @m);

        public void LoadMatrixxOES(int[] @m) {
            fixed (int *ptr_m = @m) {
                Native_LoadMatrixxOES(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLoadName")]
        static extern void Native_LoadName(uint @name);

        public void LoadName(uint @name) {
            Native_LoadName(@name);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLoadPaletteFromModelViewMatrixOES")]
        static extern void Native_LoadPaletteFromModelViewMatrixOES();

        public void LoadPaletteFromModelViewMatrixOES() {
            Native_LoadPaletteFromModelViewMatrixOES();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLoadProgramNV")]
        static extern void Native_LoadProgramNV(uint @target, uint @id, int @len, byte* @program);

        public void LoadProgramNV(uint @target, uint @id, int @len, byte[] @program) {
            fixed (byte *ptr_program = @program) {
                Native_LoadProgramNV(@target, @id, @len, @ptr_program);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLoadTransposeMatrixd")]
        static extern void Native_LoadTransposeMatrixd(double* @m);

        public void LoadTransposeMatrixd(double[] @m) {
            fixed (double *ptr_m = @m) {
                Native_LoadTransposeMatrixd(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLoadTransposeMatrixdARB")]
        static extern void Native_LoadTransposeMatrixdARB(double* @m);

        public void LoadTransposeMatrixdARB(double[] @m) {
            fixed (double *ptr_m = @m) {
                Native_LoadTransposeMatrixdARB(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLoadTransposeMatrixf")]
        static extern void Native_LoadTransposeMatrixf(float* @m);

        public void LoadTransposeMatrixf(float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_LoadTransposeMatrixf(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLoadTransposeMatrixfARB")]
        static extern void Native_LoadTransposeMatrixfARB(float* @m);

        public void LoadTransposeMatrixfARB(float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_LoadTransposeMatrixfARB(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLoadTransposeMatrixxOES")]
        static extern void Native_LoadTransposeMatrixxOES(int* @m);

        public void LoadTransposeMatrixxOES(int[] @m) {
            fixed (int *ptr_m = @m) {
                Native_LoadTransposeMatrixxOES(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLockArraysEXT")]
        static extern void Native_LockArraysEXT(int @first, int @count);

        public void LockArraysEXT(int @first, int @count) {
            Native_LockArraysEXT(@first, @count);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glLogicOp")]
        static extern void Native_LogicOp(GlLogicOp @opcode);

        public void LogicOp(GlLogicOp @opcode) {
            Native_LogicOp(@opcode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMakeBufferNonResidentNV")]
        static extern void Native_MakeBufferNonResidentNV(uint @target);

        public void MakeBufferNonResidentNV(uint @target) {
            Native_MakeBufferNonResidentNV(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMakeBufferResidentNV")]
        static extern void Native_MakeBufferResidentNV(uint @target, uint @access);

        public void MakeBufferResidentNV(uint @target, uint @access) {
            Native_MakeBufferResidentNV(@target, @access);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMakeImageHandleNonResidentARB")]
        static extern void Native_MakeImageHandleNonResidentARB(ulong @handle);

        public void MakeImageHandleNonResidentARB(ulong @handle) {
            Native_MakeImageHandleNonResidentARB(@handle);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMakeImageHandleNonResidentNV")]
        static extern void Native_MakeImageHandleNonResidentNV(ulong @handle);

        public void MakeImageHandleNonResidentNV(ulong @handle) {
            Native_MakeImageHandleNonResidentNV(@handle);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMakeImageHandleResidentARB")]
        static extern void Native_MakeImageHandleResidentARB(ulong @handle, uint @access);

        public void MakeImageHandleResidentARB(ulong @handle, uint @access) {
            Native_MakeImageHandleResidentARB(@handle, @access);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMakeImageHandleResidentNV")]
        static extern void Native_MakeImageHandleResidentNV(ulong @handle, uint @access);

        public void MakeImageHandleResidentNV(ulong @handle, uint @access) {
            Native_MakeImageHandleResidentNV(@handle, @access);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMakeNamedBufferNonResidentNV")]
        static extern void Native_MakeNamedBufferNonResidentNV(uint @buffer);

        public void MakeNamedBufferNonResidentNV(uint @buffer) {
            Native_MakeNamedBufferNonResidentNV(@buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMakeNamedBufferResidentNV")]
        static extern void Native_MakeNamedBufferResidentNV(uint @buffer, uint @access);

        public void MakeNamedBufferResidentNV(uint @buffer, uint @access) {
            Native_MakeNamedBufferResidentNV(@buffer, @access);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMakeTextureHandleNonResidentARB")]
        static extern void Native_MakeTextureHandleNonResidentARB(ulong @handle);

        public void MakeTextureHandleNonResidentARB(ulong @handle) {
            Native_MakeTextureHandleNonResidentARB(@handle);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMakeTextureHandleNonResidentNV")]
        static extern void Native_MakeTextureHandleNonResidentNV(ulong @handle);

        public void MakeTextureHandleNonResidentNV(ulong @handle) {
            Native_MakeTextureHandleNonResidentNV(@handle);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMakeTextureHandleResidentARB")]
        static extern void Native_MakeTextureHandleResidentARB(ulong @handle);

        public void MakeTextureHandleResidentARB(ulong @handle) {
            Native_MakeTextureHandleResidentARB(@handle);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMakeTextureHandleResidentNV")]
        static extern void Native_MakeTextureHandleResidentNV(ulong @handle);

        public void MakeTextureHandleResidentNV(ulong @handle) {
            Native_MakeTextureHandleResidentNV(@handle);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMap1d")]
        static extern void Native_Map1d(GlMapTarget @target, double @u1, double @u2, int @stride, int @order, double* @points);

        public void Map1d(GlMapTarget @target, double @u1, double @u2, int @stride, int @order, double[] @points) {
            fixed (double *ptr_points = @points) {
                Native_Map1d(@target, @u1, @u2, @stride, @order, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMap1f")]
        static extern void Native_Map1f(GlMapTarget @target, float @u1, float @u2, int @stride, int @order, float* @points);

        public void Map1f(GlMapTarget @target, float @u1, float @u2, int @stride, int @order, float[] @points) {
            fixed (float *ptr_points = @points) {
                Native_Map1f(@target, @u1, @u2, @stride, @order, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMap1xOES")]
        static extern void Native_Map1xOES(GlMapTarget @target, int @u1, int @u2, int @stride, int @order, int @points);

        public void Map1xOES(GlMapTarget @target, int @u1, int @u2, int @stride, int @order, int @points) {
            Native_Map1xOES(@target, @u1, @u2, @stride, @order, @points);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMap2d")]
        static extern void Native_Map2d(GlMapTarget @target, double @u1, double @u2, int @ustride, int @uorder, double @v1, double @v2, int @vstride, int @vorder, double* @points);

        public void Map2d(GlMapTarget @target, double @u1, double @u2, int @ustride, int @uorder, double @v1, double @v2, int @vstride, int @vorder, double[] @points) {
            fixed (double *ptr_points = @points) {
                Native_Map2d(@target, @u1, @u2, @ustride, @uorder, @v1, @v2, @vstride, @vorder, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMap2f")]
        static extern void Native_Map2f(GlMapTarget @target, float @u1, float @u2, int @ustride, int @uorder, float @v1, float @v2, int @vstride, int @vorder, float* @points);

        public void Map2f(GlMapTarget @target, float @u1, float @u2, int @ustride, int @uorder, float @v1, float @v2, int @vstride, int @vorder, float[] @points) {
            fixed (float *ptr_points = @points) {
                Native_Map2f(@target, @u1, @u2, @ustride, @uorder, @v1, @v2, @vstride, @vorder, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMap2xOES")]
        static extern void Native_Map2xOES(GlMapTarget @target, int @u1, int @u2, int @ustride, int @uorder, int @v1, int @v2, int @vstride, int @vorder, int @points);

        public void Map2xOES(GlMapTarget @target, int @u1, int @u2, int @ustride, int @uorder, int @v1, int @v2, int @vstride, int @vorder, int @points) {
            Native_Map2xOES(@target, @u1, @u2, @ustride, @uorder, @v1, @v2, @vstride, @vorder, @points);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapBuffer")]
        static extern IntPtr Native_MapBuffer(GlBufferTargetARB @target, GlBufferAccessARB @access);

        public IntPtr MapBuffer(GlBufferTargetARB @target, GlBufferAccessARB @access) {
            return Native_MapBuffer(@target, @access);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapBufferARB")]
        static extern IntPtr Native_MapBufferARB(GlBufferTargetARB @target, GlBufferAccessARB @access);

        public IntPtr MapBufferARB(GlBufferTargetARB @target, GlBufferAccessARB @access) {
            return Native_MapBufferARB(@target, @access);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapBufferOES")]
        static extern IntPtr Native_MapBufferOES(GlBufferTargetARB @target, GlBufferAccessARB @access);

        public IntPtr MapBufferOES(GlBufferTargetARB @target, GlBufferAccessARB @access) {
            return Native_MapBufferOES(@target, @access);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapBufferRange")]
        static extern IntPtr Native_MapBufferRange(GlBufferTargetARB @target, long @offset, long @length, GlBufferAccessMask @access);

        public IntPtr MapBufferRange(GlBufferTargetARB @target, long @offset, long @length, GlBufferAccessMask @access) {
            return Native_MapBufferRange(@target, @offset, @length, @access);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapBufferRangeEXT")]
        static extern IntPtr Native_MapBufferRangeEXT(GlBufferTargetARB @target, long @offset, long @length, GlBufferAccessMask @access);

        public IntPtr MapBufferRangeEXT(GlBufferTargetARB @target, long @offset, long @length, GlBufferAccessMask @access) {
            return Native_MapBufferRangeEXT(@target, @offset, @length, @access);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapControlPointsNV")]
        static extern void Native_MapControlPointsNV(uint @target, uint @index, uint @type, int @ustride, int @vstride, int @uorder, int @vorder, GlBoolean @packed, byte* @points);

        public void MapControlPointsNV(uint @target, uint @index, uint @type, int @ustride, int @vstride, int @uorder, int @vorder, GlBoolean @packed, byte[] @points) {
            fixed (byte *ptr_points = @points) {
                Native_MapControlPointsNV(@target, @index, @type, @ustride, @vstride, @uorder, @vorder, @packed, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapGrid1d")]
        static extern void Native_MapGrid1d(int @un, double @u1, double @u2);

        public void MapGrid1d(int @un, double @u1, double @u2) {
            Native_MapGrid1d(@un, @u1, @u2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapGrid1f")]
        static extern void Native_MapGrid1f(int @un, float @u1, float @u2);

        public void MapGrid1f(int @un, float @u1, float @u2) {
            Native_MapGrid1f(@un, @u1, @u2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapGrid1xOES")]
        static extern void Native_MapGrid1xOES(int @n, int @u1, int @u2);

        public void MapGrid1xOES(int @n, int @u1, int @u2) {
            Native_MapGrid1xOES(@n, @u1, @u2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapGrid2d")]
        static extern void Native_MapGrid2d(int @un, double @u1, double @u2, int @vn, double @v1, double @v2);

        public void MapGrid2d(int @un, double @u1, double @u2, int @vn, double @v1, double @v2) {
            Native_MapGrid2d(@un, @u1, @u2, @vn, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapGrid2f")]
        static extern void Native_MapGrid2f(int @un, float @u1, float @u2, int @vn, float @v1, float @v2);

        public void MapGrid2f(int @un, float @u1, float @u2, int @vn, float @v1, float @v2) {
            Native_MapGrid2f(@un, @u1, @u2, @vn, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapGrid2xOES")]
        static extern void Native_MapGrid2xOES(int @n, int @u1, int @u2, int @v1, int @v2);

        public void MapGrid2xOES(int @n, int @u1, int @u2, int @v1, int @v2) {
            Native_MapGrid2xOES(@n, @u1, @u2, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapNamedBuffer")]
        static extern IntPtr Native_MapNamedBuffer(uint @buffer, GlBufferAccessARB @access);

        public IntPtr MapNamedBuffer(uint @buffer, GlBufferAccessARB @access) {
            return Native_MapNamedBuffer(@buffer, @access);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapNamedBufferEXT")]
        static extern IntPtr Native_MapNamedBufferEXT(uint @buffer, GlBufferAccessARB @access);

        public IntPtr MapNamedBufferEXT(uint @buffer, GlBufferAccessARB @access) {
            return Native_MapNamedBufferEXT(@buffer, @access);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapNamedBufferRange")]
        static extern IntPtr Native_MapNamedBufferRange(uint @buffer, long @offset, long @length, GlBufferAccessMask @access);

        public IntPtr MapNamedBufferRange(uint @buffer, long @offset, long @length, GlBufferAccessMask @access) {
            return Native_MapNamedBufferRange(@buffer, @offset, @length, @access);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapNamedBufferRangeEXT")]
        static extern IntPtr Native_MapNamedBufferRangeEXT(uint @buffer, long @offset, long @length, GlBufferAccessMask @access);

        public IntPtr MapNamedBufferRangeEXT(uint @buffer, long @offset, long @length, GlBufferAccessMask @access) {
            return Native_MapNamedBufferRangeEXT(@buffer, @offset, @length, @access);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapObjectBufferATI")]
        static extern IntPtr Native_MapObjectBufferATI(uint @buffer);

        public IntPtr MapObjectBufferATI(uint @buffer) {
            return Native_MapObjectBufferATI(@buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapParameterfvNV")]
        static extern void Native_MapParameterfvNV(uint @target, uint @pname, float* @params);

        public void MapParameterfvNV(uint @target, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_MapParameterfvNV(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapParameterivNV")]
        static extern void Native_MapParameterivNV(uint @target, uint @pname, int* @params);

        public void MapParameterivNV(uint @target, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_MapParameterivNV(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapTexture2DINTEL")]
        static extern IntPtr Native_MapTexture2DINTEL(uint @texture, int @level, uint @access, int* @stride, uint* @layout);

        public IntPtr MapTexture2DINTEL(uint @texture, int @level, uint @access, int[] @stride, uint[] @layout) {
            fixed (int *ptr_stride = @stride) {
                fixed (uint *ptr_layout = @layout) {
                    return Native_MapTexture2DINTEL(@texture, @level, @access, @ptr_stride, @ptr_layout);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapVertexAttrib1dAPPLE")]
        static extern void Native_MapVertexAttrib1dAPPLE(uint @index, uint @size, double @u1, double @u2, int @stride, int @order, double* @points);

        public void MapVertexAttrib1dAPPLE(uint @index, uint @size, double @u1, double @u2, int @stride, int @order, double[] @points) {
            fixed (double *ptr_points = @points) {
                Native_MapVertexAttrib1dAPPLE(@index, @size, @u1, @u2, @stride, @order, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapVertexAttrib1fAPPLE")]
        static extern void Native_MapVertexAttrib1fAPPLE(uint @index, uint @size, float @u1, float @u2, int @stride, int @order, float* @points);

        public void MapVertexAttrib1fAPPLE(uint @index, uint @size, float @u1, float @u2, int @stride, int @order, float[] @points) {
            fixed (float *ptr_points = @points) {
                Native_MapVertexAttrib1fAPPLE(@index, @size, @u1, @u2, @stride, @order, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapVertexAttrib2dAPPLE")]
        static extern void Native_MapVertexAttrib2dAPPLE(uint @index, uint @size, double @u1, double @u2, int @ustride, int @uorder, double @v1, double @v2, int @vstride, int @vorder, double* @points);

        public void MapVertexAttrib2dAPPLE(uint @index, uint @size, double @u1, double @u2, int @ustride, int @uorder, double @v1, double @v2, int @vstride, int @vorder, double[] @points) {
            fixed (double *ptr_points = @points) {
                Native_MapVertexAttrib2dAPPLE(@index, @size, @u1, @u2, @ustride, @uorder, @v1, @v2, @vstride, @vorder, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMapVertexAttrib2fAPPLE")]
        static extern void Native_MapVertexAttrib2fAPPLE(uint @index, uint @size, float @u1, float @u2, int @ustride, int @uorder, float @v1, float @v2, int @vstride, int @vorder, float* @points);

        public void MapVertexAttrib2fAPPLE(uint @index, uint @size, float @u1, float @u2, int @ustride, int @uorder, float @v1, float @v2, int @vstride, int @vorder, float[] @points) {
            fixed (float *ptr_points = @points) {
                Native_MapVertexAttrib2fAPPLE(@index, @size, @u1, @u2, @ustride, @uorder, @v1, @v2, @vstride, @vorder, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMaterialf")]
        static extern void Native_Materialf(GlMaterialFace @face, GlMaterialParameter @pname, float @param);

        public void Materialf(GlMaterialFace @face, GlMaterialParameter @pname, float @param) {
            Native_Materialf(@face, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMaterialfv")]
        static extern void Native_Materialfv(GlMaterialFace @face, GlMaterialParameter @pname, float* @params);

        public void Materialfv(GlMaterialFace @face, GlMaterialParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_Materialfv(@face, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMateriali")]
        static extern void Native_Materiali(GlMaterialFace @face, GlMaterialParameter @pname, int @param);

        public void Materiali(GlMaterialFace @face, GlMaterialParameter @pname, int @param) {
            Native_Materiali(@face, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMaterialiv")]
        static extern void Native_Materialiv(GlMaterialFace @face, GlMaterialParameter @pname, int* @params);

        public void Materialiv(GlMaterialFace @face, GlMaterialParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_Materialiv(@face, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMaterialx")]
        static extern void Native_Materialx(GlMaterialFace @face, GlMaterialParameter @pname, int @param);

        public void Materialx(GlMaterialFace @face, GlMaterialParameter @pname, int @param) {
            Native_Materialx(@face, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMaterialxOES")]
        static extern void Native_MaterialxOES(GlMaterialFace @face, GlMaterialParameter @pname, int @param);

        public void MaterialxOES(GlMaterialFace @face, GlMaterialParameter @pname, int @param) {
            Native_MaterialxOES(@face, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMaterialxv")]
        static extern void Native_Materialxv(GlMaterialFace @face, GlMaterialParameter @pname, int* @param);

        public void Materialxv(GlMaterialFace @face, GlMaterialParameter @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_Materialxv(@face, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMaterialxvOES")]
        static extern void Native_MaterialxvOES(GlMaterialFace @face, GlMaterialParameter @pname, int* @param);

        public void MaterialxvOES(GlMaterialFace @face, GlMaterialParameter @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_MaterialxvOES(@face, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixFrustumEXT")]
        static extern void Native_MatrixFrustumEXT(GlMatrixMode @mode, double @left, double @right, double @bottom, double @top, double @zNear, double @zFar);

        public void MatrixFrustumEXT(GlMatrixMode @mode, double @left, double @right, double @bottom, double @top, double @zNear, double @zFar) {
            Native_MatrixFrustumEXT(@mode, @left, @right, @bottom, @top, @zNear, @zFar);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixIndexPointerARB")]
        static extern void Native_MatrixIndexPointerARB(int @size, uint @type, int @stride, byte* @pointer);

        public void MatrixIndexPointerARB(int @size, uint @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_MatrixIndexPointerARB(@size, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixIndexPointerOES")]
        static extern void Native_MatrixIndexPointerOES(int @size, uint @type, int @stride, byte* @pointer);

        public void MatrixIndexPointerOES(int @size, uint @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_MatrixIndexPointerOES(@size, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixIndexubvARB")]
        static extern void Native_MatrixIndexubvARB(int @size, byte* @indices);

        public void MatrixIndexubvARB(int @size, byte[] @indices) {
            fixed (byte *ptr_indices = @indices) {
                Native_MatrixIndexubvARB(@size, @ptr_indices);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixIndexuivARB")]
        static extern void Native_MatrixIndexuivARB(int @size, uint* @indices);

        public void MatrixIndexuivARB(int @size, uint[] @indices) {
            fixed (uint *ptr_indices = @indices) {
                Native_MatrixIndexuivARB(@size, @ptr_indices);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixIndexusvARB")]
        static extern void Native_MatrixIndexusvARB(int @size, ushort* @indices);

        public void MatrixIndexusvARB(int @size, ushort[] @indices) {
            fixed (ushort *ptr_indices = @indices) {
                Native_MatrixIndexusvARB(@size, @ptr_indices);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixLoad3x2fNV")]
        static extern void Native_MatrixLoad3x2fNV(uint @matrixMode, float* @m);

        public void MatrixLoad3x2fNV(uint @matrixMode, float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_MatrixLoad3x2fNV(@matrixMode, @ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixLoad3x3fNV")]
        static extern void Native_MatrixLoad3x3fNV(uint @matrixMode, float* @m);

        public void MatrixLoad3x3fNV(uint @matrixMode, float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_MatrixLoad3x3fNV(@matrixMode, @ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixLoadIdentityEXT")]
        static extern void Native_MatrixLoadIdentityEXT(GlMatrixMode @mode);

        public void MatrixLoadIdentityEXT(GlMatrixMode @mode) {
            Native_MatrixLoadIdentityEXT(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixLoadTranspose3x3fNV")]
        static extern void Native_MatrixLoadTranspose3x3fNV(uint @matrixMode, float* @m);

        public void MatrixLoadTranspose3x3fNV(uint @matrixMode, float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_MatrixLoadTranspose3x3fNV(@matrixMode, @ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixLoadTransposedEXT")]
        static extern void Native_MatrixLoadTransposedEXT(GlMatrixMode @mode, double* @m);

        public void MatrixLoadTransposedEXT(GlMatrixMode @mode, double[] @m) {
            fixed (double *ptr_m = @m) {
                Native_MatrixLoadTransposedEXT(@mode, @ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixLoadTransposefEXT")]
        static extern void Native_MatrixLoadTransposefEXT(GlMatrixMode @mode, float* @m);

        public void MatrixLoadTransposefEXT(GlMatrixMode @mode, float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_MatrixLoadTransposefEXT(@mode, @ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixLoaddEXT")]
        static extern void Native_MatrixLoaddEXT(GlMatrixMode @mode, double* @m);

        public void MatrixLoaddEXT(GlMatrixMode @mode, double[] @m) {
            fixed (double *ptr_m = @m) {
                Native_MatrixLoaddEXT(@mode, @ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixLoadfEXT")]
        static extern void Native_MatrixLoadfEXT(GlMatrixMode @mode, float* @m);

        public void MatrixLoadfEXT(GlMatrixMode @mode, float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_MatrixLoadfEXT(@mode, @ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixMode")]
        static extern void Native_MatrixMode(GlMatrixMode @mode);

        public void MatrixMode(GlMatrixMode @mode) {
            Native_MatrixMode(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixMult3x2fNV")]
        static extern void Native_MatrixMult3x2fNV(uint @matrixMode, float* @m);

        public void MatrixMult3x2fNV(uint @matrixMode, float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_MatrixMult3x2fNV(@matrixMode, @ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixMult3x3fNV")]
        static extern void Native_MatrixMult3x3fNV(uint @matrixMode, float* @m);

        public void MatrixMult3x3fNV(uint @matrixMode, float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_MatrixMult3x3fNV(@matrixMode, @ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixMultTranspose3x3fNV")]
        static extern void Native_MatrixMultTranspose3x3fNV(uint @matrixMode, float* @m);

        public void MatrixMultTranspose3x3fNV(uint @matrixMode, float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_MatrixMultTranspose3x3fNV(@matrixMode, @ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixMultTransposedEXT")]
        static extern void Native_MatrixMultTransposedEXT(GlMatrixMode @mode, double* @m);

        public void MatrixMultTransposedEXT(GlMatrixMode @mode, double[] @m) {
            fixed (double *ptr_m = @m) {
                Native_MatrixMultTransposedEXT(@mode, @ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixMultTransposefEXT")]
        static extern void Native_MatrixMultTransposefEXT(GlMatrixMode @mode, float* @m);

        public void MatrixMultTransposefEXT(GlMatrixMode @mode, float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_MatrixMultTransposefEXT(@mode, @ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixMultdEXT")]
        static extern void Native_MatrixMultdEXT(GlMatrixMode @mode, double* @m);

        public void MatrixMultdEXT(GlMatrixMode @mode, double[] @m) {
            fixed (double *ptr_m = @m) {
                Native_MatrixMultdEXT(@mode, @ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixMultfEXT")]
        static extern void Native_MatrixMultfEXT(GlMatrixMode @mode, float* @m);

        public void MatrixMultfEXT(GlMatrixMode @mode, float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_MatrixMultfEXT(@mode, @ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixOrthoEXT")]
        static extern void Native_MatrixOrthoEXT(GlMatrixMode @mode, double @left, double @right, double @bottom, double @top, double @zNear, double @zFar);

        public void MatrixOrthoEXT(GlMatrixMode @mode, double @left, double @right, double @bottom, double @top, double @zNear, double @zFar) {
            Native_MatrixOrthoEXT(@mode, @left, @right, @bottom, @top, @zNear, @zFar);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixPopEXT")]
        static extern void Native_MatrixPopEXT(GlMatrixMode @mode);

        public void MatrixPopEXT(GlMatrixMode @mode) {
            Native_MatrixPopEXT(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixPushEXT")]
        static extern void Native_MatrixPushEXT(GlMatrixMode @mode);

        public void MatrixPushEXT(GlMatrixMode @mode) {
            Native_MatrixPushEXT(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixRotatedEXT")]
        static extern void Native_MatrixRotatedEXT(GlMatrixMode @mode, double @angle, double @x, double @y, double @z);

        public void MatrixRotatedEXT(GlMatrixMode @mode, double @angle, double @x, double @y, double @z) {
            Native_MatrixRotatedEXT(@mode, @angle, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixRotatefEXT")]
        static extern void Native_MatrixRotatefEXT(GlMatrixMode @mode, float @angle, float @x, float @y, float @z);

        public void MatrixRotatefEXT(GlMatrixMode @mode, float @angle, float @x, float @y, float @z) {
            Native_MatrixRotatefEXT(@mode, @angle, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixScaledEXT")]
        static extern void Native_MatrixScaledEXT(GlMatrixMode @mode, double @x, double @y, double @z);

        public void MatrixScaledEXT(GlMatrixMode @mode, double @x, double @y, double @z) {
            Native_MatrixScaledEXT(@mode, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixScalefEXT")]
        static extern void Native_MatrixScalefEXT(GlMatrixMode @mode, float @x, float @y, float @z);

        public void MatrixScalefEXT(GlMatrixMode @mode, float @x, float @y, float @z) {
            Native_MatrixScalefEXT(@mode, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixTranslatedEXT")]
        static extern void Native_MatrixTranslatedEXT(GlMatrixMode @mode, double @x, double @y, double @z);

        public void MatrixTranslatedEXT(GlMatrixMode @mode, double @x, double @y, double @z) {
            Native_MatrixTranslatedEXT(@mode, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMatrixTranslatefEXT")]
        static extern void Native_MatrixTranslatefEXT(GlMatrixMode @mode, float @x, float @y, float @z);

        public void MatrixTranslatefEXT(GlMatrixMode @mode, float @x, float @y, float @z) {
            Native_MatrixTranslatefEXT(@mode, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMaxShaderCompilerThreadsKHR")]
        static extern void Native_MaxShaderCompilerThreadsKHR(uint @count);

        public void MaxShaderCompilerThreadsKHR(uint @count) {
            Native_MaxShaderCompilerThreadsKHR(@count);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMaxShaderCompilerThreadsARB")]
        static extern void Native_MaxShaderCompilerThreadsARB(uint @count);

        public void MaxShaderCompilerThreadsARB(uint @count) {
            Native_MaxShaderCompilerThreadsARB(@count);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMemoryBarrier")]
        static extern void Native_MemoryBarrier(GlMemoryBarrierMask @barriers);

        public void MemoryBarrier(GlMemoryBarrierMask @barriers) {
            Native_MemoryBarrier(@barriers);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMemoryBarrierByRegion")]
        static extern void Native_MemoryBarrierByRegion(GlMemoryBarrierMask @barriers);

        public void MemoryBarrierByRegion(GlMemoryBarrierMask @barriers) {
            Native_MemoryBarrierByRegion(@barriers);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMemoryBarrierEXT")]
        static extern void Native_MemoryBarrierEXT(GlMemoryBarrierMask @barriers);

        public void MemoryBarrierEXT(GlMemoryBarrierMask @barriers) {
            Native_MemoryBarrierEXT(@barriers);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMemoryObjectParameterivEXT")]
        static extern void Native_MemoryObjectParameterivEXT(uint @memoryObject, GlMemoryObjectParameterName @pname, int* @params);

        public void MemoryObjectParameterivEXT(uint @memoryObject, GlMemoryObjectParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_MemoryObjectParameterivEXT(@memoryObject, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMinSampleShading")]
        static extern void Native_MinSampleShading(float @value);

        public void MinSampleShading(float @value) {
            Native_MinSampleShading(@value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMinSampleShadingARB")]
        static extern void Native_MinSampleShadingARB(float @value);

        public void MinSampleShadingARB(float @value) {
            Native_MinSampleShadingARB(@value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMinSampleShadingOES")]
        static extern void Native_MinSampleShadingOES(float @value);

        public void MinSampleShadingOES(float @value) {
            Native_MinSampleShadingOES(@value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMinmax")]
        static extern void Native_Minmax(GlMinmaxTargetEXT @target, GlInternalFormat @internalformat, GlBoolean @sink);

        public void Minmax(GlMinmaxTargetEXT @target, GlInternalFormat @internalformat, GlBoolean @sink) {
            Native_Minmax(@target, @internalformat, @sink);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMinmaxEXT")]
        static extern void Native_MinmaxEXT(GlMinmaxTargetEXT @target, GlInternalFormat @internalformat, GlBoolean @sink);

        public void MinmaxEXT(GlMinmaxTargetEXT @target, GlInternalFormat @internalformat, GlBoolean @sink) {
            Native_MinmaxEXT(@target, @internalformat, @sink);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultMatrixd")]
        static extern void Native_MultMatrixd(double* @m);

        public void MultMatrixd(double[] @m) {
            fixed (double *ptr_m = @m) {
                Native_MultMatrixd(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultMatrixf")]
        static extern void Native_MultMatrixf(float* @m);

        public void MultMatrixf(float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_MultMatrixf(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultMatrixx")]
        static extern void Native_MultMatrixx(int* @m);

        public void MultMatrixx(int[] @m) {
            fixed (int *ptr_m = @m) {
                Native_MultMatrixx(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultMatrixxOES")]
        static extern void Native_MultMatrixxOES(int* @m);

        public void MultMatrixxOES(int[] @m) {
            fixed (int *ptr_m = @m) {
                Native_MultMatrixxOES(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultTransposeMatrixd")]
        static extern void Native_MultTransposeMatrixd(double* @m);

        public void MultTransposeMatrixd(double[] @m) {
            fixed (double *ptr_m = @m) {
                Native_MultTransposeMatrixd(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultTransposeMatrixdARB")]
        static extern void Native_MultTransposeMatrixdARB(double* @m);

        public void MultTransposeMatrixdARB(double[] @m) {
            fixed (double *ptr_m = @m) {
                Native_MultTransposeMatrixdARB(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultTransposeMatrixf")]
        static extern void Native_MultTransposeMatrixf(float* @m);

        public void MultTransposeMatrixf(float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_MultTransposeMatrixf(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultTransposeMatrixfARB")]
        static extern void Native_MultTransposeMatrixfARB(float* @m);

        public void MultTransposeMatrixfARB(float[] @m) {
            fixed (float *ptr_m = @m) {
                Native_MultTransposeMatrixfARB(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultTransposeMatrixxOES")]
        static extern void Native_MultTransposeMatrixxOES(int* @m);

        public void MultTransposeMatrixxOES(int[] @m) {
            fixed (int *ptr_m = @m) {
                Native_MultTransposeMatrixxOES(@ptr_m);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawArrays")]
        static extern void Native_MultiDrawArrays(GlPrimitiveType @mode, int* @first, int* @count, int @drawcount);

        public void MultiDrawArrays(GlPrimitiveType @mode, int[] @first, int[] @count, int @drawcount) {
            fixed (int *ptr_first = @first) {
                fixed (int *ptr_count = @count) {
                    Native_MultiDrawArrays(@mode, @ptr_first, @ptr_count, @drawcount);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawArraysEXT")]
        static extern void Native_MultiDrawArraysEXT(GlPrimitiveType @mode, int* @first, int* @count, int @primcount);

        public void MultiDrawArraysEXT(GlPrimitiveType @mode, int[] @first, int[] @count, int @primcount) {
            fixed (int *ptr_first = @first) {
                fixed (int *ptr_count = @count) {
                    Native_MultiDrawArraysEXT(@mode, @ptr_first, @ptr_count, @primcount);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawArraysIndirect")]
        static extern void Native_MultiDrawArraysIndirect(GlPrimitiveType @mode, byte* @indirect, int @drawcount, int @stride);

        public void MultiDrawArraysIndirect(GlPrimitiveType @mode, byte[] @indirect, int @drawcount, int @stride) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_MultiDrawArraysIndirect(@mode, @ptr_indirect, @drawcount, @stride);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawArraysIndirectAMD")]
        static extern void Native_MultiDrawArraysIndirectAMD(GlPrimitiveType @mode, byte* @indirect, int @primcount, int @stride);

        public void MultiDrawArraysIndirectAMD(GlPrimitiveType @mode, byte[] @indirect, int @primcount, int @stride) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_MultiDrawArraysIndirectAMD(@mode, @ptr_indirect, @primcount, @stride);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawArraysIndirectBindlessCountNV")]
        static extern void Native_MultiDrawArraysIndirectBindlessCountNV(GlPrimitiveType @mode, byte* @indirect, int @drawCount, int @maxDrawCount, int @stride, int @vertexBufferCount);

        public void MultiDrawArraysIndirectBindlessCountNV(GlPrimitiveType @mode, byte[] @indirect, int @drawCount, int @maxDrawCount, int @stride, int @vertexBufferCount) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_MultiDrawArraysIndirectBindlessCountNV(@mode, @ptr_indirect, @drawCount, @maxDrawCount, @stride, @vertexBufferCount);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawArraysIndirectBindlessNV")]
        static extern void Native_MultiDrawArraysIndirectBindlessNV(GlPrimitiveType @mode, byte* @indirect, int @drawCount, int @stride, int @vertexBufferCount);

        public void MultiDrawArraysIndirectBindlessNV(GlPrimitiveType @mode, byte[] @indirect, int @drawCount, int @stride, int @vertexBufferCount) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_MultiDrawArraysIndirectBindlessNV(@mode, @ptr_indirect, @drawCount, @stride, @vertexBufferCount);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawArraysIndirectCount")]
        static extern void Native_MultiDrawArraysIndirectCount(GlPrimitiveType @mode, byte* @indirect, long @drawcount, int @maxdrawcount, int @stride);

        public void MultiDrawArraysIndirectCount(GlPrimitiveType @mode, byte[] @indirect, long @drawcount, int @maxdrawcount, int @stride) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_MultiDrawArraysIndirectCount(@mode, @ptr_indirect, @drawcount, @maxdrawcount, @stride);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawArraysIndirectCountARB")]
        static extern void Native_MultiDrawArraysIndirectCountARB(GlPrimitiveType @mode, byte* @indirect, long @drawcount, int @maxdrawcount, int @stride);

        public void MultiDrawArraysIndirectCountARB(GlPrimitiveType @mode, byte[] @indirect, long @drawcount, int @maxdrawcount, int @stride) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_MultiDrawArraysIndirectCountARB(@mode, @ptr_indirect, @drawcount, @maxdrawcount, @stride);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawArraysIndirectEXT")]
        static extern void Native_MultiDrawArraysIndirectEXT(GlPrimitiveType @mode, byte* @indirect, int @drawcount, int @stride);

        public void MultiDrawArraysIndirectEXT(GlPrimitiveType @mode, byte[] @indirect, int @drawcount, int @stride) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_MultiDrawArraysIndirectEXT(@mode, @ptr_indirect, @drawcount, @stride);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawElementArrayAPPLE")]
        static extern void Native_MultiDrawElementArrayAPPLE(GlPrimitiveType @mode, int* @first, int* @count, int @primcount);

        public void MultiDrawElementArrayAPPLE(GlPrimitiveType @mode, int[] @first, int[] @count, int @primcount) {
            fixed (int *ptr_first = @first) {
                fixed (int *ptr_count = @count) {
                    Native_MultiDrawElementArrayAPPLE(@mode, @ptr_first, @ptr_count, @primcount);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawElements")]
        static extern void Native_MultiDrawElements(GlPrimitiveType @mode, int* @count, GlDrawElementsType @type, byte** @indices, int @drawcount);

        public void MultiDrawElements(GlPrimitiveType @mode, int[] @count, GlDrawElementsType @type, byte[][] @indices, int @drawcount) {
            fixed (int *ptr_count = @count) {
                IntPtr ptr_indices = Marshal.AllocHGlobal(@indices.Length * sizeof(void *));
                try {
                    ConvertDoubleArray_byte(ptr_indices, @indices, (void **) ptr_indices.ToPointer(), 0, __fixedLocals => {
                        Native_MultiDrawElements(@mode, (int *) __fixedLocals[0], @type, (byte **) ptr_indices.ToPointer(), @drawcount);
                    }, ptr_count);
                } finally {
                    Marshal.FreeHGlobal(ptr_indices);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawElementsBaseVertex")]
        static extern void Native_MultiDrawElementsBaseVertex(GlPrimitiveType @mode, int* @count, GlDrawElementsType @type, byte** @indices, int @drawcount, int* @basevertex);

        public void MultiDrawElementsBaseVertex(GlPrimitiveType @mode, int[] @count, GlDrawElementsType @type, byte[][] @indices, int @drawcount, int[] @basevertex) {
            fixed (int *ptr_count = @count) {
                IntPtr ptr_indices = Marshal.AllocHGlobal(@indices.Length * sizeof(void *));
                try {
                    ConvertDoubleArray_byte(ptr_indices, @indices, (void **) ptr_indices.ToPointer(), 0, __fixedLocals => {
                        fixed (int *ptr_basevertex = @basevertex) {
                            Native_MultiDrawElementsBaseVertex(@mode, (int *) __fixedLocals[0], @type, (byte **) ptr_indices.ToPointer(), @drawcount, @ptr_basevertex);
                        }
                    }, ptr_count);
                } finally {
                    Marshal.FreeHGlobal(ptr_indices);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawElementsBaseVertexEXT")]
        static extern void Native_MultiDrawElementsBaseVertexEXT(GlPrimitiveType @mode, int* @count, GlDrawElementsType @type, byte** @indices, int @primcount, int* @basevertex);

        public void MultiDrawElementsBaseVertexEXT(GlPrimitiveType @mode, int[] @count, GlDrawElementsType @type, byte[][] @indices, int @primcount, int[] @basevertex) {
            fixed (int *ptr_count = @count) {
                IntPtr ptr_indices = Marshal.AllocHGlobal(@indices.Length * sizeof(void *));
                try {
                    ConvertDoubleArray_byte(ptr_indices, @indices, (void **) ptr_indices.ToPointer(), 0, __fixedLocals => {
                        fixed (int *ptr_basevertex = @basevertex) {
                            Native_MultiDrawElementsBaseVertexEXT(@mode, (int *) __fixedLocals[0], @type, (byte **) ptr_indices.ToPointer(), @primcount, @ptr_basevertex);
                        }
                    }, ptr_count);
                } finally {
                    Marshal.FreeHGlobal(ptr_indices);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawElementsEXT")]
        static extern void Native_MultiDrawElementsEXT(GlPrimitiveType @mode, int* @count, GlDrawElementsType @type, byte** @indices, int @primcount);

        public void MultiDrawElementsEXT(GlPrimitiveType @mode, int[] @count, GlDrawElementsType @type, byte[][] @indices, int @primcount) {
            fixed (int *ptr_count = @count) {
                IntPtr ptr_indices = Marshal.AllocHGlobal(@indices.Length * sizeof(void *));
                try {
                    ConvertDoubleArray_byte(ptr_indices, @indices, (void **) ptr_indices.ToPointer(), 0, __fixedLocals => {
                        Native_MultiDrawElementsEXT(@mode, (int *) __fixedLocals[0], @type, (byte **) ptr_indices.ToPointer(), @primcount);
                    }, ptr_count);
                } finally {
                    Marshal.FreeHGlobal(ptr_indices);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawElementsIndirect")]
        static extern void Native_MultiDrawElementsIndirect(GlPrimitiveType @mode, GlDrawElementsType @type, byte* @indirect, int @drawcount, int @stride);

        public void MultiDrawElementsIndirect(GlPrimitiveType @mode, GlDrawElementsType @type, byte[] @indirect, int @drawcount, int @stride) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_MultiDrawElementsIndirect(@mode, @type, @ptr_indirect, @drawcount, @stride);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawElementsIndirectAMD")]
        static extern void Native_MultiDrawElementsIndirectAMD(GlPrimitiveType @mode, GlDrawElementsType @type, byte* @indirect, int @primcount, int @stride);

        public void MultiDrawElementsIndirectAMD(GlPrimitiveType @mode, GlDrawElementsType @type, byte[] @indirect, int @primcount, int @stride) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_MultiDrawElementsIndirectAMD(@mode, @type, @ptr_indirect, @primcount, @stride);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawElementsIndirectBindlessCountNV")]
        static extern void Native_MultiDrawElementsIndirectBindlessCountNV(GlPrimitiveType @mode, GlDrawElementsType @type, byte* @indirect, int @drawCount, int @maxDrawCount, int @stride, int @vertexBufferCount);

        public void MultiDrawElementsIndirectBindlessCountNV(GlPrimitiveType @mode, GlDrawElementsType @type, byte[] @indirect, int @drawCount, int @maxDrawCount, int @stride, int @vertexBufferCount) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_MultiDrawElementsIndirectBindlessCountNV(@mode, @type, @ptr_indirect, @drawCount, @maxDrawCount, @stride, @vertexBufferCount);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawElementsIndirectBindlessNV")]
        static extern void Native_MultiDrawElementsIndirectBindlessNV(GlPrimitiveType @mode, GlDrawElementsType @type, byte* @indirect, int @drawCount, int @stride, int @vertexBufferCount);

        public void MultiDrawElementsIndirectBindlessNV(GlPrimitiveType @mode, GlDrawElementsType @type, byte[] @indirect, int @drawCount, int @stride, int @vertexBufferCount) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_MultiDrawElementsIndirectBindlessNV(@mode, @type, @ptr_indirect, @drawCount, @stride, @vertexBufferCount);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawElementsIndirectCount")]
        static extern void Native_MultiDrawElementsIndirectCount(GlPrimitiveType @mode, uint @type, byte* @indirect, long @drawcount, int @maxdrawcount, int @stride);

        public void MultiDrawElementsIndirectCount(GlPrimitiveType @mode, uint @type, byte[] @indirect, long @drawcount, int @maxdrawcount, int @stride) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_MultiDrawElementsIndirectCount(@mode, @type, @ptr_indirect, @drawcount, @maxdrawcount, @stride);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawElementsIndirectCountARB")]
        static extern void Native_MultiDrawElementsIndirectCountARB(GlPrimitiveType @mode, GlDrawElementsType @type, byte* @indirect, long @drawcount, int @maxdrawcount, int @stride);

        public void MultiDrawElementsIndirectCountARB(GlPrimitiveType @mode, GlDrawElementsType @type, byte[] @indirect, long @drawcount, int @maxdrawcount, int @stride) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_MultiDrawElementsIndirectCountARB(@mode, @type, @ptr_indirect, @drawcount, @maxdrawcount, @stride);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawElementsIndirectEXT")]
        static extern void Native_MultiDrawElementsIndirectEXT(GlPrimitiveType @mode, GlDrawElementsType @type, byte* @indirect, int @drawcount, int @stride);

        public void MultiDrawElementsIndirectEXT(GlPrimitiveType @mode, GlDrawElementsType @type, byte[] @indirect, int @drawcount, int @stride) {
            fixed (byte *ptr_indirect = @indirect) {
                Native_MultiDrawElementsIndirectEXT(@mode, @type, @ptr_indirect, @drawcount, @stride);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiDrawRangeElementArrayAPPLE")]
        static extern void Native_MultiDrawRangeElementArrayAPPLE(GlPrimitiveType @mode, uint @start, uint @end, int* @first, int* @count, int @primcount);

        public void MultiDrawRangeElementArrayAPPLE(GlPrimitiveType @mode, uint @start, uint @end, int[] @first, int[] @count, int @primcount) {
            fixed (int *ptr_first = @first) {
                fixed (int *ptr_count = @count) {
                    Native_MultiDrawRangeElementArrayAPPLE(@mode, @start, @end, @ptr_first, @ptr_count, @primcount);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiModeDrawArraysIBM")]
        static extern void Native_MultiModeDrawArraysIBM(GlPrimitiveType* @mode, int* @first, int* @count, int @primcount, int @modestride);

        public void MultiModeDrawArraysIBM(GlPrimitiveType[] @mode, int[] @first, int[] @count, int @primcount, int @modestride) {
            fixed (GlPrimitiveType *ptr_mode = @mode) {
                fixed (int *ptr_first = @first) {
                    fixed (int *ptr_count = @count) {
                        Native_MultiModeDrawArraysIBM(@ptr_mode, @ptr_first, @ptr_count, @primcount, @modestride);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiModeDrawElementsIBM")]
        static extern void Native_MultiModeDrawElementsIBM(GlPrimitiveType* @mode, int* @count, GlDrawElementsType @type, byte** @indices, int @primcount, int @modestride);

        public void MultiModeDrawElementsIBM(GlPrimitiveType[] @mode, int[] @count, GlDrawElementsType @type, byte[][] @indices, int @primcount, int @modestride) {
            fixed (GlPrimitiveType *ptr_mode = @mode) {
                fixed (int *ptr_count = @count) {
                    IntPtr ptr_indices = Marshal.AllocHGlobal(@indices.Length * sizeof(void *));
                    try {
                        ConvertDoubleArray_byte(ptr_indices, @indices, (void **) ptr_indices.ToPointer(), 0, __fixedLocals => {
                            Native_MultiModeDrawElementsIBM((GlPrimitiveType *) __fixedLocals[0], (int *) __fixedLocals[1], @type, (byte **) ptr_indices.ToPointer(), @primcount, @modestride);
                        }, ptr_mode, ptr_count);
                    } finally {
                        Marshal.FreeHGlobal(ptr_indices);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexBufferEXT")]
        static extern void Native_MultiTexBufferEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlTypeEnum @internalformat, uint @buffer);

        public void MultiTexBufferEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlTypeEnum @internalformat, uint @buffer) {
            Native_MultiTexBufferEXT(@texunit, @target, @internalformat, @buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1bOES")]
        static extern void Native_MultiTexCoord1bOES(GlTextureUnit @texture, sbyte @s);

        public void MultiTexCoord1bOES(GlTextureUnit @texture, sbyte @s) {
            Native_MultiTexCoord1bOES(@texture, @s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1bvOES")]
        static extern void Native_MultiTexCoord1bvOES(GlTextureUnit @texture, sbyte* @coords);

        public void MultiTexCoord1bvOES(GlTextureUnit @texture, sbyte[] @coords) {
            fixed (sbyte *ptr_coords = @coords) {
                Native_MultiTexCoord1bvOES(@texture, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1d")]
        static extern void Native_MultiTexCoord1d(GlTextureUnit @target, double @s);

        public void MultiTexCoord1d(GlTextureUnit @target, double @s) {
            Native_MultiTexCoord1d(@target, @s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1dARB")]
        static extern void Native_MultiTexCoord1dARB(GlTextureUnit @target, double @s);

        public void MultiTexCoord1dARB(GlTextureUnit @target, double @s) {
            Native_MultiTexCoord1dARB(@target, @s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1dv")]
        static extern void Native_MultiTexCoord1dv(GlTextureUnit @target, double* @v);

        public void MultiTexCoord1dv(GlTextureUnit @target, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_MultiTexCoord1dv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1dvARB")]
        static extern void Native_MultiTexCoord1dvARB(GlTextureUnit @target, double* @v);

        public void MultiTexCoord1dvARB(GlTextureUnit @target, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_MultiTexCoord1dvARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1f")]
        static extern void Native_MultiTexCoord1f(GlTextureUnit @target, float @s);

        public void MultiTexCoord1f(GlTextureUnit @target, float @s) {
            Native_MultiTexCoord1f(@target, @s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1fARB")]
        static extern void Native_MultiTexCoord1fARB(GlTextureUnit @target, float @s);

        public void MultiTexCoord1fARB(GlTextureUnit @target, float @s) {
            Native_MultiTexCoord1fARB(@target, @s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1fv")]
        static extern void Native_MultiTexCoord1fv(GlTextureUnit @target, float* @v);

        public void MultiTexCoord1fv(GlTextureUnit @target, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_MultiTexCoord1fv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1fvARB")]
        static extern void Native_MultiTexCoord1fvARB(GlTextureUnit @target, float* @v);

        public void MultiTexCoord1fvARB(GlTextureUnit @target, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_MultiTexCoord1fvARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1hNV")]
        static extern void Native_MultiTexCoord1hNV(GlTextureUnit @target, ushort @s);

        public void MultiTexCoord1hNV(GlTextureUnit @target, ushort @s) {
            Native_MultiTexCoord1hNV(@target, @s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1hvNV")]
        static extern void Native_MultiTexCoord1hvNV(GlTextureUnit @target, ushort* @v);

        public void MultiTexCoord1hvNV(GlTextureUnit @target, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_MultiTexCoord1hvNV(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1i")]
        static extern void Native_MultiTexCoord1i(GlTextureUnit @target, int @s);

        public void MultiTexCoord1i(GlTextureUnit @target, int @s) {
            Native_MultiTexCoord1i(@target, @s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1iARB")]
        static extern void Native_MultiTexCoord1iARB(GlTextureUnit @target, int @s);

        public void MultiTexCoord1iARB(GlTextureUnit @target, int @s) {
            Native_MultiTexCoord1iARB(@target, @s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1iv")]
        static extern void Native_MultiTexCoord1iv(GlTextureUnit @target, int* @v);

        public void MultiTexCoord1iv(GlTextureUnit @target, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_MultiTexCoord1iv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1ivARB")]
        static extern void Native_MultiTexCoord1ivARB(GlTextureUnit @target, int* @v);

        public void MultiTexCoord1ivARB(GlTextureUnit @target, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_MultiTexCoord1ivARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1s")]
        static extern void Native_MultiTexCoord1s(GlTextureUnit @target, short @s);

        public void MultiTexCoord1s(GlTextureUnit @target, short @s) {
            Native_MultiTexCoord1s(@target, @s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1sARB")]
        static extern void Native_MultiTexCoord1sARB(GlTextureUnit @target, short @s);

        public void MultiTexCoord1sARB(GlTextureUnit @target, short @s) {
            Native_MultiTexCoord1sARB(@target, @s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1sv")]
        static extern void Native_MultiTexCoord1sv(GlTextureUnit @target, short* @v);

        public void MultiTexCoord1sv(GlTextureUnit @target, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_MultiTexCoord1sv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1svARB")]
        static extern void Native_MultiTexCoord1svARB(GlTextureUnit @target, short* @v);

        public void MultiTexCoord1svARB(GlTextureUnit @target, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_MultiTexCoord1svARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1xOES")]
        static extern void Native_MultiTexCoord1xOES(GlTextureUnit @texture, int @s);

        public void MultiTexCoord1xOES(GlTextureUnit @texture, int @s) {
            Native_MultiTexCoord1xOES(@texture, @s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord1xvOES")]
        static extern void Native_MultiTexCoord1xvOES(GlTextureUnit @texture, int* @coords);

        public void MultiTexCoord1xvOES(GlTextureUnit @texture, int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_MultiTexCoord1xvOES(@texture, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2bOES")]
        static extern void Native_MultiTexCoord2bOES(GlTextureUnit @texture, sbyte @s, sbyte @t);

        public void MultiTexCoord2bOES(GlTextureUnit @texture, sbyte @s, sbyte @t) {
            Native_MultiTexCoord2bOES(@texture, @s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2bvOES")]
        static extern void Native_MultiTexCoord2bvOES(GlTextureUnit @texture, sbyte* @coords);

        public void MultiTexCoord2bvOES(GlTextureUnit @texture, sbyte[] @coords) {
            fixed (sbyte *ptr_coords = @coords) {
                Native_MultiTexCoord2bvOES(@texture, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2d")]
        static extern void Native_MultiTexCoord2d(GlTextureUnit @target, double @s, double @t);

        public void MultiTexCoord2d(GlTextureUnit @target, double @s, double @t) {
            Native_MultiTexCoord2d(@target, @s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2dARB")]
        static extern void Native_MultiTexCoord2dARB(GlTextureUnit @target, double @s, double @t);

        public void MultiTexCoord2dARB(GlTextureUnit @target, double @s, double @t) {
            Native_MultiTexCoord2dARB(@target, @s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2dv")]
        static extern void Native_MultiTexCoord2dv(GlTextureUnit @target, double* @v);

        public void MultiTexCoord2dv(GlTextureUnit @target, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_MultiTexCoord2dv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2dvARB")]
        static extern void Native_MultiTexCoord2dvARB(GlTextureUnit @target, double* @v);

        public void MultiTexCoord2dvARB(GlTextureUnit @target, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_MultiTexCoord2dvARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2f")]
        static extern void Native_MultiTexCoord2f(GlTextureUnit @target, float @s, float @t);

        public void MultiTexCoord2f(GlTextureUnit @target, float @s, float @t) {
            Native_MultiTexCoord2f(@target, @s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2fARB")]
        static extern void Native_MultiTexCoord2fARB(GlTextureUnit @target, float @s, float @t);

        public void MultiTexCoord2fARB(GlTextureUnit @target, float @s, float @t) {
            Native_MultiTexCoord2fARB(@target, @s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2fv")]
        static extern void Native_MultiTexCoord2fv(GlTextureUnit @target, float* @v);

        public void MultiTexCoord2fv(GlTextureUnit @target, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_MultiTexCoord2fv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2fvARB")]
        static extern void Native_MultiTexCoord2fvARB(GlTextureUnit @target, float* @v);

        public void MultiTexCoord2fvARB(GlTextureUnit @target, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_MultiTexCoord2fvARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2hNV")]
        static extern void Native_MultiTexCoord2hNV(GlTextureUnit @target, ushort @s, ushort @t);

        public void MultiTexCoord2hNV(GlTextureUnit @target, ushort @s, ushort @t) {
            Native_MultiTexCoord2hNV(@target, @s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2hvNV")]
        static extern void Native_MultiTexCoord2hvNV(GlTextureUnit @target, ushort* @v);

        public void MultiTexCoord2hvNV(GlTextureUnit @target, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_MultiTexCoord2hvNV(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2i")]
        static extern void Native_MultiTexCoord2i(GlTextureUnit @target, int @s, int @t);

        public void MultiTexCoord2i(GlTextureUnit @target, int @s, int @t) {
            Native_MultiTexCoord2i(@target, @s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2iARB")]
        static extern void Native_MultiTexCoord2iARB(GlTextureUnit @target, int @s, int @t);

        public void MultiTexCoord2iARB(GlTextureUnit @target, int @s, int @t) {
            Native_MultiTexCoord2iARB(@target, @s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2iv")]
        static extern void Native_MultiTexCoord2iv(GlTextureUnit @target, int* @v);

        public void MultiTexCoord2iv(GlTextureUnit @target, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_MultiTexCoord2iv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2ivARB")]
        static extern void Native_MultiTexCoord2ivARB(GlTextureUnit @target, int* @v);

        public void MultiTexCoord2ivARB(GlTextureUnit @target, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_MultiTexCoord2ivARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2s")]
        static extern void Native_MultiTexCoord2s(GlTextureUnit @target, short @s, short @t);

        public void MultiTexCoord2s(GlTextureUnit @target, short @s, short @t) {
            Native_MultiTexCoord2s(@target, @s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2sARB")]
        static extern void Native_MultiTexCoord2sARB(GlTextureUnit @target, short @s, short @t);

        public void MultiTexCoord2sARB(GlTextureUnit @target, short @s, short @t) {
            Native_MultiTexCoord2sARB(@target, @s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2sv")]
        static extern void Native_MultiTexCoord2sv(GlTextureUnit @target, short* @v);

        public void MultiTexCoord2sv(GlTextureUnit @target, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_MultiTexCoord2sv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2svARB")]
        static extern void Native_MultiTexCoord2svARB(GlTextureUnit @target, short* @v);

        public void MultiTexCoord2svARB(GlTextureUnit @target, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_MultiTexCoord2svARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2xOES")]
        static extern void Native_MultiTexCoord2xOES(GlTextureUnit @texture, int @s, int @t);

        public void MultiTexCoord2xOES(GlTextureUnit @texture, int @s, int @t) {
            Native_MultiTexCoord2xOES(@texture, @s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord2xvOES")]
        static extern void Native_MultiTexCoord2xvOES(GlTextureUnit @texture, int* @coords);

        public void MultiTexCoord2xvOES(GlTextureUnit @texture, int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_MultiTexCoord2xvOES(@texture, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3bOES")]
        static extern void Native_MultiTexCoord3bOES(GlTextureUnit @texture, sbyte @s, sbyte @t, sbyte @r);

        public void MultiTexCoord3bOES(GlTextureUnit @texture, sbyte @s, sbyte @t, sbyte @r) {
            Native_MultiTexCoord3bOES(@texture, @s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3bvOES")]
        static extern void Native_MultiTexCoord3bvOES(GlTextureUnit @texture, sbyte* @coords);

        public void MultiTexCoord3bvOES(GlTextureUnit @texture, sbyte[] @coords) {
            fixed (sbyte *ptr_coords = @coords) {
                Native_MultiTexCoord3bvOES(@texture, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3d")]
        static extern void Native_MultiTexCoord3d(GlTextureUnit @target, double @s, double @t, double @r);

        public void MultiTexCoord3d(GlTextureUnit @target, double @s, double @t, double @r) {
            Native_MultiTexCoord3d(@target, @s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3dARB")]
        static extern void Native_MultiTexCoord3dARB(GlTextureUnit @target, double @s, double @t, double @r);

        public void MultiTexCoord3dARB(GlTextureUnit @target, double @s, double @t, double @r) {
            Native_MultiTexCoord3dARB(@target, @s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3dv")]
        static extern void Native_MultiTexCoord3dv(GlTextureUnit @target, double* @v);

        public void MultiTexCoord3dv(GlTextureUnit @target, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_MultiTexCoord3dv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3dvARB")]
        static extern void Native_MultiTexCoord3dvARB(GlTextureUnit @target, double* @v);

        public void MultiTexCoord3dvARB(GlTextureUnit @target, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_MultiTexCoord3dvARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3f")]
        static extern void Native_MultiTexCoord3f(GlTextureUnit @target, float @s, float @t, float @r);

        public void MultiTexCoord3f(GlTextureUnit @target, float @s, float @t, float @r) {
            Native_MultiTexCoord3f(@target, @s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3fARB")]
        static extern void Native_MultiTexCoord3fARB(GlTextureUnit @target, float @s, float @t, float @r);

        public void MultiTexCoord3fARB(GlTextureUnit @target, float @s, float @t, float @r) {
            Native_MultiTexCoord3fARB(@target, @s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3fv")]
        static extern void Native_MultiTexCoord3fv(GlTextureUnit @target, float* @v);

        public void MultiTexCoord3fv(GlTextureUnit @target, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_MultiTexCoord3fv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3fvARB")]
        static extern void Native_MultiTexCoord3fvARB(GlTextureUnit @target, float* @v);

        public void MultiTexCoord3fvARB(GlTextureUnit @target, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_MultiTexCoord3fvARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3hNV")]
        static extern void Native_MultiTexCoord3hNV(GlTextureUnit @target, ushort @s, ushort @t, ushort @r);

        public void MultiTexCoord3hNV(GlTextureUnit @target, ushort @s, ushort @t, ushort @r) {
            Native_MultiTexCoord3hNV(@target, @s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3hvNV")]
        static extern void Native_MultiTexCoord3hvNV(GlTextureUnit @target, ushort* @v);

        public void MultiTexCoord3hvNV(GlTextureUnit @target, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_MultiTexCoord3hvNV(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3i")]
        static extern void Native_MultiTexCoord3i(GlTextureUnit @target, int @s, int @t, int @r);

        public void MultiTexCoord3i(GlTextureUnit @target, int @s, int @t, int @r) {
            Native_MultiTexCoord3i(@target, @s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3iARB")]
        static extern void Native_MultiTexCoord3iARB(GlTextureUnit @target, int @s, int @t, int @r);

        public void MultiTexCoord3iARB(GlTextureUnit @target, int @s, int @t, int @r) {
            Native_MultiTexCoord3iARB(@target, @s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3iv")]
        static extern void Native_MultiTexCoord3iv(GlTextureUnit @target, int* @v);

        public void MultiTexCoord3iv(GlTextureUnit @target, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_MultiTexCoord3iv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3ivARB")]
        static extern void Native_MultiTexCoord3ivARB(GlTextureUnit @target, int* @v);

        public void MultiTexCoord3ivARB(GlTextureUnit @target, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_MultiTexCoord3ivARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3s")]
        static extern void Native_MultiTexCoord3s(GlTextureUnit @target, short @s, short @t, short @r);

        public void MultiTexCoord3s(GlTextureUnit @target, short @s, short @t, short @r) {
            Native_MultiTexCoord3s(@target, @s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3sARB")]
        static extern void Native_MultiTexCoord3sARB(GlTextureUnit @target, short @s, short @t, short @r);

        public void MultiTexCoord3sARB(GlTextureUnit @target, short @s, short @t, short @r) {
            Native_MultiTexCoord3sARB(@target, @s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3sv")]
        static extern void Native_MultiTexCoord3sv(GlTextureUnit @target, short* @v);

        public void MultiTexCoord3sv(GlTextureUnit @target, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_MultiTexCoord3sv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3svARB")]
        static extern void Native_MultiTexCoord3svARB(GlTextureUnit @target, short* @v);

        public void MultiTexCoord3svARB(GlTextureUnit @target, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_MultiTexCoord3svARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3xOES")]
        static extern void Native_MultiTexCoord3xOES(GlTextureUnit @texture, int @s, int @t, int @r);

        public void MultiTexCoord3xOES(GlTextureUnit @texture, int @s, int @t, int @r) {
            Native_MultiTexCoord3xOES(@texture, @s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord3xvOES")]
        static extern void Native_MultiTexCoord3xvOES(GlTextureUnit @texture, int* @coords);

        public void MultiTexCoord3xvOES(GlTextureUnit @texture, int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_MultiTexCoord3xvOES(@texture, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4bOES")]
        static extern void Native_MultiTexCoord4bOES(GlTextureUnit @texture, sbyte @s, sbyte @t, sbyte @r, sbyte @q);

        public void MultiTexCoord4bOES(GlTextureUnit @texture, sbyte @s, sbyte @t, sbyte @r, sbyte @q) {
            Native_MultiTexCoord4bOES(@texture, @s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4bvOES")]
        static extern void Native_MultiTexCoord4bvOES(GlTextureUnit @texture, sbyte* @coords);

        public void MultiTexCoord4bvOES(GlTextureUnit @texture, sbyte[] @coords) {
            fixed (sbyte *ptr_coords = @coords) {
                Native_MultiTexCoord4bvOES(@texture, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4d")]
        static extern void Native_MultiTexCoord4d(GlTextureUnit @target, double @s, double @t, double @r, double @q);

        public void MultiTexCoord4d(GlTextureUnit @target, double @s, double @t, double @r, double @q) {
            Native_MultiTexCoord4d(@target, @s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4dARB")]
        static extern void Native_MultiTexCoord4dARB(GlTextureUnit @target, double @s, double @t, double @r, double @q);

        public void MultiTexCoord4dARB(GlTextureUnit @target, double @s, double @t, double @r, double @q) {
            Native_MultiTexCoord4dARB(@target, @s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4dv")]
        static extern void Native_MultiTexCoord4dv(GlTextureUnit @target, double* @v);

        public void MultiTexCoord4dv(GlTextureUnit @target, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_MultiTexCoord4dv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4dvARB")]
        static extern void Native_MultiTexCoord4dvARB(GlTextureUnit @target, double* @v);

        public void MultiTexCoord4dvARB(GlTextureUnit @target, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_MultiTexCoord4dvARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4f")]
        static extern void Native_MultiTexCoord4f(GlTextureUnit @target, float @s, float @t, float @r, float @q);

        public void MultiTexCoord4f(GlTextureUnit @target, float @s, float @t, float @r, float @q) {
            Native_MultiTexCoord4f(@target, @s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4fARB")]
        static extern void Native_MultiTexCoord4fARB(GlTextureUnit @target, float @s, float @t, float @r, float @q);

        public void MultiTexCoord4fARB(GlTextureUnit @target, float @s, float @t, float @r, float @q) {
            Native_MultiTexCoord4fARB(@target, @s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4fv")]
        static extern void Native_MultiTexCoord4fv(GlTextureUnit @target, float* @v);

        public void MultiTexCoord4fv(GlTextureUnit @target, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_MultiTexCoord4fv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4fvARB")]
        static extern void Native_MultiTexCoord4fvARB(GlTextureUnit @target, float* @v);

        public void MultiTexCoord4fvARB(GlTextureUnit @target, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_MultiTexCoord4fvARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4hNV")]
        static extern void Native_MultiTexCoord4hNV(GlTextureUnit @target, ushort @s, ushort @t, ushort @r, ushort @q);

        public void MultiTexCoord4hNV(GlTextureUnit @target, ushort @s, ushort @t, ushort @r, ushort @q) {
            Native_MultiTexCoord4hNV(@target, @s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4hvNV")]
        static extern void Native_MultiTexCoord4hvNV(GlTextureUnit @target, ushort* @v);

        public void MultiTexCoord4hvNV(GlTextureUnit @target, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_MultiTexCoord4hvNV(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4i")]
        static extern void Native_MultiTexCoord4i(GlTextureUnit @target, int @s, int @t, int @r, int @q);

        public void MultiTexCoord4i(GlTextureUnit @target, int @s, int @t, int @r, int @q) {
            Native_MultiTexCoord4i(@target, @s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4iARB")]
        static extern void Native_MultiTexCoord4iARB(GlTextureUnit @target, int @s, int @t, int @r, int @q);

        public void MultiTexCoord4iARB(GlTextureUnit @target, int @s, int @t, int @r, int @q) {
            Native_MultiTexCoord4iARB(@target, @s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4iv")]
        static extern void Native_MultiTexCoord4iv(GlTextureUnit @target, int* @v);

        public void MultiTexCoord4iv(GlTextureUnit @target, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_MultiTexCoord4iv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4ivARB")]
        static extern void Native_MultiTexCoord4ivARB(GlTextureUnit @target, int* @v);

        public void MultiTexCoord4ivARB(GlTextureUnit @target, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_MultiTexCoord4ivARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4s")]
        static extern void Native_MultiTexCoord4s(GlTextureUnit @target, short @s, short @t, short @r, short @q);

        public void MultiTexCoord4s(GlTextureUnit @target, short @s, short @t, short @r, short @q) {
            Native_MultiTexCoord4s(@target, @s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4sARB")]
        static extern void Native_MultiTexCoord4sARB(GlTextureUnit @target, short @s, short @t, short @r, short @q);

        public void MultiTexCoord4sARB(GlTextureUnit @target, short @s, short @t, short @r, short @q) {
            Native_MultiTexCoord4sARB(@target, @s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4sv")]
        static extern void Native_MultiTexCoord4sv(GlTextureUnit @target, short* @v);

        public void MultiTexCoord4sv(GlTextureUnit @target, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_MultiTexCoord4sv(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4svARB")]
        static extern void Native_MultiTexCoord4svARB(GlTextureUnit @target, short* @v);

        public void MultiTexCoord4svARB(GlTextureUnit @target, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_MultiTexCoord4svARB(@target, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4x")]
        static extern void Native_MultiTexCoord4x(GlTextureUnit @texture, int @s, int @t, int @r, int @q);

        public void MultiTexCoord4x(GlTextureUnit @texture, int @s, int @t, int @r, int @q) {
            Native_MultiTexCoord4x(@texture, @s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4xOES")]
        static extern void Native_MultiTexCoord4xOES(GlTextureUnit @texture, int @s, int @t, int @r, int @q);

        public void MultiTexCoord4xOES(GlTextureUnit @texture, int @s, int @t, int @r, int @q) {
            Native_MultiTexCoord4xOES(@texture, @s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoord4xvOES")]
        static extern void Native_MultiTexCoord4xvOES(GlTextureUnit @texture, int* @coords);

        public void MultiTexCoord4xvOES(GlTextureUnit @texture, int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_MultiTexCoord4xvOES(@texture, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoordP1ui")]
        static extern void Native_MultiTexCoordP1ui(GlTextureUnit @texture, GlTexCoordPointerType @type, uint @coords);

        public void MultiTexCoordP1ui(GlTextureUnit @texture, GlTexCoordPointerType @type, uint @coords) {
            Native_MultiTexCoordP1ui(@texture, @type, @coords);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoordP1uiv")]
        static extern void Native_MultiTexCoordP1uiv(GlTextureUnit @texture, GlTexCoordPointerType @type, uint* @coords);

        public void MultiTexCoordP1uiv(GlTextureUnit @texture, GlTexCoordPointerType @type, uint[] @coords) {
            fixed (uint *ptr_coords = @coords) {
                Native_MultiTexCoordP1uiv(@texture, @type, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoordP2ui")]
        static extern void Native_MultiTexCoordP2ui(GlTextureUnit @texture, GlTexCoordPointerType @type, uint @coords);

        public void MultiTexCoordP2ui(GlTextureUnit @texture, GlTexCoordPointerType @type, uint @coords) {
            Native_MultiTexCoordP2ui(@texture, @type, @coords);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoordP2uiv")]
        static extern void Native_MultiTexCoordP2uiv(GlTextureUnit @texture, GlTexCoordPointerType @type, uint* @coords);

        public void MultiTexCoordP2uiv(GlTextureUnit @texture, GlTexCoordPointerType @type, uint[] @coords) {
            fixed (uint *ptr_coords = @coords) {
                Native_MultiTexCoordP2uiv(@texture, @type, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoordP3ui")]
        static extern void Native_MultiTexCoordP3ui(GlTextureUnit @texture, GlTexCoordPointerType @type, uint @coords);

        public void MultiTexCoordP3ui(GlTextureUnit @texture, GlTexCoordPointerType @type, uint @coords) {
            Native_MultiTexCoordP3ui(@texture, @type, @coords);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoordP3uiv")]
        static extern void Native_MultiTexCoordP3uiv(GlTextureUnit @texture, GlTexCoordPointerType @type, uint* @coords);

        public void MultiTexCoordP3uiv(GlTextureUnit @texture, GlTexCoordPointerType @type, uint[] @coords) {
            fixed (uint *ptr_coords = @coords) {
                Native_MultiTexCoordP3uiv(@texture, @type, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoordP4ui")]
        static extern void Native_MultiTexCoordP4ui(GlTextureUnit @texture, GlTexCoordPointerType @type, uint @coords);

        public void MultiTexCoordP4ui(GlTextureUnit @texture, GlTexCoordPointerType @type, uint @coords) {
            Native_MultiTexCoordP4ui(@texture, @type, @coords);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoordP4uiv")]
        static extern void Native_MultiTexCoordP4uiv(GlTextureUnit @texture, GlTexCoordPointerType @type, uint* @coords);

        public void MultiTexCoordP4uiv(GlTextureUnit @texture, GlTexCoordPointerType @type, uint[] @coords) {
            fixed (uint *ptr_coords = @coords) {
                Native_MultiTexCoordP4uiv(@texture, @type, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexCoordPointerEXT")]
        static extern void Native_MultiTexCoordPointerEXT(GlTextureUnit @texunit, int @size, GlTexCoordPointerType @type, int @stride, byte* @pointer);

        public void MultiTexCoordPointerEXT(GlTextureUnit @texunit, int @size, GlTexCoordPointerType @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_MultiTexCoordPointerEXT(@texunit, @size, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexEnvfEXT")]
        static extern void Native_MultiTexEnvfEXT(GlTextureUnit @texunit, GlTextureEnvTarget @target, GlTextureEnvParameter @pname, float @param);

        public void MultiTexEnvfEXT(GlTextureUnit @texunit, GlTextureEnvTarget @target, GlTextureEnvParameter @pname, float @param) {
            Native_MultiTexEnvfEXT(@texunit, @target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexEnvfvEXT")]
        static extern void Native_MultiTexEnvfvEXT(GlTextureUnit @texunit, GlTextureEnvTarget @target, GlTextureEnvParameter @pname, float* @params);

        public void MultiTexEnvfvEXT(GlTextureUnit @texunit, GlTextureEnvTarget @target, GlTextureEnvParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_MultiTexEnvfvEXT(@texunit, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexEnviEXT")]
        static extern void Native_MultiTexEnviEXT(GlTextureUnit @texunit, GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int @param);

        public void MultiTexEnviEXT(GlTextureUnit @texunit, GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int @param) {
            Native_MultiTexEnviEXT(@texunit, @target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexEnvivEXT")]
        static extern void Native_MultiTexEnvivEXT(GlTextureUnit @texunit, GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int* @params);

        public void MultiTexEnvivEXT(GlTextureUnit @texunit, GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_MultiTexEnvivEXT(@texunit, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexGendEXT")]
        static extern void Native_MultiTexGendEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, double @param);

        public void MultiTexGendEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, double @param) {
            Native_MultiTexGendEXT(@texunit, @coord, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexGendvEXT")]
        static extern void Native_MultiTexGendvEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, double* @params);

        public void MultiTexGendvEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_MultiTexGendvEXT(@texunit, @coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexGenfEXT")]
        static extern void Native_MultiTexGenfEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, float @param);

        public void MultiTexGenfEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, float @param) {
            Native_MultiTexGenfEXT(@texunit, @coord, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexGenfvEXT")]
        static extern void Native_MultiTexGenfvEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, float* @params);

        public void MultiTexGenfvEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_MultiTexGenfvEXT(@texunit, @coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexGeniEXT")]
        static extern void Native_MultiTexGeniEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, int @param);

        public void MultiTexGeniEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, int @param) {
            Native_MultiTexGeniEXT(@texunit, @coord, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexGenivEXT")]
        static extern void Native_MultiTexGenivEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, int* @params);

        public void MultiTexGenivEXT(GlTextureUnit @texunit, GlTextureCoordName @coord, GlTextureGenParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_MultiTexGenivEXT(@texunit, @coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexImage1DEXT")]
        static extern void Native_MultiTexImage1DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @border, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void MultiTexImage1DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @border, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_MultiTexImage1DEXT(@texunit, @target, @level, @internalformat, @width, @border, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexImage2DEXT")]
        static extern void Native_MultiTexImage2DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @border, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void MultiTexImage2DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @border, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_MultiTexImage2DEXT(@texunit, @target, @level, @internalformat, @width, @height, @border, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexImage3DEXT")]
        static extern void Native_MultiTexImage3DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void MultiTexImage3DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_MultiTexImage3DEXT(@texunit, @target, @level, @internalformat, @width, @height, @depth, @border, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexParameterIivEXT")]
        static extern void Native_MultiTexParameterIivEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlTextureParameterName @pname, int* @params);

        public void MultiTexParameterIivEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlTextureParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_MultiTexParameterIivEXT(@texunit, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexParameterIuivEXT")]
        static extern void Native_MultiTexParameterIuivEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlTextureParameterName @pname, uint* @params);

        public void MultiTexParameterIuivEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlTextureParameterName @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_MultiTexParameterIuivEXT(@texunit, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexParameterfEXT")]
        static extern void Native_MultiTexParameterfEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlTextureParameterName @pname, float @param);

        public void MultiTexParameterfEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlTextureParameterName @pname, float @param) {
            Native_MultiTexParameterfEXT(@texunit, @target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexParameterfvEXT")]
        static extern void Native_MultiTexParameterfvEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlTextureParameterName @pname, float* @params);

        public void MultiTexParameterfvEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlTextureParameterName @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_MultiTexParameterfvEXT(@texunit, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexParameteriEXT")]
        static extern void Native_MultiTexParameteriEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlTextureParameterName @pname, int @param);

        public void MultiTexParameteriEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlTextureParameterName @pname, int @param) {
            Native_MultiTexParameteriEXT(@texunit, @target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexParameterivEXT")]
        static extern void Native_MultiTexParameterivEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlTextureParameterName @pname, int* @params);

        public void MultiTexParameterivEXT(GlTextureUnit @texunit, GlTextureTarget @target, GlTextureParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_MultiTexParameterivEXT(@texunit, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexRenderbufferEXT")]
        static extern void Native_MultiTexRenderbufferEXT(GlTextureUnit @texunit, GlTextureTarget @target, uint @renderbuffer);

        public void MultiTexRenderbufferEXT(GlTextureUnit @texunit, GlTextureTarget @target, uint @renderbuffer) {
            Native_MultiTexRenderbufferEXT(@texunit, @target, @renderbuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexSubImage1DEXT")]
        static extern void Native_MultiTexSubImage1DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void MultiTexSubImage1DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_MultiTexSubImage1DEXT(@texunit, @target, @level, @xoffset, @width, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexSubImage2DEXT")]
        static extern void Native_MultiTexSubImage2DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void MultiTexSubImage2DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_MultiTexSubImage2DEXT(@texunit, @target, @level, @xoffset, @yoffset, @width, @height, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMultiTexSubImage3DEXT")]
        static extern void Native_MultiTexSubImage3DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void MultiTexSubImage3DEXT(GlTextureUnit @texunit, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_MultiTexSubImage3DEXT(@texunit, @target, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMulticastBarrierNV")]
        static extern void Native_MulticastBarrierNV();

        public void MulticastBarrierNV() {
            Native_MulticastBarrierNV();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMulticastBlitFramebufferNV")]
        static extern void Native_MulticastBlitFramebufferNV(uint @srcGpu, uint @dstGpu, int @srcX0, int @srcY0, int @srcX1, int @srcY1, int @dstX0, int @dstY0, int @dstX1, int @dstY1, GlClearBufferMask @mask, uint @filter);

        public void MulticastBlitFramebufferNV(uint @srcGpu, uint @dstGpu, int @srcX0, int @srcY0, int @srcX1, int @srcY1, int @dstX0, int @dstY0, int @dstX1, int @dstY1, GlClearBufferMask @mask, uint @filter) {
            Native_MulticastBlitFramebufferNV(@srcGpu, @dstGpu, @srcX0, @srcY0, @srcX1, @srcY1, @dstX0, @dstY0, @dstX1, @dstY1, @mask, @filter);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMulticastBufferSubDataNV")]
        static extern void Native_MulticastBufferSubDataNV(uint @gpuMask, uint @buffer, long @offset, long @size, byte* @data);

        public void MulticastBufferSubDataNV(uint @gpuMask, uint @buffer, long @offset, long @size, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_MulticastBufferSubDataNV(@gpuMask, @buffer, @offset, @size, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMulticastCopyBufferSubDataNV")]
        static extern void Native_MulticastCopyBufferSubDataNV(uint @readGpu, uint @writeGpuMask, uint @readBuffer, uint @writeBuffer, long @readOffset, long @writeOffset, long @size);

        public void MulticastCopyBufferSubDataNV(uint @readGpu, uint @writeGpuMask, uint @readBuffer, uint @writeBuffer, long @readOffset, long @writeOffset, long @size) {
            Native_MulticastCopyBufferSubDataNV(@readGpu, @writeGpuMask, @readBuffer, @writeBuffer, @readOffset, @writeOffset, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMulticastCopyImageSubDataNV")]
        static extern void Native_MulticastCopyImageSubDataNV(uint @srcGpu, uint @dstGpuMask, uint @srcName, uint @srcTarget, int @srcLevel, int @srcX, int @srcY, int @srcZ, uint @dstName, uint @dstTarget, int @dstLevel, int @dstX, int @dstY, int @dstZ, int @srcWidth, int @srcHeight, int @srcDepth);

        public void MulticastCopyImageSubDataNV(uint @srcGpu, uint @dstGpuMask, uint @srcName, uint @srcTarget, int @srcLevel, int @srcX, int @srcY, int @srcZ, uint @dstName, uint @dstTarget, int @dstLevel, int @dstX, int @dstY, int @dstZ, int @srcWidth, int @srcHeight, int @srcDepth) {
            Native_MulticastCopyImageSubDataNV(@srcGpu, @dstGpuMask, @srcName, @srcTarget, @srcLevel, @srcX, @srcY, @srcZ, @dstName, @dstTarget, @dstLevel, @dstX, @dstY, @dstZ, @srcWidth, @srcHeight, @srcDepth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMulticastFramebufferSampleLocationsfvNV")]
        static extern void Native_MulticastFramebufferSampleLocationsfvNV(uint @gpu, uint @framebuffer, uint @start, int @count, float* @v);

        public void MulticastFramebufferSampleLocationsfvNV(uint @gpu, uint @framebuffer, uint @start, int @count, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_MulticastFramebufferSampleLocationsfvNV(@gpu, @framebuffer, @start, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMulticastGetQueryObjecti64vNV")]
        static extern void Native_MulticastGetQueryObjecti64vNV(uint @gpu, uint @id, uint @pname, long* @params);

        public void MulticastGetQueryObjecti64vNV(uint @gpu, uint @id, uint @pname, long[] @params) {
            fixed (long *ptr_params = @params) {
                Native_MulticastGetQueryObjecti64vNV(@gpu, @id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMulticastGetQueryObjectivNV")]
        static extern void Native_MulticastGetQueryObjectivNV(uint @gpu, uint @id, uint @pname, int* @params);

        public void MulticastGetQueryObjectivNV(uint @gpu, uint @id, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_MulticastGetQueryObjectivNV(@gpu, @id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMulticastGetQueryObjectui64vNV")]
        static extern void Native_MulticastGetQueryObjectui64vNV(uint @gpu, uint @id, uint @pname, ulong* @params);

        public void MulticastGetQueryObjectui64vNV(uint @gpu, uint @id, uint @pname, ulong[] @params) {
            fixed (ulong *ptr_params = @params) {
                Native_MulticastGetQueryObjectui64vNV(@gpu, @id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMulticastGetQueryObjectuivNV")]
        static extern void Native_MulticastGetQueryObjectuivNV(uint @gpu, uint @id, uint @pname, uint* @params);

        public void MulticastGetQueryObjectuivNV(uint @gpu, uint @id, uint @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_MulticastGetQueryObjectuivNV(@gpu, @id, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glMulticastWaitSyncNV")]
        static extern void Native_MulticastWaitSyncNV(uint @signalGpu, uint @waitGpuMask);

        public void MulticastWaitSyncNV(uint @signalGpu, uint @waitGpuMask) {
            Native_MulticastWaitSyncNV(@signalGpu, @waitGpuMask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedBufferData")]
        static extern void Native_NamedBufferData(uint @buffer, long @size, byte* @data, GlVertexBufferObjectUsage @usage);

        public void NamedBufferData(uint @buffer, long @size, byte[] @data, GlVertexBufferObjectUsage @usage) {
            fixed (byte *ptr_data = @data) {
                Native_NamedBufferData(@buffer, @size, @ptr_data, @usage);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedBufferDataEXT")]
        static extern void Native_NamedBufferDataEXT(uint @buffer, long @size, byte* @data, GlVertexBufferObjectUsage @usage);

        public void NamedBufferDataEXT(uint @buffer, long @size, byte[] @data, GlVertexBufferObjectUsage @usage) {
            fixed (byte *ptr_data = @data) {
                Native_NamedBufferDataEXT(@buffer, @size, @ptr_data, @usage);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedBufferPageCommitmentARB")]
        static extern void Native_NamedBufferPageCommitmentARB(uint @buffer, long @offset, long @size, bool @commit);

        public void NamedBufferPageCommitmentARB(uint @buffer, long @offset, long @size, bool @commit) {
            Native_NamedBufferPageCommitmentARB(@buffer, @offset, @size, @commit);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedBufferPageCommitmentEXT")]
        static extern void Native_NamedBufferPageCommitmentEXT(uint @buffer, long @offset, long @size, bool @commit);

        public void NamedBufferPageCommitmentEXT(uint @buffer, long @offset, long @size, bool @commit) {
            Native_NamedBufferPageCommitmentEXT(@buffer, @offset, @size, @commit);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedBufferStorage")]
        static extern void Native_NamedBufferStorage(uint @buffer, long @size, byte* @data, GlMapBufferUsageMask @flags);

        public void NamedBufferStorage(uint @buffer, long @size, byte[] @data, GlMapBufferUsageMask @flags) {
            fixed (byte *ptr_data = @data) {
                Native_NamedBufferStorage(@buffer, @size, @ptr_data, @flags);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedBufferStorageExternalEXT")]
        static extern void Native_NamedBufferStorageExternalEXT(uint @buffer, long @offset, long @size, byte* @clientBuffer, GlMapBufferUsageMask @flags);

        public void NamedBufferStorageExternalEXT(uint @buffer, long @offset, long @size, byte[] @clientBuffer, GlMapBufferUsageMask @flags) {
            fixed (byte *ptr_clientBuffer = @clientBuffer) {
                Native_NamedBufferStorageExternalEXT(@buffer, @offset, @size, @ptr_clientBuffer, @flags);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedBufferStorageEXT")]
        static extern void Native_NamedBufferStorageEXT(uint @buffer, long @size, byte* @data, GlMapBufferUsageMask @flags);

        public void NamedBufferStorageEXT(uint @buffer, long @size, byte[] @data, GlMapBufferUsageMask @flags) {
            fixed (byte *ptr_data = @data) {
                Native_NamedBufferStorageEXT(@buffer, @size, @ptr_data, @flags);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedBufferStorageMemEXT")]
        static extern void Native_NamedBufferStorageMemEXT(uint @buffer, long @size, uint @memory, ulong @offset);

        public void NamedBufferStorageMemEXT(uint @buffer, long @size, uint @memory, ulong @offset) {
            Native_NamedBufferStorageMemEXT(@buffer, @size, @memory, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedBufferSubData")]
        static extern void Native_NamedBufferSubData(uint @buffer, long @offset, long @size, byte* @data);

        public void NamedBufferSubData(uint @buffer, long @offset, long @size, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_NamedBufferSubData(@buffer, @offset, @size, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedBufferSubDataEXT")]
        static extern void Native_NamedBufferSubDataEXT(uint @buffer, long @offset, long @size, byte* @data);

        public void NamedBufferSubDataEXT(uint @buffer, long @offset, long @size, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_NamedBufferSubDataEXT(@buffer, @offset, @size, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedCopyBufferSubDataEXT")]
        static extern void Native_NamedCopyBufferSubDataEXT(uint @readBuffer, uint @writeBuffer, long @readOffset, long @writeOffset, long @size);

        public void NamedCopyBufferSubDataEXT(uint @readBuffer, uint @writeBuffer, long @readOffset, long @writeOffset, long @size) {
            Native_NamedCopyBufferSubDataEXT(@readBuffer, @writeBuffer, @readOffset, @writeOffset, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferDrawBuffer")]
        static extern void Native_NamedFramebufferDrawBuffer(uint @framebuffer, GlColorBuffer @buf);

        public void NamedFramebufferDrawBuffer(uint @framebuffer, GlColorBuffer @buf) {
            Native_NamedFramebufferDrawBuffer(@framebuffer, @buf);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferDrawBuffers")]
        static extern void Native_NamedFramebufferDrawBuffers(uint @framebuffer, int @n, GlColorBuffer* @bufs);

        public void NamedFramebufferDrawBuffers(uint @framebuffer, int @n, GlColorBuffer[] @bufs) {
            fixed (GlColorBuffer *ptr_bufs = @bufs) {
                Native_NamedFramebufferDrawBuffers(@framebuffer, @n, @ptr_bufs);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferParameteri")]
        static extern void Native_NamedFramebufferParameteri(uint @framebuffer, GlFramebufferParameterName @pname, int @param);

        public void NamedFramebufferParameteri(uint @framebuffer, GlFramebufferParameterName @pname, int @param) {
            Native_NamedFramebufferParameteri(@framebuffer, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferParameteriEXT")]
        static extern void Native_NamedFramebufferParameteriEXT(uint @framebuffer, GlFramebufferParameterName @pname, int @param);

        public void NamedFramebufferParameteriEXT(uint @framebuffer, GlFramebufferParameterName @pname, int @param) {
            Native_NamedFramebufferParameteriEXT(@framebuffer, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferReadBuffer")]
        static extern void Native_NamedFramebufferReadBuffer(uint @framebuffer, GlColorBuffer @src);

        public void NamedFramebufferReadBuffer(uint @framebuffer, GlColorBuffer @src) {
            Native_NamedFramebufferReadBuffer(@framebuffer, @src);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferRenderbuffer")]
        static extern void Native_NamedFramebufferRenderbuffer(uint @framebuffer, GlFramebufferAttachment @attachment, GlRenderbufferTarget @renderbuffertarget, uint @renderbuffer);

        public void NamedFramebufferRenderbuffer(uint @framebuffer, GlFramebufferAttachment @attachment, GlRenderbufferTarget @renderbuffertarget, uint @renderbuffer) {
            Native_NamedFramebufferRenderbuffer(@framebuffer, @attachment, @renderbuffertarget, @renderbuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferRenderbufferEXT")]
        static extern void Native_NamedFramebufferRenderbufferEXT(uint @framebuffer, GlFramebufferAttachment @attachment, GlRenderbufferTarget @renderbuffertarget, uint @renderbuffer);

        public void NamedFramebufferRenderbufferEXT(uint @framebuffer, GlFramebufferAttachment @attachment, GlRenderbufferTarget @renderbuffertarget, uint @renderbuffer) {
            Native_NamedFramebufferRenderbufferEXT(@framebuffer, @attachment, @renderbuffertarget, @renderbuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferSampleLocationsfvARB")]
        static extern void Native_NamedFramebufferSampleLocationsfvARB(uint @framebuffer, uint @start, int @count, float* @v);

        public void NamedFramebufferSampleLocationsfvARB(uint @framebuffer, uint @start, int @count, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_NamedFramebufferSampleLocationsfvARB(@framebuffer, @start, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferSampleLocationsfvNV")]
        static extern void Native_NamedFramebufferSampleLocationsfvNV(uint @framebuffer, uint @start, int @count, float* @v);

        public void NamedFramebufferSampleLocationsfvNV(uint @framebuffer, uint @start, int @count, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_NamedFramebufferSampleLocationsfvNV(@framebuffer, @start, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferTexture")]
        static extern void Native_NamedFramebufferTexture(uint @framebuffer, GlFramebufferAttachment @attachment, uint @texture, int @level);

        public void NamedFramebufferTexture(uint @framebuffer, GlFramebufferAttachment @attachment, uint @texture, int @level) {
            Native_NamedFramebufferTexture(@framebuffer, @attachment, @texture, @level);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferSamplePositionsfvAMD")]
        static extern void Native_NamedFramebufferSamplePositionsfvAMD(uint @framebuffer, uint @numsamples, uint @pixelindex, float* @values);

        public void NamedFramebufferSamplePositionsfvAMD(uint @framebuffer, uint @numsamples, uint @pixelindex, float[] @values) {
            fixed (float *ptr_values = @values) {
                Native_NamedFramebufferSamplePositionsfvAMD(@framebuffer, @numsamples, @pixelindex, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferTexture1DEXT")]
        static extern void Native_NamedFramebufferTexture1DEXT(uint @framebuffer, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level);

        public void NamedFramebufferTexture1DEXT(uint @framebuffer, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level) {
            Native_NamedFramebufferTexture1DEXT(@framebuffer, @attachment, @textarget, @texture, @level);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferTexture2DEXT")]
        static extern void Native_NamedFramebufferTexture2DEXT(uint @framebuffer, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level);

        public void NamedFramebufferTexture2DEXT(uint @framebuffer, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level) {
            Native_NamedFramebufferTexture2DEXT(@framebuffer, @attachment, @textarget, @texture, @level);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferTexture3DEXT")]
        static extern void Native_NamedFramebufferTexture3DEXT(uint @framebuffer, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level, int @zoffset);

        public void NamedFramebufferTexture3DEXT(uint @framebuffer, GlFramebufferAttachment @attachment, GlTextureTarget @textarget, uint @texture, int @level, int @zoffset) {
            Native_NamedFramebufferTexture3DEXT(@framebuffer, @attachment, @textarget, @texture, @level, @zoffset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferTextureEXT")]
        static extern void Native_NamedFramebufferTextureEXT(uint @framebuffer, GlFramebufferAttachment @attachment, uint @texture, int @level);

        public void NamedFramebufferTextureEXT(uint @framebuffer, GlFramebufferAttachment @attachment, uint @texture, int @level) {
            Native_NamedFramebufferTextureEXT(@framebuffer, @attachment, @texture, @level);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferTextureFaceEXT")]
        static extern void Native_NamedFramebufferTextureFaceEXT(uint @framebuffer, GlFramebufferAttachment @attachment, uint @texture, int @level, GlTextureTarget @face);

        public void NamedFramebufferTextureFaceEXT(uint @framebuffer, GlFramebufferAttachment @attachment, uint @texture, int @level, GlTextureTarget @face) {
            Native_NamedFramebufferTextureFaceEXT(@framebuffer, @attachment, @texture, @level, @face);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferTextureLayer")]
        static extern void Native_NamedFramebufferTextureLayer(uint @framebuffer, GlFramebufferAttachment @attachment, uint @texture, int @level, int @layer);

        public void NamedFramebufferTextureLayer(uint @framebuffer, GlFramebufferAttachment @attachment, uint @texture, int @level, int @layer) {
            Native_NamedFramebufferTextureLayer(@framebuffer, @attachment, @texture, @level, @layer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedFramebufferTextureLayerEXT")]
        static extern void Native_NamedFramebufferTextureLayerEXT(uint @framebuffer, GlFramebufferAttachment @attachment, uint @texture, int @level, int @layer);

        public void NamedFramebufferTextureLayerEXT(uint @framebuffer, GlFramebufferAttachment @attachment, uint @texture, int @level, int @layer) {
            Native_NamedFramebufferTextureLayerEXT(@framebuffer, @attachment, @texture, @level, @layer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedProgramLocalParameter4dEXT")]
        static extern void Native_NamedProgramLocalParameter4dEXT(uint @program, uint @target, uint @index, double @x, double @y, double @z, double @w);

        public void NamedProgramLocalParameter4dEXT(uint @program, uint @target, uint @index, double @x, double @y, double @z, double @w) {
            Native_NamedProgramLocalParameter4dEXT(@program, @target, @index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
        static extern void Native_NamedProgramLocalParameter4dvEXT(uint @program, uint @target, uint @index, double* @params);

        public void NamedProgramLocalParameter4dvEXT(uint @program, uint @target, uint @index, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_NamedProgramLocalParameter4dvEXT(@program, @target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedProgramLocalParameter4fEXT")]
        static extern void Native_NamedProgramLocalParameter4fEXT(uint @program, uint @target, uint @index, float @x, float @y, float @z, float @w);

        public void NamedProgramLocalParameter4fEXT(uint @program, uint @target, uint @index, float @x, float @y, float @z, float @w) {
            Native_NamedProgramLocalParameter4fEXT(@program, @target, @index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
        static extern void Native_NamedProgramLocalParameter4fvEXT(uint @program, uint @target, uint @index, float* @params);

        public void NamedProgramLocalParameter4fvEXT(uint @program, uint @target, uint @index, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_NamedProgramLocalParameter4fvEXT(@program, @target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedProgramLocalParameterI4iEXT")]
        static extern void Native_NamedProgramLocalParameterI4iEXT(uint @program, uint @target, uint @index, int @x, int @y, int @z, int @w);

        public void NamedProgramLocalParameterI4iEXT(uint @program, uint @target, uint @index, int @x, int @y, int @z, int @w) {
            Native_NamedProgramLocalParameterI4iEXT(@program, @target, @index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
        static extern void Native_NamedProgramLocalParameterI4ivEXT(uint @program, uint @target, uint @index, int* @params);

        public void NamedProgramLocalParameterI4ivEXT(uint @program, uint @target, uint @index, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_NamedProgramLocalParameterI4ivEXT(@program, @target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedProgramLocalParameterI4uiEXT")]
        static extern void Native_NamedProgramLocalParameterI4uiEXT(uint @program, uint @target, uint @index, uint @x, uint @y, uint @z, uint @w);

        public void NamedProgramLocalParameterI4uiEXT(uint @program, uint @target, uint @index, uint @x, uint @y, uint @z, uint @w) {
            Native_NamedProgramLocalParameterI4uiEXT(@program, @target, @index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
        static extern void Native_NamedProgramLocalParameterI4uivEXT(uint @program, uint @target, uint @index, uint* @params);

        public void NamedProgramLocalParameterI4uivEXT(uint @program, uint @target, uint @index, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_NamedProgramLocalParameterI4uivEXT(@program, @target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
        static extern void Native_NamedProgramLocalParameters4fvEXT(uint @program, uint @target, uint @index, int @count, float* @params);

        public void NamedProgramLocalParameters4fvEXT(uint @program, uint @target, uint @index, int @count, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_NamedProgramLocalParameters4fvEXT(@program, @target, @index, @count, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
        static extern void Native_NamedProgramLocalParametersI4ivEXT(uint @program, uint @target, uint @index, int @count, int* @params);

        public void NamedProgramLocalParametersI4ivEXT(uint @program, uint @target, uint @index, int @count, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_NamedProgramLocalParametersI4ivEXT(@program, @target, @index, @count, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
        static extern void Native_NamedProgramLocalParametersI4uivEXT(uint @program, uint @target, uint @index, int @count, uint* @params);

        public void NamedProgramLocalParametersI4uivEXT(uint @program, uint @target, uint @index, int @count, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_NamedProgramLocalParametersI4uivEXT(@program, @target, @index, @count, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedProgramStringEXT")]
        static extern void Native_NamedProgramStringEXT(uint @program, uint @target, uint @format, int @len, byte* @string);

        public void NamedProgramStringEXT(uint @program, uint @target, uint @format, int @len, byte[] @string) {
            fixed (byte *ptr_string = @string) {
                Native_NamedProgramStringEXT(@program, @target, @format, @len, @ptr_string);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedRenderbufferStorage")]
        static extern void Native_NamedRenderbufferStorage(uint @renderbuffer, GlInternalFormat @internalformat, int @width, int @height);

        public void NamedRenderbufferStorage(uint @renderbuffer, GlInternalFormat @internalformat, int @width, int @height) {
            Native_NamedRenderbufferStorage(@renderbuffer, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedRenderbufferStorageEXT")]
        static extern void Native_NamedRenderbufferStorageEXT(uint @renderbuffer, GlInternalFormat @internalformat, int @width, int @height);

        public void NamedRenderbufferStorageEXT(uint @renderbuffer, GlInternalFormat @internalformat, int @width, int @height) {
            Native_NamedRenderbufferStorageEXT(@renderbuffer, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedRenderbufferStorageMultisample")]
        static extern void Native_NamedRenderbufferStorageMultisample(uint @renderbuffer, int @samples, GlInternalFormat @internalformat, int @width, int @height);

        public void NamedRenderbufferStorageMultisample(uint @renderbuffer, int @samples, GlInternalFormat @internalformat, int @width, int @height) {
            Native_NamedRenderbufferStorageMultisample(@renderbuffer, @samples, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedRenderbufferStorageMultisampleCoverageEXT")]
        static extern void Native_NamedRenderbufferStorageMultisampleCoverageEXT(uint @renderbuffer, int @coverageSamples, int @colorSamples, GlInternalFormat @internalformat, int @width, int @height);

        public void NamedRenderbufferStorageMultisampleCoverageEXT(uint @renderbuffer, int @coverageSamples, int @colorSamples, GlInternalFormat @internalformat, int @width, int @height) {
            Native_NamedRenderbufferStorageMultisampleCoverageEXT(@renderbuffer, @coverageSamples, @colorSamples, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedRenderbufferStorageMultisampleEXT")]
        static extern void Native_NamedRenderbufferStorageMultisampleEXT(uint @renderbuffer, int @samples, GlInternalFormat @internalformat, int @width, int @height);

        public void NamedRenderbufferStorageMultisampleEXT(uint @renderbuffer, int @samples, GlInternalFormat @internalformat, int @width, int @height) {
            Native_NamedRenderbufferStorageMultisampleEXT(@renderbuffer, @samples, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNamedStringARB")]
        static extern void Native_NamedStringARB(uint @type, int @namelen, byte* @name, int @stringlen, byte* @string);

        public void NamedStringARB(uint @type, int @namelen, byte[] @name, int @stringlen, byte[] @string) {
            fixed (byte *ptr_name = @name) {
                fixed (byte *ptr_string = @string) {
                    Native_NamedStringARB(@type, @namelen, @ptr_name, @stringlen, @ptr_string);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNewList")]
        static extern void Native_NewList(uint @list, GlListMode @mode);

        public void NewList(uint @list, GlListMode @mode) {
            Native_NewList(@list, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNewObjectBufferATI")]
        static extern uint Native_NewObjectBufferATI(int @size, byte* @pointer, uint @usage);

        public uint NewObjectBufferATI(int @size, byte[] @pointer, uint @usage) {
            fixed (byte *ptr_pointer = @pointer) {
                return Native_NewObjectBufferATI(@size, @ptr_pointer, @usage);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3b")]
        static extern void Native_Normal3b(sbyte @nx, sbyte @ny, sbyte @nz);

        public void Normal3b(sbyte @nx, sbyte @ny, sbyte @nz) {
            Native_Normal3b(@nx, @ny, @nz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3bv")]
        static extern void Native_Normal3bv(sbyte* @v);

        public void Normal3bv(sbyte[] @v) {
            fixed (sbyte *ptr_v = @v) {
                Native_Normal3bv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3d")]
        static extern void Native_Normal3d(double @nx, double @ny, double @nz);

        public void Normal3d(double @nx, double @ny, double @nz) {
            Native_Normal3d(@nx, @ny, @nz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3dv")]
        static extern void Native_Normal3dv(double* @v);

        public void Normal3dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_Normal3dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3f")]
        static extern void Native_Normal3f(float @nx, float @ny, float @nz);

        public void Normal3f(float @nx, float @ny, float @nz) {
            Native_Normal3f(@nx, @ny, @nz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3fVertex3fSUN")]
        static extern void Native_Normal3fVertex3fSUN(float @nx, float @ny, float @nz, float @x, float @y, float @z);

        public void Normal3fVertex3fSUN(float @nx, float @ny, float @nz, float @x, float @y, float @z) {
            Native_Normal3fVertex3fSUN(@nx, @ny, @nz, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3fVertex3fvSUN")]
        static extern void Native_Normal3fVertex3fvSUN(float* @n, float* @v);

        public void Normal3fVertex3fvSUN(float[] @n, float[] @v) {
            fixed (float *ptr_n = @n) {
                fixed (float *ptr_v = @v) {
                    Native_Normal3fVertex3fvSUN(@ptr_n, @ptr_v);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3fv")]
        static extern void Native_Normal3fv(float* @v);

        public void Normal3fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_Normal3fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3hNV")]
        static extern void Native_Normal3hNV(ushort @nx, ushort @ny, ushort @nz);

        public void Normal3hNV(ushort @nx, ushort @ny, ushort @nz) {
            Native_Normal3hNV(@nx, @ny, @nz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3hvNV")]
        static extern void Native_Normal3hvNV(ushort* @v);

        public void Normal3hvNV(ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_Normal3hvNV(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3i")]
        static extern void Native_Normal3i(int @nx, int @ny, int @nz);

        public void Normal3i(int @nx, int @ny, int @nz) {
            Native_Normal3i(@nx, @ny, @nz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3iv")]
        static extern void Native_Normal3iv(int* @v);

        public void Normal3iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_Normal3iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3s")]
        static extern void Native_Normal3s(short @nx, short @ny, short @nz);

        public void Normal3s(short @nx, short @ny, short @nz) {
            Native_Normal3s(@nx, @ny, @nz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3sv")]
        static extern void Native_Normal3sv(short* @v);

        public void Normal3sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_Normal3sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3x")]
        static extern void Native_Normal3x(int @nx, int @ny, int @nz);

        public void Normal3x(int @nx, int @ny, int @nz) {
            Native_Normal3x(@nx, @ny, @nz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3xOES")]
        static extern void Native_Normal3xOES(int @nx, int @ny, int @nz);

        public void Normal3xOES(int @nx, int @ny, int @nz) {
            Native_Normal3xOES(@nx, @ny, @nz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormal3xvOES")]
        static extern void Native_Normal3xvOES(int* @coords);

        public void Normal3xvOES(int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_Normal3xvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalFormatNV")]
        static extern void Native_NormalFormatNV(uint @type, int @stride);

        public void NormalFormatNV(uint @type, int @stride) {
            Native_NormalFormatNV(@type, @stride);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalP3ui")]
        static extern void Native_NormalP3ui(GlNormalPointerType @type, uint @coords);

        public void NormalP3ui(GlNormalPointerType @type, uint @coords) {
            Native_NormalP3ui(@type, @coords);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalP3uiv")]
        static extern void Native_NormalP3uiv(GlNormalPointerType @type, uint* @coords);

        public void NormalP3uiv(GlNormalPointerType @type, uint[] @coords) {
            fixed (uint *ptr_coords = @coords) {
                Native_NormalP3uiv(@type, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalPointer")]
        static extern void Native_NormalPointer(GlNormalPointerType @type, int @stride, byte* @pointer);

        public void NormalPointer(GlNormalPointerType @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_NormalPointer(@type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalPointerEXT")]
        static extern void Native_NormalPointerEXT(GlNormalPointerType @type, int @stride, int @count, byte* @pointer);

        public void NormalPointerEXT(GlNormalPointerType @type, int @stride, int @count, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_NormalPointerEXT(@type, @stride, @count, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalPointerListIBM")]
        static extern void Native_NormalPointerListIBM(GlNormalPointerType @type, int @stride, byte** @pointer, int @ptrstride);

        public void NormalPointerListIBM(GlNormalPointerType @type, int @stride, byte[][] @pointer, int @ptrstride) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_NormalPointerListIBM(@type, @stride, (byte **) ptr_pointer.ToPointer(), @ptrstride);
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalPointervINTEL")]
        static extern void Native_NormalPointervINTEL(GlNormalPointerType @type, byte** @pointer);

        public void NormalPointervINTEL(GlNormalPointerType @type, byte[][] @pointer) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_NormalPointervINTEL(@type, (byte **) ptr_pointer.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalStream3bATI")]
        static extern void Native_NormalStream3bATI(uint @stream, sbyte @nx, sbyte @ny, sbyte @nz);

        public void NormalStream3bATI(uint @stream, sbyte @nx, sbyte @ny, sbyte @nz) {
            Native_NormalStream3bATI(@stream, @nx, @ny, @nz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalStream3bvATI")]
        static extern void Native_NormalStream3bvATI(uint @stream, sbyte* @coords);

        public void NormalStream3bvATI(uint @stream, sbyte[] @coords) {
            fixed (sbyte *ptr_coords = @coords) {
                Native_NormalStream3bvATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalStream3dATI")]
        static extern void Native_NormalStream3dATI(uint @stream, double @nx, double @ny, double @nz);

        public void NormalStream3dATI(uint @stream, double @nx, double @ny, double @nz) {
            Native_NormalStream3dATI(@stream, @nx, @ny, @nz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalStream3dvATI")]
        static extern void Native_NormalStream3dvATI(uint @stream, double* @coords);

        public void NormalStream3dvATI(uint @stream, double[] @coords) {
            fixed (double *ptr_coords = @coords) {
                Native_NormalStream3dvATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalStream3fATI")]
        static extern void Native_NormalStream3fATI(uint @stream, float @nx, float @ny, float @nz);

        public void NormalStream3fATI(uint @stream, float @nx, float @ny, float @nz) {
            Native_NormalStream3fATI(@stream, @nx, @ny, @nz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalStream3fvATI")]
        static extern void Native_NormalStream3fvATI(uint @stream, float* @coords);

        public void NormalStream3fvATI(uint @stream, float[] @coords) {
            fixed (float *ptr_coords = @coords) {
                Native_NormalStream3fvATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalStream3iATI")]
        static extern void Native_NormalStream3iATI(uint @stream, int @nx, int @ny, int @nz);

        public void NormalStream3iATI(uint @stream, int @nx, int @ny, int @nz) {
            Native_NormalStream3iATI(@stream, @nx, @ny, @nz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalStream3ivATI")]
        static extern void Native_NormalStream3ivATI(uint @stream, int* @coords);

        public void NormalStream3ivATI(uint @stream, int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_NormalStream3ivATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalStream3sATI")]
        static extern void Native_NormalStream3sATI(uint @stream, short @nx, short @ny, short @nz);

        public void NormalStream3sATI(uint @stream, short @nx, short @ny, short @nz) {
            Native_NormalStream3sATI(@stream, @nx, @ny, @nz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glNormalStream3svATI")]
        static extern void Native_NormalStream3svATI(uint @stream, short* @coords);

        public void NormalStream3svATI(uint @stream, short[] @coords) {
            fixed (short *ptr_coords = @coords) {
                Native_NormalStream3svATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glObjectLabel")]
        static extern void Native_ObjectLabel(GlObjectIdentifier @identifier, uint @name, int @length, byte* @label);

        public void ObjectLabel(GlObjectIdentifier @identifier, uint @name, int @length, byte[] @label) {
            fixed (byte *ptr_label = @label) {
                Native_ObjectLabel(@identifier, @name, @length, @ptr_label);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glObjectLabelKHR")]
        static extern void Native_ObjectLabelKHR(GlObjectIdentifier @identifier, uint @name, int @length, byte* @label);

        public void ObjectLabelKHR(GlObjectIdentifier @identifier, uint @name, int @length, byte[] @label) {
            fixed (byte *ptr_label = @label) {
                Native_ObjectLabelKHR(@identifier, @name, @length, @ptr_label);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glObjectPtrLabel")]
        static extern void Native_ObjectPtrLabel(byte* @ptr, int @length, byte* @label);

        public void ObjectPtrLabel(byte[] @ptr, int @length, byte[] @label) {
            fixed (byte *ptr_ptr = @ptr) {
                fixed (byte *ptr_label = @label) {
                    Native_ObjectPtrLabel(@ptr_ptr, @length, @ptr_label);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glObjectPtrLabelKHR")]
        static extern void Native_ObjectPtrLabelKHR(byte* @ptr, int @length, byte* @label);

        public void ObjectPtrLabelKHR(byte[] @ptr, int @length, byte[] @label) {
            fixed (byte *ptr_ptr = @ptr) {
                fixed (byte *ptr_label = @label) {
                    Native_ObjectPtrLabelKHR(@ptr_ptr, @length, @ptr_label);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glObjectPurgeableAPPLE")]
        static extern uint Native_ObjectPurgeableAPPLE(uint @objectType, uint @name, uint @option);

        public uint ObjectPurgeableAPPLE(uint @objectType, uint @name, uint @option) {
            return Native_ObjectPurgeableAPPLE(@objectType, @name, @option);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glObjectUnpurgeableAPPLE")]
        static extern uint Native_ObjectUnpurgeableAPPLE(uint @objectType, uint @name, uint @option);

        public uint ObjectUnpurgeableAPPLE(uint @objectType, uint @name, uint @option) {
            return Native_ObjectUnpurgeableAPPLE(@objectType, @name, @option);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glOrtho")]
        static extern void Native_Ortho(double @left, double @right, double @bottom, double @top, double @zNear, double @zFar);

        public void Ortho(double @left, double @right, double @bottom, double @top, double @zNear, double @zFar) {
            Native_Ortho(@left, @right, @bottom, @top, @zNear, @zFar);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glOrthof")]
        static extern void Native_Orthof(float @l, float @r, float @b, float @t, float @n, float @f);

        public void Orthof(float @l, float @r, float @b, float @t, float @n, float @f) {
            Native_Orthof(@l, @r, @b, @t, @n, @f);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glOrthofOES")]
        static extern void Native_OrthofOES(float @l, float @r, float @b, float @t, float @n, float @f);

        public void OrthofOES(float @l, float @r, float @b, float @t, float @n, float @f) {
            Native_OrthofOES(@l, @r, @b, @t, @n, @f);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glOrthox")]
        static extern void Native_Orthox(int @l, int @r, int @b, int @t, int @n, int @f);

        public void Orthox(int @l, int @r, int @b, int @t, int @n, int @f) {
            Native_Orthox(@l, @r, @b, @t, @n, @f);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glOrthoxOES")]
        static extern void Native_OrthoxOES(int @l, int @r, int @b, int @t, int @n, int @f);

        public void OrthoxOES(int @l, int @r, int @b, int @t, int @n, int @f) {
            Native_OrthoxOES(@l, @r, @b, @t, @n, @f);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPNTrianglesfATI")]
        static extern void Native_PNTrianglesfATI(uint @pname, float @param);

        public void PNTrianglesfATI(uint @pname, float @param) {
            Native_PNTrianglesfATI(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPNTrianglesiATI")]
        static extern void Native_PNTrianglesiATI(uint @pname, int @param);

        public void PNTrianglesiATI(uint @pname, int @param) {
            Native_PNTrianglesiATI(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPassTexCoordATI")]
        static extern void Native_PassTexCoordATI(uint @dst, uint @coord, uint @swizzle);

        public void PassTexCoordATI(uint @dst, uint @coord, uint @swizzle) {
            Native_PassTexCoordATI(@dst, @coord, @swizzle);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPassThrough")]
        static extern void Native_PassThrough(float @token);

        public void PassThrough(float @token) {
            Native_PassThrough(@token);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPassThroughxOES")]
        static extern void Native_PassThroughxOES(int @token);

        public void PassThroughxOES(int @token) {
            Native_PassThroughxOES(@token);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPatchParameterfv")]
        static extern void Native_PatchParameterfv(GlPatchParameterName @pname, float* @values);

        public void PatchParameterfv(GlPatchParameterName @pname, float[] @values) {
            fixed (float *ptr_values = @values) {
                Native_PatchParameterfv(@pname, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPatchParameteri")]
        static extern void Native_PatchParameteri(GlPatchParameterName @pname, int @value);

        public void PatchParameteri(GlPatchParameterName @pname, int @value) {
            Native_PatchParameteri(@pname, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPatchParameteriEXT")]
        static extern void Native_PatchParameteriEXT(GlPatchParameterName @pname, int @value);

        public void PatchParameteriEXT(GlPatchParameterName @pname, int @value) {
            Native_PatchParameteriEXT(@pname, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPatchParameteriOES")]
        static extern void Native_PatchParameteriOES(GlPatchParameterName @pname, int @value);

        public void PatchParameteriOES(GlPatchParameterName @pname, int @value) {
            Native_PatchParameteriOES(@pname, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathColorGenNV")]
        static extern void Native_PathColorGenNV(GlPathColor @color, GlPathGenMode @genMode, uint @colorFormat, float* @coeffs);

        public void PathColorGenNV(GlPathColor @color, GlPathGenMode @genMode, uint @colorFormat, float[] @coeffs) {
            fixed (float *ptr_coeffs = @coeffs) {
                Native_PathColorGenNV(@color, @genMode, @colorFormat, @ptr_coeffs);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathCommandsNV")]
        static extern void Native_PathCommandsNV(uint @path, int @numCommands, byte* @commands, int @numCoords, uint @coordType, byte* @coords);

        public void PathCommandsNV(uint @path, int @numCommands, byte[] @commands, int @numCoords, uint @coordType, byte[] @coords) {
            fixed (byte *ptr_commands = @commands) {
                fixed (byte *ptr_coords = @coords) {
                    Native_PathCommandsNV(@path, @numCommands, @ptr_commands, @numCoords, @coordType, @ptr_coords);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathCoordsNV")]
        static extern void Native_PathCoordsNV(uint @path, int @numCoords, uint @coordType, byte* @coords);

        public void PathCoordsNV(uint @path, int @numCoords, uint @coordType, byte[] @coords) {
            fixed (byte *ptr_coords = @coords) {
                Native_PathCoordsNV(@path, @numCoords, @coordType, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathCoverDepthFuncNV")]
        static extern void Native_PathCoverDepthFuncNV(GlDepthFunction @func);

        public void PathCoverDepthFuncNV(GlDepthFunction @func) {
            Native_PathCoverDepthFuncNV(@func);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathDashArrayNV")]
        static extern void Native_PathDashArrayNV(uint @path, int @dashCount, float* @dashArray);

        public void PathDashArrayNV(uint @path, int @dashCount, float[] @dashArray) {
            fixed (float *ptr_dashArray = @dashArray) {
                Native_PathDashArrayNV(@path, @dashCount, @ptr_dashArray);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathFogGenNV")]
        static extern void Native_PathFogGenNV(GlPathGenMode @genMode);

        public void PathFogGenNV(GlPathGenMode @genMode) {
            Native_PathFogGenNV(@genMode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathGlyphIndexArrayNV")]
        static extern uint Native_PathGlyphIndexArrayNV(uint @firstPathName, uint @fontTarget, byte* @fontName, GlPathFontStyle @fontStyle, uint @firstGlyphIndex, int @numGlyphs, uint @pathParameterTemplate, float @emScale);

        public uint PathGlyphIndexArrayNV(uint @firstPathName, uint @fontTarget, byte[] @fontName, GlPathFontStyle @fontStyle, uint @firstGlyphIndex, int @numGlyphs, uint @pathParameterTemplate, float @emScale) {
            fixed (byte *ptr_fontName = @fontName) {
                return Native_PathGlyphIndexArrayNV(@firstPathName, @fontTarget, @ptr_fontName, @fontStyle, @firstGlyphIndex, @numGlyphs, @pathParameterTemplate, @emScale);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathGlyphIndexRangeNV")]
        static extern uint Native_PathGlyphIndexRangeNV(uint @fontTarget, byte* @fontName, GlPathFontStyle @fontStyle, uint @pathParameterTemplate, float @emScale, uint @baseAndCount);

        public uint PathGlyphIndexRangeNV(uint @fontTarget, byte[] @fontName, GlPathFontStyle @fontStyle, uint @pathParameterTemplate, float @emScale, uint @baseAndCount) {
            fixed (byte *ptr_fontName = @fontName) {
                return Native_PathGlyphIndexRangeNV(@fontTarget, @ptr_fontName, @fontStyle, @pathParameterTemplate, @emScale, @baseAndCount);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathGlyphRangeNV")]
        static extern void Native_PathGlyphRangeNV(uint @firstPathName, GlPathFontTarget @fontTarget, byte* @fontName, GlPathFontStyle @fontStyle, uint @firstGlyph, int @numGlyphs, GlPathHandleMissingGlyphs @handleMissingGlyphs, uint @pathParameterTemplate, float @emScale);

        public void PathGlyphRangeNV(uint @firstPathName, GlPathFontTarget @fontTarget, byte[] @fontName, GlPathFontStyle @fontStyle, uint @firstGlyph, int @numGlyphs, GlPathHandleMissingGlyphs @handleMissingGlyphs, uint @pathParameterTemplate, float @emScale) {
            fixed (byte *ptr_fontName = @fontName) {
                Native_PathGlyphRangeNV(@firstPathName, @fontTarget, @ptr_fontName, @fontStyle, @firstGlyph, @numGlyphs, @handleMissingGlyphs, @pathParameterTemplate, @emScale);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathGlyphsNV")]
        static extern void Native_PathGlyphsNV(uint @firstPathName, GlPathFontTarget @fontTarget, byte* @fontName, GlPathFontStyle @fontStyle, int @numGlyphs, GlPathElementType @type, byte* @charcodes, GlPathHandleMissingGlyphs @handleMissingGlyphs, uint @pathParameterTemplate, float @emScale);

        public void PathGlyphsNV(uint @firstPathName, GlPathFontTarget @fontTarget, byte[] @fontName, GlPathFontStyle @fontStyle, int @numGlyphs, GlPathElementType @type, byte[] @charcodes, GlPathHandleMissingGlyphs @handleMissingGlyphs, uint @pathParameterTemplate, float @emScale) {
            fixed (byte *ptr_fontName = @fontName) {
                fixed (byte *ptr_charcodes = @charcodes) {
                    Native_PathGlyphsNV(@firstPathName, @fontTarget, @ptr_fontName, @fontStyle, @numGlyphs, @type, @ptr_charcodes, @handleMissingGlyphs, @pathParameterTemplate, @emScale);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathMemoryGlyphIndexArrayNV")]
        static extern uint Native_PathMemoryGlyphIndexArrayNV(uint @firstPathName, uint @fontTarget, long @fontSize, byte* @fontData, int @faceIndex, uint @firstGlyphIndex, int @numGlyphs, uint @pathParameterTemplate, float @emScale);

        public uint PathMemoryGlyphIndexArrayNV(uint @firstPathName, uint @fontTarget, long @fontSize, byte[] @fontData, int @faceIndex, uint @firstGlyphIndex, int @numGlyphs, uint @pathParameterTemplate, float @emScale) {
            fixed (byte *ptr_fontData = @fontData) {
                return Native_PathMemoryGlyphIndexArrayNV(@firstPathName, @fontTarget, @fontSize, @ptr_fontData, @faceIndex, @firstGlyphIndex, @numGlyphs, @pathParameterTemplate, @emScale);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathParameterfNV")]
        static extern void Native_PathParameterfNV(uint @path, GlPathParameter @pname, float @value);

        public void PathParameterfNV(uint @path, GlPathParameter @pname, float @value) {
            Native_PathParameterfNV(@path, @pname, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathParameterfvNV")]
        static extern void Native_PathParameterfvNV(uint @path, GlPathParameter @pname, float* @value);

        public void PathParameterfvNV(uint @path, GlPathParameter @pname, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_PathParameterfvNV(@path, @pname, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathParameteriNV")]
        static extern void Native_PathParameteriNV(uint @path, GlPathParameter @pname, int @value);

        public void PathParameteriNV(uint @path, GlPathParameter @pname, int @value) {
            Native_PathParameteriNV(@path, @pname, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathParameterivNV")]
        static extern void Native_PathParameterivNV(uint @path, GlPathParameter @pname, int* @value);

        public void PathParameterivNV(uint @path, GlPathParameter @pname, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_PathParameterivNV(@path, @pname, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathStencilDepthOffsetNV")]
        static extern void Native_PathStencilDepthOffsetNV(float @factor, float @units);

        public void PathStencilDepthOffsetNV(float @factor, float @units) {
            Native_PathStencilDepthOffsetNV(@factor, @units);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathStencilFuncNV")]
        static extern void Native_PathStencilFuncNV(GlStencilFunction @func, int @ref, uint @mask);

        public void PathStencilFuncNV(GlStencilFunction @func, int @ref, uint @mask) {
            Native_PathStencilFuncNV(@func, @ref, @mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathStringNV")]
        static extern void Native_PathStringNV(uint @path, GlPathStringFormat @format, int @length, byte* @pathString);

        public void PathStringNV(uint @path, GlPathStringFormat @format, int @length, byte[] @pathString) {
            fixed (byte *ptr_pathString = @pathString) {
                Native_PathStringNV(@path, @format, @length, @ptr_pathString);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathSubCommandsNV")]
        static extern void Native_PathSubCommandsNV(uint @path, int @commandStart, int @commandsToDelete, int @numCommands, byte* @commands, int @numCoords, uint @coordType, byte* @coords);

        public void PathSubCommandsNV(uint @path, int @commandStart, int @commandsToDelete, int @numCommands, byte[] @commands, int @numCoords, uint @coordType, byte[] @coords) {
            fixed (byte *ptr_commands = @commands) {
                fixed (byte *ptr_coords = @coords) {
                    Native_PathSubCommandsNV(@path, @commandStart, @commandsToDelete, @numCommands, @ptr_commands, @numCoords, @coordType, @ptr_coords);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathSubCoordsNV")]
        static extern void Native_PathSubCoordsNV(uint @path, int @coordStart, int @numCoords, uint @coordType, byte* @coords);

        public void PathSubCoordsNV(uint @path, int @coordStart, int @numCoords, uint @coordType, byte[] @coords) {
            fixed (byte *ptr_coords = @coords) {
                Native_PathSubCoordsNV(@path, @coordStart, @numCoords, @coordType, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPathTexGenNV")]
        static extern void Native_PathTexGenNV(GlPathColor @texCoordSet, GlPathGenMode @genMode, int @components, float* @coeffs);

        public void PathTexGenNV(GlPathColor @texCoordSet, GlPathGenMode @genMode, int @components, float[] @coeffs) {
            fixed (float *ptr_coeffs = @coeffs) {
                Native_PathTexGenNV(@texCoordSet, @genMode, @components, @ptr_coeffs);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPauseTransformFeedback")]
        static extern void Native_PauseTransformFeedback();

        public void PauseTransformFeedback() {
            Native_PauseTransformFeedback();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPauseTransformFeedbackNV")]
        static extern void Native_PauseTransformFeedbackNV();

        public void PauseTransformFeedbackNV() {
            Native_PauseTransformFeedbackNV();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelDataRangeNV")]
        static extern void Native_PixelDataRangeNV(uint @target, int @length, byte* @pointer);

        public void PixelDataRangeNV(uint @target, int @length, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_PixelDataRangeNV(@target, @length, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelMapfv")]
        static extern void Native_PixelMapfv(GlPixelMap @map, int @mapsize, float* @values);

        public void PixelMapfv(GlPixelMap @map, int @mapsize, float[] @values) {
            fixed (float *ptr_values = @values) {
                Native_PixelMapfv(@map, @mapsize, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelMapuiv")]
        static extern void Native_PixelMapuiv(GlPixelMap @map, int @mapsize, uint* @values);

        public void PixelMapuiv(GlPixelMap @map, int @mapsize, uint[] @values) {
            fixed (uint *ptr_values = @values) {
                Native_PixelMapuiv(@map, @mapsize, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelMapusv")]
        static extern void Native_PixelMapusv(GlPixelMap @map, int @mapsize, ushort* @values);

        public void PixelMapusv(GlPixelMap @map, int @mapsize, ushort[] @values) {
            fixed (ushort *ptr_values = @values) {
                Native_PixelMapusv(@map, @mapsize, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelMapx")]
        static extern void Native_PixelMapx(GlPixelMap @map, int @size, int* @values);

        public void PixelMapx(GlPixelMap @map, int @size, int[] @values) {
            fixed (int *ptr_values = @values) {
                Native_PixelMapx(@map, @size, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelStoref")]
        static extern void Native_PixelStoref(GlPixelStoreParameter @pname, float @param);

        public void PixelStoref(GlPixelStoreParameter @pname, float @param) {
            Native_PixelStoref(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelStorei")]
        static extern void Native_PixelStorei(GlPixelStoreParameter @pname, int @param);

        public void PixelStorei(GlPixelStoreParameter @pname, int @param) {
            Native_PixelStorei(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelStorex")]
        static extern void Native_PixelStorex(GlPixelStoreParameter @pname, int @param);

        public void PixelStorex(GlPixelStoreParameter @pname, int @param) {
            Native_PixelStorex(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelTexGenParameterfSGIS")]
        static extern void Native_PixelTexGenParameterfSGIS(GlPixelTexGenParameterNameSGIS @pname, float @param);

        public void PixelTexGenParameterfSGIS(GlPixelTexGenParameterNameSGIS @pname, float @param) {
            Native_PixelTexGenParameterfSGIS(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelTexGenParameterfvSGIS")]
        static extern void Native_PixelTexGenParameterfvSGIS(GlPixelTexGenParameterNameSGIS @pname, float* @params);

        public void PixelTexGenParameterfvSGIS(GlPixelTexGenParameterNameSGIS @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_PixelTexGenParameterfvSGIS(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelTexGenParameteriSGIS")]
        static extern void Native_PixelTexGenParameteriSGIS(GlPixelTexGenParameterNameSGIS @pname, int @param);

        public void PixelTexGenParameteriSGIS(GlPixelTexGenParameterNameSGIS @pname, int @param) {
            Native_PixelTexGenParameteriSGIS(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelTexGenParameterivSGIS")]
        static extern void Native_PixelTexGenParameterivSGIS(GlPixelTexGenParameterNameSGIS @pname, int* @params);

        public void PixelTexGenParameterivSGIS(GlPixelTexGenParameterNameSGIS @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_PixelTexGenParameterivSGIS(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelTexGenSGIX")]
        static extern void Native_PixelTexGenSGIX(uint @mode);

        public void PixelTexGenSGIX(uint @mode) {
            Native_PixelTexGenSGIX(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelTransferf")]
        static extern void Native_PixelTransferf(GlPixelTransferParameter @pname, float @param);

        public void PixelTransferf(GlPixelTransferParameter @pname, float @param) {
            Native_PixelTransferf(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelTransferi")]
        static extern void Native_PixelTransferi(GlPixelTransferParameter @pname, int @param);

        public void PixelTransferi(GlPixelTransferParameter @pname, int @param) {
            Native_PixelTransferi(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelTransferxOES")]
        static extern void Native_PixelTransferxOES(GlPixelTransferParameter @pname, int @param);

        public void PixelTransferxOES(GlPixelTransferParameter @pname, int @param) {
            Native_PixelTransferxOES(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelTransformParameterfEXT")]
        static extern void Native_PixelTransformParameterfEXT(uint @target, uint @pname, float @param);

        public void PixelTransformParameterfEXT(uint @target, uint @pname, float @param) {
            Native_PixelTransformParameterfEXT(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelTransformParameterfvEXT")]
        static extern void Native_PixelTransformParameterfvEXT(uint @target, uint @pname, float* @params);

        public void PixelTransformParameterfvEXT(uint @target, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_PixelTransformParameterfvEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelTransformParameteriEXT")]
        static extern void Native_PixelTransformParameteriEXT(uint @target, uint @pname, int @param);

        public void PixelTransformParameteriEXT(uint @target, uint @pname, int @param) {
            Native_PixelTransformParameteriEXT(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelTransformParameterivEXT")]
        static extern void Native_PixelTransformParameterivEXT(uint @target, uint @pname, int* @params);

        public void PixelTransformParameterivEXT(uint @target, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_PixelTransformParameterivEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelZoom")]
        static extern void Native_PixelZoom(float @xfactor, float @yfactor);

        public void PixelZoom(float @xfactor, float @yfactor) {
            Native_PixelZoom(@xfactor, @yfactor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPixelZoomxOES")]
        static extern void Native_PixelZoomxOES(int @xfactor, int @yfactor);

        public void PixelZoomxOES(int @xfactor, int @yfactor) {
            Native_PixelZoomxOES(@xfactor, @yfactor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointAlongPathNV")]
        static extern bool Native_PointAlongPathNV(uint @path, int @startSegment, int @numSegments, float @distance, float* @x, float* @y, float* @tangentX, float* @tangentY);

        public bool PointAlongPathNV(uint @path, int @startSegment, int @numSegments, float @distance, float[] @x, float[] @y, float[] @tangentX, float[] @tangentY) {
            fixed (float *ptr_x = @x) {
                fixed (float *ptr_y = @y) {
                    fixed (float *ptr_tangentX = @tangentX) {
                        fixed (float *ptr_tangentY = @tangentY) {
                            return Native_PointAlongPathNV(@path, @startSegment, @numSegments, @distance, @ptr_x, @ptr_y, @ptr_tangentX, @ptr_tangentY);
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameterf")]
        static extern void Native_PointParameterf(uint @pname, float @param);

        public void PointParameterf(uint @pname, float @param) {
            Native_PointParameterf(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameterfARB")]
        static extern void Native_PointParameterfARB(uint @pname, float @param);

        public void PointParameterfARB(uint @pname, float @param) {
            Native_PointParameterfARB(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameterfEXT")]
        static extern void Native_PointParameterfEXT(uint @pname, float @param);

        public void PointParameterfEXT(uint @pname, float @param) {
            Native_PointParameterfEXT(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameterfSGIS")]
        static extern void Native_PointParameterfSGIS(uint @pname, float @param);

        public void PointParameterfSGIS(uint @pname, float @param) {
            Native_PointParameterfSGIS(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameterfv")]
        static extern void Native_PointParameterfv(uint @pname, float* @params);

        public void PointParameterfv(uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_PointParameterfv(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameterfvARB")]
        static extern void Native_PointParameterfvARB(uint @pname, float* @params);

        public void PointParameterfvARB(uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_PointParameterfvARB(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameterfvEXT")]
        static extern void Native_PointParameterfvEXT(uint @pname, float* @params);

        public void PointParameterfvEXT(uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_PointParameterfvEXT(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameterfvSGIS")]
        static extern void Native_PointParameterfvSGIS(uint @pname, float* @params);

        public void PointParameterfvSGIS(uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_PointParameterfvSGIS(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameteri")]
        static extern void Native_PointParameteri(uint @pname, int @param);

        public void PointParameteri(uint @pname, int @param) {
            Native_PointParameteri(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameteriNV")]
        static extern void Native_PointParameteriNV(uint @pname, int @param);

        public void PointParameteriNV(uint @pname, int @param) {
            Native_PointParameteriNV(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameteriv")]
        static extern void Native_PointParameteriv(uint @pname, int* @params);

        public void PointParameteriv(uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_PointParameteriv(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameterivNV")]
        static extern void Native_PointParameterivNV(uint @pname, int* @params);

        public void PointParameterivNV(uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_PointParameterivNV(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameterx")]
        static extern void Native_PointParameterx(uint @pname, int @param);

        public void PointParameterx(uint @pname, int @param) {
            Native_PointParameterx(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameterxOES")]
        static extern void Native_PointParameterxOES(uint @pname, int @param);

        public void PointParameterxOES(uint @pname, int @param) {
            Native_PointParameterxOES(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameterxv")]
        static extern void Native_PointParameterxv(uint @pname, int* @params);

        public void PointParameterxv(uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_PointParameterxv(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointParameterxvOES")]
        static extern void Native_PointParameterxvOES(uint @pname, int* @params);

        public void PointParameterxvOES(uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_PointParameterxvOES(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointSize")]
        static extern void Native_PointSize(float @size);

        public void PointSize(float @size) {
            Native_PointSize(@size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointSizePointerOES")]
        static extern void Native_PointSizePointerOES(uint @type, int @stride, byte* @pointer);

        public void PointSizePointerOES(uint @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_PointSizePointerOES(@type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointSizex")]
        static extern void Native_PointSizex(int @size);

        public void PointSizex(int @size) {
            Native_PointSizex(@size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPointSizexOES")]
        static extern void Native_PointSizexOES(int @size);

        public void PointSizexOES(int @size) {
            Native_PointSizexOES(@size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPollAsyncSGIX")]
        static extern int Native_PollAsyncSGIX(uint* @markerp);

        public int PollAsyncSGIX(uint[] @markerp) {
            fixed (uint *ptr_markerp = @markerp) {
                return Native_PollAsyncSGIX(@ptr_markerp);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPollInstrumentsSGIX")]
        static extern int Native_PollInstrumentsSGIX(int* @marker_p);

        public int PollInstrumentsSGIX(int[] @marker_p) {
            fixed (int *ptr_marker_p = @marker_p) {
                return Native_PollInstrumentsSGIX(@ptr_marker_p);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPolygonMode")]
        static extern void Native_PolygonMode(GlMaterialFace @face, GlPolygonMode @mode);

        public void PolygonMode(GlMaterialFace @face, GlPolygonMode @mode) {
            Native_PolygonMode(@face, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPolygonModeNV")]
        static extern void Native_PolygonModeNV(GlMaterialFace @face, GlPolygonMode @mode);

        public void PolygonModeNV(GlMaterialFace @face, GlPolygonMode @mode) {
            Native_PolygonModeNV(@face, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPolygonOffset")]
        static extern void Native_PolygonOffset(float @factor, float @units);

        public void PolygonOffset(float @factor, float @units) {
            Native_PolygonOffset(@factor, @units);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPolygonOffsetClamp")]
        static extern void Native_PolygonOffsetClamp(float @factor, float @units, float @clamp);

        public void PolygonOffsetClamp(float @factor, float @units, float @clamp) {
            Native_PolygonOffsetClamp(@factor, @units, @clamp);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPolygonOffsetClampEXT")]
        static extern void Native_PolygonOffsetClampEXT(float @factor, float @units, float @clamp);

        public void PolygonOffsetClampEXT(float @factor, float @units, float @clamp) {
            Native_PolygonOffsetClampEXT(@factor, @units, @clamp);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPolygonOffsetEXT")]
        static extern void Native_PolygonOffsetEXT(float @factor, float @bias);

        public void PolygonOffsetEXT(float @factor, float @bias) {
            Native_PolygonOffsetEXT(@factor, @bias);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPolygonOffsetx")]
        static extern void Native_PolygonOffsetx(int @factor, int @units);

        public void PolygonOffsetx(int @factor, int @units) {
            Native_PolygonOffsetx(@factor, @units);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPolygonOffsetxOES")]
        static extern void Native_PolygonOffsetxOES(int @factor, int @units);

        public void PolygonOffsetxOES(int @factor, int @units) {
            Native_PolygonOffsetxOES(@factor, @units);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPolygonStipple")]
        static extern void Native_PolygonStipple(byte* @mask);

        public void PolygonStipple(byte[] @mask) {
            fixed (byte *ptr_mask = @mask) {
                Native_PolygonStipple(@ptr_mask);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPopAttrib")]
        static extern void Native_PopAttrib();

        public void PopAttrib() {
            Native_PopAttrib();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPopClientAttrib")]
        static extern void Native_PopClientAttrib();

        public void PopClientAttrib() {
            Native_PopClientAttrib();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPopDebugGroup")]
        static extern void Native_PopDebugGroup();

        public void PopDebugGroup() {
            Native_PopDebugGroup();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPopDebugGroupKHR")]
        static extern void Native_PopDebugGroupKHR();

        public void PopDebugGroupKHR() {
            Native_PopDebugGroupKHR();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPopGroupMarkerEXT")]
        static extern void Native_PopGroupMarkerEXT();

        public void PopGroupMarkerEXT() {
            Native_PopGroupMarkerEXT();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPopMatrix")]
        static extern void Native_PopMatrix();

        public void PopMatrix() {
            Native_PopMatrix();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPopName")]
        static extern void Native_PopName();

        public void PopName() {
            Native_PopName();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPresentFrameDualFillNV")]
        static extern void Native_PresentFrameDualFillNV(uint @video_slot, ulong @minPresentTime, uint @beginPresentTimeId, uint @presentDurationId, uint @type, uint @target0, uint @fill0, uint @target1, uint @fill1, uint @target2, uint @fill2, uint @target3, uint @fill3);

        public void PresentFrameDualFillNV(uint @video_slot, ulong @minPresentTime, uint @beginPresentTimeId, uint @presentDurationId, uint @type, uint @target0, uint @fill0, uint @target1, uint @fill1, uint @target2, uint @fill2, uint @target3, uint @fill3) {
            Native_PresentFrameDualFillNV(@video_slot, @minPresentTime, @beginPresentTimeId, @presentDurationId, @type, @target0, @fill0, @target1, @fill1, @target2, @fill2, @target3, @fill3);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPresentFrameKeyedNV")]
        static extern void Native_PresentFrameKeyedNV(uint @video_slot, ulong @minPresentTime, uint @beginPresentTimeId, uint @presentDurationId, uint @type, uint @target0, uint @fill0, uint @key0, uint @target1, uint @fill1, uint @key1);

        public void PresentFrameKeyedNV(uint @video_slot, ulong @minPresentTime, uint @beginPresentTimeId, uint @presentDurationId, uint @type, uint @target0, uint @fill0, uint @key0, uint @target1, uint @fill1, uint @key1) {
            Native_PresentFrameKeyedNV(@video_slot, @minPresentTime, @beginPresentTimeId, @presentDurationId, @type, @target0, @fill0, @key0, @target1, @fill1, @key1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPrimitiveBoundingBox")]
        static extern void Native_PrimitiveBoundingBox(float @minX, float @minY, float @minZ, float @minW, float @maxX, float @maxY, float @maxZ, float @maxW);

        public void PrimitiveBoundingBox(float @minX, float @minY, float @minZ, float @minW, float @maxX, float @maxY, float @maxZ, float @maxW) {
            Native_PrimitiveBoundingBox(@minX, @minY, @minZ, @minW, @maxX, @maxY, @maxZ, @maxW);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPrimitiveBoundingBoxARB")]
        static extern void Native_PrimitiveBoundingBoxARB(float @minX, float @minY, float @minZ, float @minW, float @maxX, float @maxY, float @maxZ, float @maxW);

        public void PrimitiveBoundingBoxARB(float @minX, float @minY, float @minZ, float @minW, float @maxX, float @maxY, float @maxZ, float @maxW) {
            Native_PrimitiveBoundingBoxARB(@minX, @minY, @minZ, @minW, @maxX, @maxY, @maxZ, @maxW);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPrimitiveBoundingBoxEXT")]
        static extern void Native_PrimitiveBoundingBoxEXT(float @minX, float @minY, float @minZ, float @minW, float @maxX, float @maxY, float @maxZ, float @maxW);

        public void PrimitiveBoundingBoxEXT(float @minX, float @minY, float @minZ, float @minW, float @maxX, float @maxY, float @maxZ, float @maxW) {
            Native_PrimitiveBoundingBoxEXT(@minX, @minY, @minZ, @minW, @maxX, @maxY, @maxZ, @maxW);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPrimitiveBoundingBoxOES")]
        static extern void Native_PrimitiveBoundingBoxOES(float @minX, float @minY, float @minZ, float @minW, float @maxX, float @maxY, float @maxZ, float @maxW);

        public void PrimitiveBoundingBoxOES(float @minX, float @minY, float @minZ, float @minW, float @maxX, float @maxY, float @maxZ, float @maxW) {
            Native_PrimitiveBoundingBoxOES(@minX, @minY, @minZ, @minW, @maxX, @maxY, @maxZ, @maxW);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPrimitiveRestartIndex")]
        static extern void Native_PrimitiveRestartIndex(uint @index);

        public void PrimitiveRestartIndex(uint @index) {
            Native_PrimitiveRestartIndex(@index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPrimitiveRestartIndexNV")]
        static extern void Native_PrimitiveRestartIndexNV(uint @index);

        public void PrimitiveRestartIndexNV(uint @index) {
            Native_PrimitiveRestartIndexNV(@index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPrimitiveRestartNV")]
        static extern void Native_PrimitiveRestartNV();

        public void PrimitiveRestartNV() {
            Native_PrimitiveRestartNV();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPrioritizeTextures")]
        static extern void Native_PrioritizeTextures(int @n, uint* @textures, float* @priorities);

        public void PrioritizeTextures(int @n, uint[] @textures, float[] @priorities) {
            fixed (uint *ptr_textures = @textures) {
                fixed (float *ptr_priorities = @priorities) {
                    Native_PrioritizeTextures(@n, @ptr_textures, @ptr_priorities);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPrioritizeTexturesEXT")]
        static extern void Native_PrioritizeTexturesEXT(int @n, uint* @textures, float* @priorities);

        public void PrioritizeTexturesEXT(int @n, uint[] @textures, float[] @priorities) {
            fixed (uint *ptr_textures = @textures) {
                fixed (float *ptr_priorities = @priorities) {
                    Native_PrioritizeTexturesEXT(@n, @ptr_textures, @ptr_priorities);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPrioritizeTexturesxOES")]
        static extern void Native_PrioritizeTexturesxOES(int @n, uint* @textures, int* @priorities);

        public void PrioritizeTexturesxOES(int @n, uint[] @textures, int[] @priorities) {
            fixed (uint *ptr_textures = @textures) {
                fixed (int *ptr_priorities = @priorities) {
                    Native_PrioritizeTexturesxOES(@n, @ptr_textures, @ptr_priorities);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramBinary")]
        static extern void Native_ProgramBinary(uint @program, uint @binaryFormat, byte* @binary, int @length);

        public void ProgramBinary(uint @program, uint @binaryFormat, byte[] @binary, int @length) {
            fixed (byte *ptr_binary = @binary) {
                Native_ProgramBinary(@program, @binaryFormat, @ptr_binary, @length);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramBinaryOES")]
        static extern void Native_ProgramBinaryOES(uint @program, uint @binaryFormat, byte* @binary, int @length);

        public void ProgramBinaryOES(uint @program, uint @binaryFormat, byte[] @binary, int @length) {
            fixed (byte *ptr_binary = @binary) {
                Native_ProgramBinaryOES(@program, @binaryFormat, @ptr_binary, @length);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramBufferParametersIivNV")]
        static extern void Native_ProgramBufferParametersIivNV(uint @target, uint @bindingIndex, uint @wordIndex, int @count, int* @params);

        public void ProgramBufferParametersIivNV(uint @target, uint @bindingIndex, uint @wordIndex, int @count, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_ProgramBufferParametersIivNV(@target, @bindingIndex, @wordIndex, @count, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramBufferParametersIuivNV")]
        static extern void Native_ProgramBufferParametersIuivNV(uint @target, uint @bindingIndex, uint @wordIndex, int @count, uint* @params);

        public void ProgramBufferParametersIuivNV(uint @target, uint @bindingIndex, uint @wordIndex, int @count, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_ProgramBufferParametersIuivNV(@target, @bindingIndex, @wordIndex, @count, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramBufferParametersfvNV")]
        static extern void Native_ProgramBufferParametersfvNV(uint @target, uint @bindingIndex, uint @wordIndex, int @count, float* @params);

        public void ProgramBufferParametersfvNV(uint @target, uint @bindingIndex, uint @wordIndex, int @count, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_ProgramBufferParametersfvNV(@target, @bindingIndex, @wordIndex, @count, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramEnvParameter4dARB")]
        static extern void Native_ProgramEnvParameter4dARB(uint @target, uint @index, double @x, double @y, double @z, double @w);

        public void ProgramEnvParameter4dARB(uint @target, uint @index, double @x, double @y, double @z, double @w) {
            Native_ProgramEnvParameter4dARB(@target, @index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramEnvParameter4dvARB")]
        static extern void Native_ProgramEnvParameter4dvARB(uint @target, uint @index, double* @params);

        public void ProgramEnvParameter4dvARB(uint @target, uint @index, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_ProgramEnvParameter4dvARB(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramEnvParameter4fARB")]
        static extern void Native_ProgramEnvParameter4fARB(uint @target, uint @index, float @x, float @y, float @z, float @w);

        public void ProgramEnvParameter4fARB(uint @target, uint @index, float @x, float @y, float @z, float @w) {
            Native_ProgramEnvParameter4fARB(@target, @index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramEnvParameter4fvARB")]
        static extern void Native_ProgramEnvParameter4fvARB(uint @target, uint @index, float* @params);

        public void ProgramEnvParameter4fvARB(uint @target, uint @index, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_ProgramEnvParameter4fvARB(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramEnvParameterI4iNV")]
        static extern void Native_ProgramEnvParameterI4iNV(uint @target, uint @index, int @x, int @y, int @z, int @w);

        public void ProgramEnvParameterI4iNV(uint @target, uint @index, int @x, int @y, int @z, int @w) {
            Native_ProgramEnvParameterI4iNV(@target, @index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramEnvParameterI4ivNV")]
        static extern void Native_ProgramEnvParameterI4ivNV(uint @target, uint @index, int* @params);

        public void ProgramEnvParameterI4ivNV(uint @target, uint @index, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_ProgramEnvParameterI4ivNV(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramEnvParameterI4uiNV")]
        static extern void Native_ProgramEnvParameterI4uiNV(uint @target, uint @index, uint @x, uint @y, uint @z, uint @w);

        public void ProgramEnvParameterI4uiNV(uint @target, uint @index, uint @x, uint @y, uint @z, uint @w) {
            Native_ProgramEnvParameterI4uiNV(@target, @index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramEnvParameterI4uivNV")]
        static extern void Native_ProgramEnvParameterI4uivNV(uint @target, uint @index, uint* @params);

        public void ProgramEnvParameterI4uivNV(uint @target, uint @index, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_ProgramEnvParameterI4uivNV(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramEnvParameters4fvEXT")]
        static extern void Native_ProgramEnvParameters4fvEXT(uint @target, uint @index, int @count, float* @params);

        public void ProgramEnvParameters4fvEXT(uint @target, uint @index, int @count, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_ProgramEnvParameters4fvEXT(@target, @index, @count, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramEnvParametersI4ivNV")]
        static extern void Native_ProgramEnvParametersI4ivNV(uint @target, uint @index, int @count, int* @params);

        public void ProgramEnvParametersI4ivNV(uint @target, uint @index, int @count, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_ProgramEnvParametersI4ivNV(@target, @index, @count, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramEnvParametersI4uivNV")]
        static extern void Native_ProgramEnvParametersI4uivNV(uint @target, uint @index, int @count, uint* @params);

        public void ProgramEnvParametersI4uivNV(uint @target, uint @index, int @count, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_ProgramEnvParametersI4uivNV(@target, @index, @count, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramLocalParameter4dARB")]
        static extern void Native_ProgramLocalParameter4dARB(uint @target, uint @index, double @x, double @y, double @z, double @w);

        public void ProgramLocalParameter4dARB(uint @target, uint @index, double @x, double @y, double @z, double @w) {
            Native_ProgramLocalParameter4dARB(@target, @index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramLocalParameter4dvARB")]
        static extern void Native_ProgramLocalParameter4dvARB(uint @target, uint @index, double* @params);

        public void ProgramLocalParameter4dvARB(uint @target, uint @index, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_ProgramLocalParameter4dvARB(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramLocalParameter4fARB")]
        static extern void Native_ProgramLocalParameter4fARB(uint @target, uint @index, float @x, float @y, float @z, float @w);

        public void ProgramLocalParameter4fARB(uint @target, uint @index, float @x, float @y, float @z, float @w) {
            Native_ProgramLocalParameter4fARB(@target, @index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramLocalParameter4fvARB")]
        static extern void Native_ProgramLocalParameter4fvARB(uint @target, uint @index, float* @params);

        public void ProgramLocalParameter4fvARB(uint @target, uint @index, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_ProgramLocalParameter4fvARB(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramLocalParameterI4iNV")]
        static extern void Native_ProgramLocalParameterI4iNV(uint @target, uint @index, int @x, int @y, int @z, int @w);

        public void ProgramLocalParameterI4iNV(uint @target, uint @index, int @x, int @y, int @z, int @w) {
            Native_ProgramLocalParameterI4iNV(@target, @index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramLocalParameterI4ivNV")]
        static extern void Native_ProgramLocalParameterI4ivNV(uint @target, uint @index, int* @params);

        public void ProgramLocalParameterI4ivNV(uint @target, uint @index, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_ProgramLocalParameterI4ivNV(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramLocalParameterI4uiNV")]
        static extern void Native_ProgramLocalParameterI4uiNV(uint @target, uint @index, uint @x, uint @y, uint @z, uint @w);

        public void ProgramLocalParameterI4uiNV(uint @target, uint @index, uint @x, uint @y, uint @z, uint @w) {
            Native_ProgramLocalParameterI4uiNV(@target, @index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramLocalParameterI4uivNV")]
        static extern void Native_ProgramLocalParameterI4uivNV(uint @target, uint @index, uint* @params);

        public void ProgramLocalParameterI4uivNV(uint @target, uint @index, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_ProgramLocalParameterI4uivNV(@target, @index, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramLocalParameters4fvEXT")]
        static extern void Native_ProgramLocalParameters4fvEXT(uint @target, uint @index, int @count, float* @params);

        public void ProgramLocalParameters4fvEXT(uint @target, uint @index, int @count, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_ProgramLocalParameters4fvEXT(@target, @index, @count, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramLocalParametersI4ivNV")]
        static extern void Native_ProgramLocalParametersI4ivNV(uint @target, uint @index, int @count, int* @params);

        public void ProgramLocalParametersI4ivNV(uint @target, uint @index, int @count, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_ProgramLocalParametersI4ivNV(@target, @index, @count, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramLocalParametersI4uivNV")]
        static extern void Native_ProgramLocalParametersI4uivNV(uint @target, uint @index, int @count, uint* @params);

        public void ProgramLocalParametersI4uivNV(uint @target, uint @index, int @count, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_ProgramLocalParametersI4uivNV(@target, @index, @count, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramNamedParameter4dNV")]
        static extern void Native_ProgramNamedParameter4dNV(uint @id, int @len, byte* @name, double @x, double @y, double @z, double @w);

        public void ProgramNamedParameter4dNV(uint @id, int @len, byte[] @name, double @x, double @y, double @z, double @w) {
            fixed (byte *ptr_name = @name) {
                Native_ProgramNamedParameter4dNV(@id, @len, @ptr_name, @x, @y, @z, @w);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramNamedParameter4dvNV")]
        static extern void Native_ProgramNamedParameter4dvNV(uint @id, int @len, byte* @name, double* @v);

        public void ProgramNamedParameter4dvNV(uint @id, int @len, byte[] @name, double[] @v) {
            fixed (byte *ptr_name = @name) {
                fixed (double *ptr_v = @v) {
                    Native_ProgramNamedParameter4dvNV(@id, @len, @ptr_name, @ptr_v);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramNamedParameter4fNV")]
        static extern void Native_ProgramNamedParameter4fNV(uint @id, int @len, byte* @name, float @x, float @y, float @z, float @w);

        public void ProgramNamedParameter4fNV(uint @id, int @len, byte[] @name, float @x, float @y, float @z, float @w) {
            fixed (byte *ptr_name = @name) {
                Native_ProgramNamedParameter4fNV(@id, @len, @ptr_name, @x, @y, @z, @w);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramNamedParameter4fvNV")]
        static extern void Native_ProgramNamedParameter4fvNV(uint @id, int @len, byte* @name, float* @v);

        public void ProgramNamedParameter4fvNV(uint @id, int @len, byte[] @name, float[] @v) {
            fixed (byte *ptr_name = @name) {
                fixed (float *ptr_v = @v) {
                    Native_ProgramNamedParameter4fvNV(@id, @len, @ptr_name, @ptr_v);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramParameter4dNV")]
        static extern void Native_ProgramParameter4dNV(uint @target, uint @index, double @x, double @y, double @z, double @w);

        public void ProgramParameter4dNV(uint @target, uint @index, double @x, double @y, double @z, double @w) {
            Native_ProgramParameter4dNV(@target, @index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramParameter4dvNV")]
        static extern void Native_ProgramParameter4dvNV(uint @target, uint @index, double* @v);

        public void ProgramParameter4dvNV(uint @target, uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_ProgramParameter4dvNV(@target, @index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramParameter4fNV")]
        static extern void Native_ProgramParameter4fNV(uint @target, uint @index, float @x, float @y, float @z, float @w);

        public void ProgramParameter4fNV(uint @target, uint @index, float @x, float @y, float @z, float @w) {
            Native_ProgramParameter4fNV(@target, @index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramParameter4fvNV")]
        static extern void Native_ProgramParameter4fvNV(uint @target, uint @index, float* @v);

        public void ProgramParameter4fvNV(uint @target, uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_ProgramParameter4fvNV(@target, @index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramParameteri")]
        static extern void Native_ProgramParameteri(uint @program, GlProgramParameterPName @pname, int @value);

        public void ProgramParameteri(uint @program, GlProgramParameterPName @pname, int @value) {
            Native_ProgramParameteri(@program, @pname, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramParameteriARB")]
        static extern void Native_ProgramParameteriARB(uint @program, GlProgramParameterPName @pname, int @value);

        public void ProgramParameteriARB(uint @program, GlProgramParameterPName @pname, int @value) {
            Native_ProgramParameteriARB(@program, @pname, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramParameteriEXT")]
        static extern void Native_ProgramParameteriEXT(uint @program, GlProgramParameterPName @pname, int @value);

        public void ProgramParameteriEXT(uint @program, GlProgramParameterPName @pname, int @value) {
            Native_ProgramParameteriEXT(@program, @pname, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramParameters4dvNV")]
        static extern void Native_ProgramParameters4dvNV(uint @target, uint @index, int @count, double* @v);

        public void ProgramParameters4dvNV(uint @target, uint @index, int @count, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_ProgramParameters4dvNV(@target, @index, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramParameters4fvNV")]
        static extern void Native_ProgramParameters4fvNV(uint @target, uint @index, int @count, float* @v);

        public void ProgramParameters4fvNV(uint @target, uint @index, int @count, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_ProgramParameters4fvNV(@target, @index, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramPathFragmentInputGenNV")]
        static extern void Native_ProgramPathFragmentInputGenNV(uint @program, int @location, uint @genMode, int @components, float* @coeffs);

        public void ProgramPathFragmentInputGenNV(uint @program, int @location, uint @genMode, int @components, float[] @coeffs) {
            fixed (float *ptr_coeffs = @coeffs) {
                Native_ProgramPathFragmentInputGenNV(@program, @location, @genMode, @components, @ptr_coeffs);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramStringARB")]
        static extern void Native_ProgramStringARB(uint @target, uint @format, int @len, byte* @string);

        public void ProgramStringARB(uint @target, uint @format, int @len, byte[] @string) {
            fixed (byte *ptr_string = @string) {
                Native_ProgramStringARB(@target, @format, @len, @ptr_string);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramSubroutineParametersuivNV")]
        static extern void Native_ProgramSubroutineParametersuivNV(uint @target, int @count, uint* @params);

        public void ProgramSubroutineParametersuivNV(uint @target, int @count, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_ProgramSubroutineParametersuivNV(@target, @count, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1d")]
        static extern void Native_ProgramUniform1d(uint @program, int @location, double @v0);

        public void ProgramUniform1d(uint @program, int @location, double @v0) {
            Native_ProgramUniform1d(@program, @location, @v0);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1dEXT")]
        static extern void Native_ProgramUniform1dEXT(uint @program, int @location, double @x);

        public void ProgramUniform1dEXT(uint @program, int @location, double @x) {
            Native_ProgramUniform1dEXT(@program, @location, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1dv")]
        static extern void Native_ProgramUniform1dv(uint @program, int @location, int @count, double* @value);

        public void ProgramUniform1dv(uint @program, int @location, int @count, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniform1dv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1dvEXT")]
        static extern void Native_ProgramUniform1dvEXT(uint @program, int @location, int @count, double* @value);

        public void ProgramUniform1dvEXT(uint @program, int @location, int @count, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniform1dvEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1f")]
        static extern void Native_ProgramUniform1f(uint @program, int @location, float @v0);

        public void ProgramUniform1f(uint @program, int @location, float @v0) {
            Native_ProgramUniform1f(@program, @location, @v0);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1fEXT")]
        static extern void Native_ProgramUniform1fEXT(uint @program, int @location, float @v0);

        public void ProgramUniform1fEXT(uint @program, int @location, float @v0) {
            Native_ProgramUniform1fEXT(@program, @location, @v0);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1fv")]
        static extern void Native_ProgramUniform1fv(uint @program, int @location, int @count, float* @value);

        public void ProgramUniform1fv(uint @program, int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniform1fv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1fvEXT")]
        static extern void Native_ProgramUniform1fvEXT(uint @program, int @location, int @count, float* @value);

        public void ProgramUniform1fvEXT(uint @program, int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniform1fvEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1i")]
        static extern void Native_ProgramUniform1i(uint @program, int @location, int @v0);

        public void ProgramUniform1i(uint @program, int @location, int @v0) {
            Native_ProgramUniform1i(@program, @location, @v0);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1i64ARB")]
        static extern void Native_ProgramUniform1i64ARB(uint @program, int @location, long @x);

        public void ProgramUniform1i64ARB(uint @program, int @location, long @x) {
            Native_ProgramUniform1i64ARB(@program, @location, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1i64NV")]
        static extern void Native_ProgramUniform1i64NV(uint @program, int @location, long @x);

        public void ProgramUniform1i64NV(uint @program, int @location, long @x) {
            Native_ProgramUniform1i64NV(@program, @location, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1i64vARB")]
        static extern void Native_ProgramUniform1i64vARB(uint @program, int @location, int @count, long* @value);

        public void ProgramUniform1i64vARB(uint @program, int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_ProgramUniform1i64vARB(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1i64vNV")]
        static extern void Native_ProgramUniform1i64vNV(uint @program, int @location, int @count, long* @value);

        public void ProgramUniform1i64vNV(uint @program, int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_ProgramUniform1i64vNV(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1iEXT")]
        static extern void Native_ProgramUniform1iEXT(uint @program, int @location, int @v0);

        public void ProgramUniform1iEXT(uint @program, int @location, int @v0) {
            Native_ProgramUniform1iEXT(@program, @location, @v0);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1iv")]
        static extern void Native_ProgramUniform1iv(uint @program, int @location, int @count, int* @value);

        public void ProgramUniform1iv(uint @program, int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_ProgramUniform1iv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1ivEXT")]
        static extern void Native_ProgramUniform1ivEXT(uint @program, int @location, int @count, int* @value);

        public void ProgramUniform1ivEXT(uint @program, int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_ProgramUniform1ivEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1ui")]
        static extern void Native_ProgramUniform1ui(uint @program, int @location, uint @v0);

        public void ProgramUniform1ui(uint @program, int @location, uint @v0) {
            Native_ProgramUniform1ui(@program, @location, @v0);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1ui64ARB")]
        static extern void Native_ProgramUniform1ui64ARB(uint @program, int @location, ulong @x);

        public void ProgramUniform1ui64ARB(uint @program, int @location, ulong @x) {
            Native_ProgramUniform1ui64ARB(@program, @location, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1ui64NV")]
        static extern void Native_ProgramUniform1ui64NV(uint @program, int @location, ulong @x);

        public void ProgramUniform1ui64NV(uint @program, int @location, ulong @x) {
            Native_ProgramUniform1ui64NV(@program, @location, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1ui64vARB")]
        static extern void Native_ProgramUniform1ui64vARB(uint @program, int @location, int @count, ulong* @value);

        public void ProgramUniform1ui64vARB(uint @program, int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_ProgramUniform1ui64vARB(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1ui64vNV")]
        static extern void Native_ProgramUniform1ui64vNV(uint @program, int @location, int @count, ulong* @value);

        public void ProgramUniform1ui64vNV(uint @program, int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_ProgramUniform1ui64vNV(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1uiEXT")]
        static extern void Native_ProgramUniform1uiEXT(uint @program, int @location, uint @v0);

        public void ProgramUniform1uiEXT(uint @program, int @location, uint @v0) {
            Native_ProgramUniform1uiEXT(@program, @location, @v0);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1uiv")]
        static extern void Native_ProgramUniform1uiv(uint @program, int @location, int @count, uint* @value);

        public void ProgramUniform1uiv(uint @program, int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_ProgramUniform1uiv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform1uivEXT")]
        static extern void Native_ProgramUniform1uivEXT(uint @program, int @location, int @count, uint* @value);

        public void ProgramUniform1uivEXT(uint @program, int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_ProgramUniform1uivEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2d")]
        static extern void Native_ProgramUniform2d(uint @program, int @location, double @v0, double @v1);

        public void ProgramUniform2d(uint @program, int @location, double @v0, double @v1) {
            Native_ProgramUniform2d(@program, @location, @v0, @v1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2dEXT")]
        static extern void Native_ProgramUniform2dEXT(uint @program, int @location, double @x, double @y);

        public void ProgramUniform2dEXT(uint @program, int @location, double @x, double @y) {
            Native_ProgramUniform2dEXT(@program, @location, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2dv")]
        static extern void Native_ProgramUniform2dv(uint @program, int @location, int @count, double* @value);

        public void ProgramUniform2dv(uint @program, int @location, int @count, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniform2dv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2dvEXT")]
        static extern void Native_ProgramUniform2dvEXT(uint @program, int @location, int @count, double* @value);

        public void ProgramUniform2dvEXT(uint @program, int @location, int @count, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniform2dvEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2f")]
        static extern void Native_ProgramUniform2f(uint @program, int @location, float @v0, float @v1);

        public void ProgramUniform2f(uint @program, int @location, float @v0, float @v1) {
            Native_ProgramUniform2f(@program, @location, @v0, @v1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2fEXT")]
        static extern void Native_ProgramUniform2fEXT(uint @program, int @location, float @v0, float @v1);

        public void ProgramUniform2fEXT(uint @program, int @location, float @v0, float @v1) {
            Native_ProgramUniform2fEXT(@program, @location, @v0, @v1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2fv")]
        static extern void Native_ProgramUniform2fv(uint @program, int @location, int @count, float* @value);

        public void ProgramUniform2fv(uint @program, int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniform2fv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2fvEXT")]
        static extern void Native_ProgramUniform2fvEXT(uint @program, int @location, int @count, float* @value);

        public void ProgramUniform2fvEXT(uint @program, int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniform2fvEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2i")]
        static extern void Native_ProgramUniform2i(uint @program, int @location, int @v0, int @v1);

        public void ProgramUniform2i(uint @program, int @location, int @v0, int @v1) {
            Native_ProgramUniform2i(@program, @location, @v0, @v1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2i64ARB")]
        static extern void Native_ProgramUniform2i64ARB(uint @program, int @location, long @x, long @y);

        public void ProgramUniform2i64ARB(uint @program, int @location, long @x, long @y) {
            Native_ProgramUniform2i64ARB(@program, @location, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2i64NV")]
        static extern void Native_ProgramUniform2i64NV(uint @program, int @location, long @x, long @y);

        public void ProgramUniform2i64NV(uint @program, int @location, long @x, long @y) {
            Native_ProgramUniform2i64NV(@program, @location, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2i64vARB")]
        static extern void Native_ProgramUniform2i64vARB(uint @program, int @location, int @count, long* @value);

        public void ProgramUniform2i64vARB(uint @program, int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_ProgramUniform2i64vARB(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2i64vNV")]
        static extern void Native_ProgramUniform2i64vNV(uint @program, int @location, int @count, long* @value);

        public void ProgramUniform2i64vNV(uint @program, int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_ProgramUniform2i64vNV(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2iEXT")]
        static extern void Native_ProgramUniform2iEXT(uint @program, int @location, int @v0, int @v1);

        public void ProgramUniform2iEXT(uint @program, int @location, int @v0, int @v1) {
            Native_ProgramUniform2iEXT(@program, @location, @v0, @v1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2iv")]
        static extern void Native_ProgramUniform2iv(uint @program, int @location, int @count, int* @value);

        public void ProgramUniform2iv(uint @program, int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_ProgramUniform2iv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2ivEXT")]
        static extern void Native_ProgramUniform2ivEXT(uint @program, int @location, int @count, int* @value);

        public void ProgramUniform2ivEXT(uint @program, int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_ProgramUniform2ivEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2ui")]
        static extern void Native_ProgramUniform2ui(uint @program, int @location, uint @v0, uint @v1);

        public void ProgramUniform2ui(uint @program, int @location, uint @v0, uint @v1) {
            Native_ProgramUniform2ui(@program, @location, @v0, @v1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2ui64ARB")]
        static extern void Native_ProgramUniform2ui64ARB(uint @program, int @location, ulong @x, ulong @y);

        public void ProgramUniform2ui64ARB(uint @program, int @location, ulong @x, ulong @y) {
            Native_ProgramUniform2ui64ARB(@program, @location, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2ui64NV")]
        static extern void Native_ProgramUniform2ui64NV(uint @program, int @location, ulong @x, ulong @y);

        public void ProgramUniform2ui64NV(uint @program, int @location, ulong @x, ulong @y) {
            Native_ProgramUniform2ui64NV(@program, @location, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2ui64vARB")]
        static extern void Native_ProgramUniform2ui64vARB(uint @program, int @location, int @count, ulong* @value);

        public void ProgramUniform2ui64vARB(uint @program, int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_ProgramUniform2ui64vARB(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2ui64vNV")]
        static extern void Native_ProgramUniform2ui64vNV(uint @program, int @location, int @count, ulong* @value);

        public void ProgramUniform2ui64vNV(uint @program, int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_ProgramUniform2ui64vNV(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2uiEXT")]
        static extern void Native_ProgramUniform2uiEXT(uint @program, int @location, uint @v0, uint @v1);

        public void ProgramUniform2uiEXT(uint @program, int @location, uint @v0, uint @v1) {
            Native_ProgramUniform2uiEXT(@program, @location, @v0, @v1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2uiv")]
        static extern void Native_ProgramUniform2uiv(uint @program, int @location, int @count, uint* @value);

        public void ProgramUniform2uiv(uint @program, int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_ProgramUniform2uiv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform2uivEXT")]
        static extern void Native_ProgramUniform2uivEXT(uint @program, int @location, int @count, uint* @value);

        public void ProgramUniform2uivEXT(uint @program, int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_ProgramUniform2uivEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3d")]
        static extern void Native_ProgramUniform3d(uint @program, int @location, double @v0, double @v1, double @v2);

        public void ProgramUniform3d(uint @program, int @location, double @v0, double @v1, double @v2) {
            Native_ProgramUniform3d(@program, @location, @v0, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3dEXT")]
        static extern void Native_ProgramUniform3dEXT(uint @program, int @location, double @x, double @y, double @z);

        public void ProgramUniform3dEXT(uint @program, int @location, double @x, double @y, double @z) {
            Native_ProgramUniform3dEXT(@program, @location, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3dv")]
        static extern void Native_ProgramUniform3dv(uint @program, int @location, int @count, double* @value);

        public void ProgramUniform3dv(uint @program, int @location, int @count, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniform3dv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3dvEXT")]
        static extern void Native_ProgramUniform3dvEXT(uint @program, int @location, int @count, double* @value);

        public void ProgramUniform3dvEXT(uint @program, int @location, int @count, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniform3dvEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3f")]
        static extern void Native_ProgramUniform3f(uint @program, int @location, float @v0, float @v1, float @v2);

        public void ProgramUniform3f(uint @program, int @location, float @v0, float @v1, float @v2) {
            Native_ProgramUniform3f(@program, @location, @v0, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3fEXT")]
        static extern void Native_ProgramUniform3fEXT(uint @program, int @location, float @v0, float @v1, float @v2);

        public void ProgramUniform3fEXT(uint @program, int @location, float @v0, float @v1, float @v2) {
            Native_ProgramUniform3fEXT(@program, @location, @v0, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3fv")]
        static extern void Native_ProgramUniform3fv(uint @program, int @location, int @count, float* @value);

        public void ProgramUniform3fv(uint @program, int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniform3fv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3fvEXT")]
        static extern void Native_ProgramUniform3fvEXT(uint @program, int @location, int @count, float* @value);

        public void ProgramUniform3fvEXT(uint @program, int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniform3fvEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3i")]
        static extern void Native_ProgramUniform3i(uint @program, int @location, int @v0, int @v1, int @v2);

        public void ProgramUniform3i(uint @program, int @location, int @v0, int @v1, int @v2) {
            Native_ProgramUniform3i(@program, @location, @v0, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3i64ARB")]
        static extern void Native_ProgramUniform3i64ARB(uint @program, int @location, long @x, long @y, long @z);

        public void ProgramUniform3i64ARB(uint @program, int @location, long @x, long @y, long @z) {
            Native_ProgramUniform3i64ARB(@program, @location, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3i64NV")]
        static extern void Native_ProgramUniform3i64NV(uint @program, int @location, long @x, long @y, long @z);

        public void ProgramUniform3i64NV(uint @program, int @location, long @x, long @y, long @z) {
            Native_ProgramUniform3i64NV(@program, @location, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3i64vARB")]
        static extern void Native_ProgramUniform3i64vARB(uint @program, int @location, int @count, long* @value);

        public void ProgramUniform3i64vARB(uint @program, int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_ProgramUniform3i64vARB(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3i64vNV")]
        static extern void Native_ProgramUniform3i64vNV(uint @program, int @location, int @count, long* @value);

        public void ProgramUniform3i64vNV(uint @program, int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_ProgramUniform3i64vNV(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3iEXT")]
        static extern void Native_ProgramUniform3iEXT(uint @program, int @location, int @v0, int @v1, int @v2);

        public void ProgramUniform3iEXT(uint @program, int @location, int @v0, int @v1, int @v2) {
            Native_ProgramUniform3iEXT(@program, @location, @v0, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3iv")]
        static extern void Native_ProgramUniform3iv(uint @program, int @location, int @count, int* @value);

        public void ProgramUniform3iv(uint @program, int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_ProgramUniform3iv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3ivEXT")]
        static extern void Native_ProgramUniform3ivEXT(uint @program, int @location, int @count, int* @value);

        public void ProgramUniform3ivEXT(uint @program, int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_ProgramUniform3ivEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3ui")]
        static extern void Native_ProgramUniform3ui(uint @program, int @location, uint @v0, uint @v1, uint @v2);

        public void ProgramUniform3ui(uint @program, int @location, uint @v0, uint @v1, uint @v2) {
            Native_ProgramUniform3ui(@program, @location, @v0, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3ui64ARB")]
        static extern void Native_ProgramUniform3ui64ARB(uint @program, int @location, ulong @x, ulong @y, ulong @z);

        public void ProgramUniform3ui64ARB(uint @program, int @location, ulong @x, ulong @y, ulong @z) {
            Native_ProgramUniform3ui64ARB(@program, @location, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3ui64NV")]
        static extern void Native_ProgramUniform3ui64NV(uint @program, int @location, ulong @x, ulong @y, ulong @z);

        public void ProgramUniform3ui64NV(uint @program, int @location, ulong @x, ulong @y, ulong @z) {
            Native_ProgramUniform3ui64NV(@program, @location, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3ui64vARB")]
        static extern void Native_ProgramUniform3ui64vARB(uint @program, int @location, int @count, ulong* @value);

        public void ProgramUniform3ui64vARB(uint @program, int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_ProgramUniform3ui64vARB(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3ui64vNV")]
        static extern void Native_ProgramUniform3ui64vNV(uint @program, int @location, int @count, ulong* @value);

        public void ProgramUniform3ui64vNV(uint @program, int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_ProgramUniform3ui64vNV(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3uiEXT")]
        static extern void Native_ProgramUniform3uiEXT(uint @program, int @location, uint @v0, uint @v1, uint @v2);

        public void ProgramUniform3uiEXT(uint @program, int @location, uint @v0, uint @v1, uint @v2) {
            Native_ProgramUniform3uiEXT(@program, @location, @v0, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3uiv")]
        static extern void Native_ProgramUniform3uiv(uint @program, int @location, int @count, uint* @value);

        public void ProgramUniform3uiv(uint @program, int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_ProgramUniform3uiv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform3uivEXT")]
        static extern void Native_ProgramUniform3uivEXT(uint @program, int @location, int @count, uint* @value);

        public void ProgramUniform3uivEXT(uint @program, int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_ProgramUniform3uivEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4d")]
        static extern void Native_ProgramUniform4d(uint @program, int @location, double @v0, double @v1, double @v2, double @v3);

        public void ProgramUniform4d(uint @program, int @location, double @v0, double @v1, double @v2, double @v3) {
            Native_ProgramUniform4d(@program, @location, @v0, @v1, @v2, @v3);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4dEXT")]
        static extern void Native_ProgramUniform4dEXT(uint @program, int @location, double @x, double @y, double @z, double @w);

        public void ProgramUniform4dEXT(uint @program, int @location, double @x, double @y, double @z, double @w) {
            Native_ProgramUniform4dEXT(@program, @location, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4dv")]
        static extern void Native_ProgramUniform4dv(uint @program, int @location, int @count, double* @value);

        public void ProgramUniform4dv(uint @program, int @location, int @count, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniform4dv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4dvEXT")]
        static extern void Native_ProgramUniform4dvEXT(uint @program, int @location, int @count, double* @value);

        public void ProgramUniform4dvEXT(uint @program, int @location, int @count, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniform4dvEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4f")]
        static extern void Native_ProgramUniform4f(uint @program, int @location, float @v0, float @v1, float @v2, float @v3);

        public void ProgramUniform4f(uint @program, int @location, float @v0, float @v1, float @v2, float @v3) {
            Native_ProgramUniform4f(@program, @location, @v0, @v1, @v2, @v3);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4fEXT")]
        static extern void Native_ProgramUniform4fEXT(uint @program, int @location, float @v0, float @v1, float @v2, float @v3);

        public void ProgramUniform4fEXT(uint @program, int @location, float @v0, float @v1, float @v2, float @v3) {
            Native_ProgramUniform4fEXT(@program, @location, @v0, @v1, @v2, @v3);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4fv")]
        static extern void Native_ProgramUniform4fv(uint @program, int @location, int @count, float* @value);

        public void ProgramUniform4fv(uint @program, int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniform4fv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4fvEXT")]
        static extern void Native_ProgramUniform4fvEXT(uint @program, int @location, int @count, float* @value);

        public void ProgramUniform4fvEXT(uint @program, int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniform4fvEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4i")]
        static extern void Native_ProgramUniform4i(uint @program, int @location, int @v0, int @v1, int @v2, int @v3);

        public void ProgramUniform4i(uint @program, int @location, int @v0, int @v1, int @v2, int @v3) {
            Native_ProgramUniform4i(@program, @location, @v0, @v1, @v2, @v3);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4i64ARB")]
        static extern void Native_ProgramUniform4i64ARB(uint @program, int @location, long @x, long @y, long @z, long @w);

        public void ProgramUniform4i64ARB(uint @program, int @location, long @x, long @y, long @z, long @w) {
            Native_ProgramUniform4i64ARB(@program, @location, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4i64NV")]
        static extern void Native_ProgramUniform4i64NV(uint @program, int @location, long @x, long @y, long @z, long @w);

        public void ProgramUniform4i64NV(uint @program, int @location, long @x, long @y, long @z, long @w) {
            Native_ProgramUniform4i64NV(@program, @location, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4i64vARB")]
        static extern void Native_ProgramUniform4i64vARB(uint @program, int @location, int @count, long* @value);

        public void ProgramUniform4i64vARB(uint @program, int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_ProgramUniform4i64vARB(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4i64vNV")]
        static extern void Native_ProgramUniform4i64vNV(uint @program, int @location, int @count, long* @value);

        public void ProgramUniform4i64vNV(uint @program, int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_ProgramUniform4i64vNV(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4iEXT")]
        static extern void Native_ProgramUniform4iEXT(uint @program, int @location, int @v0, int @v1, int @v2, int @v3);

        public void ProgramUniform4iEXT(uint @program, int @location, int @v0, int @v1, int @v2, int @v3) {
            Native_ProgramUniform4iEXT(@program, @location, @v0, @v1, @v2, @v3);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4iv")]
        static extern void Native_ProgramUniform4iv(uint @program, int @location, int @count, int* @value);

        public void ProgramUniform4iv(uint @program, int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_ProgramUniform4iv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4ivEXT")]
        static extern void Native_ProgramUniform4ivEXT(uint @program, int @location, int @count, int* @value);

        public void ProgramUniform4ivEXT(uint @program, int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_ProgramUniform4ivEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4ui")]
        static extern void Native_ProgramUniform4ui(uint @program, int @location, uint @v0, uint @v1, uint @v2, uint @v3);

        public void ProgramUniform4ui(uint @program, int @location, uint @v0, uint @v1, uint @v2, uint @v3) {
            Native_ProgramUniform4ui(@program, @location, @v0, @v1, @v2, @v3);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4ui64ARB")]
        static extern void Native_ProgramUniform4ui64ARB(uint @program, int @location, ulong @x, ulong @y, ulong @z, ulong @w);

        public void ProgramUniform4ui64ARB(uint @program, int @location, ulong @x, ulong @y, ulong @z, ulong @w) {
            Native_ProgramUniform4ui64ARB(@program, @location, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4ui64NV")]
        static extern void Native_ProgramUniform4ui64NV(uint @program, int @location, ulong @x, ulong @y, ulong @z, ulong @w);

        public void ProgramUniform4ui64NV(uint @program, int @location, ulong @x, ulong @y, ulong @z, ulong @w) {
            Native_ProgramUniform4ui64NV(@program, @location, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4ui64vARB")]
        static extern void Native_ProgramUniform4ui64vARB(uint @program, int @location, int @count, ulong* @value);

        public void ProgramUniform4ui64vARB(uint @program, int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_ProgramUniform4ui64vARB(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4ui64vNV")]
        static extern void Native_ProgramUniform4ui64vNV(uint @program, int @location, int @count, ulong* @value);

        public void ProgramUniform4ui64vNV(uint @program, int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_ProgramUniform4ui64vNV(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4uiEXT")]
        static extern void Native_ProgramUniform4uiEXT(uint @program, int @location, uint @v0, uint @v1, uint @v2, uint @v3);

        public void ProgramUniform4uiEXT(uint @program, int @location, uint @v0, uint @v1, uint @v2, uint @v3) {
            Native_ProgramUniform4uiEXT(@program, @location, @v0, @v1, @v2, @v3);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4uiv")]
        static extern void Native_ProgramUniform4uiv(uint @program, int @location, int @count, uint* @value);

        public void ProgramUniform4uiv(uint @program, int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_ProgramUniform4uiv(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniform4uivEXT")]
        static extern void Native_ProgramUniform4uivEXT(uint @program, int @location, int @count, uint* @value);

        public void ProgramUniform4uivEXT(uint @program, int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_ProgramUniform4uivEXT(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformHandleui64ARB")]
        static extern void Native_ProgramUniformHandleui64ARB(uint @program, int @location, ulong @value);

        public void ProgramUniformHandleui64ARB(uint @program, int @location, ulong @value) {
            Native_ProgramUniformHandleui64ARB(@program, @location, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformHandleui64IMG")]
        static extern void Native_ProgramUniformHandleui64IMG(uint @program, int @location, ulong @value);

        public void ProgramUniformHandleui64IMG(uint @program, int @location, ulong @value) {
            Native_ProgramUniformHandleui64IMG(@program, @location, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformHandleui64NV")]
        static extern void Native_ProgramUniformHandleui64NV(uint @program, int @location, ulong @value);

        public void ProgramUniformHandleui64NV(uint @program, int @location, ulong @value) {
            Native_ProgramUniformHandleui64NV(@program, @location, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformHandleui64vARB")]
        static extern void Native_ProgramUniformHandleui64vARB(uint @program, int @location, int @count, ulong* @values);

        public void ProgramUniformHandleui64vARB(uint @program, int @location, int @count, ulong[] @values) {
            fixed (ulong *ptr_values = @values) {
                Native_ProgramUniformHandleui64vARB(@program, @location, @count, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformHandleui64vIMG")]
        static extern void Native_ProgramUniformHandleui64vIMG(uint @program, int @location, int @count, ulong* @values);

        public void ProgramUniformHandleui64vIMG(uint @program, int @location, int @count, ulong[] @values) {
            fixed (ulong *ptr_values = @values) {
                Native_ProgramUniformHandleui64vIMG(@program, @location, @count, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformHandleui64vNV")]
        static extern void Native_ProgramUniformHandleui64vNV(uint @program, int @location, int @count, ulong* @values);

        public void ProgramUniformHandleui64vNV(uint @program, int @location, int @count, ulong[] @values) {
            fixed (ulong *ptr_values = @values) {
                Native_ProgramUniformHandleui64vNV(@program, @location, @count, @ptr_values);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix2dv")]
        static extern void Native_ProgramUniformMatrix2dv(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix2dv(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix2dv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix2dvEXT")]
        static extern void Native_ProgramUniformMatrix2dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix2dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix2dvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix2fv")]
        static extern void Native_ProgramUniformMatrix2fv(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix2fv(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix2fv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix2fvEXT")]
        static extern void Native_ProgramUniformMatrix2fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix2fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix2fvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix2x3dv")]
        static extern void Native_ProgramUniformMatrix2x3dv(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix2x3dv(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix2x3dv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix2x3dvEXT")]
        static extern void Native_ProgramUniformMatrix2x3dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix2x3dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix2x3dvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix2x3fv")]
        static extern void Native_ProgramUniformMatrix2x3fv(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix2x3fv(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix2x3fv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
        static extern void Native_ProgramUniformMatrix2x3fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix2x3fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix2x3fvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix2x4dv")]
        static extern void Native_ProgramUniformMatrix2x4dv(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix2x4dv(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix2x4dv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix2x4dvEXT")]
        static extern void Native_ProgramUniformMatrix2x4dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix2x4dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix2x4dvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix2x4fv")]
        static extern void Native_ProgramUniformMatrix2x4fv(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix2x4fv(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix2x4fv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
        static extern void Native_ProgramUniformMatrix2x4fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix2x4fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix2x4fvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix3dv")]
        static extern void Native_ProgramUniformMatrix3dv(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix3dv(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix3dv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix3dvEXT")]
        static extern void Native_ProgramUniformMatrix3dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix3dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix3dvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix3fv")]
        static extern void Native_ProgramUniformMatrix3fv(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix3fv(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix3fv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix3fvEXT")]
        static extern void Native_ProgramUniformMatrix3fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix3fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix3fvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix3x2dv")]
        static extern void Native_ProgramUniformMatrix3x2dv(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix3x2dv(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix3x2dv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix3x2dvEXT")]
        static extern void Native_ProgramUniformMatrix3x2dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix3x2dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix3x2dvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix3x2fv")]
        static extern void Native_ProgramUniformMatrix3x2fv(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix3x2fv(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix3x2fv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
        static extern void Native_ProgramUniformMatrix3x2fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix3x2fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix3x2fvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix3x4dv")]
        static extern void Native_ProgramUniformMatrix3x4dv(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix3x4dv(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix3x4dv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix3x4dvEXT")]
        static extern void Native_ProgramUniformMatrix3x4dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix3x4dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix3x4dvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix3x4fv")]
        static extern void Native_ProgramUniformMatrix3x4fv(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix3x4fv(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix3x4fv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
        static extern void Native_ProgramUniformMatrix3x4fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix3x4fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix3x4fvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix4dv")]
        static extern void Native_ProgramUniformMatrix4dv(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix4dv(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix4dv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix4dvEXT")]
        static extern void Native_ProgramUniformMatrix4dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix4dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix4dvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix4fv")]
        static extern void Native_ProgramUniformMatrix4fv(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix4fv(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix4fv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix4fvEXT")]
        static extern void Native_ProgramUniformMatrix4fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix4fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix4fvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix4x2dv")]
        static extern void Native_ProgramUniformMatrix4x2dv(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix4x2dv(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix4x2dv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix4x2dvEXT")]
        static extern void Native_ProgramUniformMatrix4x2dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix4x2dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix4x2dvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix4x2fv")]
        static extern void Native_ProgramUniformMatrix4x2fv(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix4x2fv(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix4x2fv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
        static extern void Native_ProgramUniformMatrix4x2fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix4x2fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix4x2fvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix4x3dv")]
        static extern void Native_ProgramUniformMatrix4x3dv(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix4x3dv(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix4x3dv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix4x3dvEXT")]
        static extern void Native_ProgramUniformMatrix4x3dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double* @value);

        public void ProgramUniformMatrix4x3dvEXT(uint @program, int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_ProgramUniformMatrix4x3dvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix4x3fv")]
        static extern void Native_ProgramUniformMatrix4x3fv(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix4x3fv(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix4x3fv(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
        static extern void Native_ProgramUniformMatrix4x3fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float* @value);

        public void ProgramUniformMatrix4x3fvEXT(uint @program, int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_ProgramUniformMatrix4x3fvEXT(@program, @location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformui64NV")]
        static extern void Native_ProgramUniformui64NV(uint @program, int @location, ulong @value);

        public void ProgramUniformui64NV(uint @program, int @location, ulong @value) {
            Native_ProgramUniformui64NV(@program, @location, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramUniformui64vNV")]
        static extern void Native_ProgramUniformui64vNV(uint @program, int @location, int @count, ulong* @value);

        public void ProgramUniformui64vNV(uint @program, int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_ProgramUniformui64vNV(@program, @location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProgramVertexLimitNV")]
        static extern void Native_ProgramVertexLimitNV(uint @target, int @limit);

        public void ProgramVertexLimitNV(uint @target, int @limit) {
            Native_ProgramVertexLimitNV(@target, @limit);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProvokingVertex")]
        static extern void Native_ProvokingVertex(GlVertexProvokingMode @mode);

        public void ProvokingVertex(GlVertexProvokingMode @mode) {
            Native_ProvokingVertex(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glProvokingVertexEXT")]
        static extern void Native_ProvokingVertexEXT(GlVertexProvokingMode @mode);

        public void ProvokingVertexEXT(GlVertexProvokingMode @mode) {
            Native_ProvokingVertexEXT(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPushAttrib")]
        static extern void Native_PushAttrib(GlAttribMask @mask);

        public void PushAttrib(GlAttribMask @mask) {
            Native_PushAttrib(@mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPushClientAttrib")]
        static extern void Native_PushClientAttrib(GlClientAttribMask @mask);

        public void PushClientAttrib(GlClientAttribMask @mask) {
            Native_PushClientAttrib(@mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPushClientAttribDefaultEXT")]
        static extern void Native_PushClientAttribDefaultEXT(GlClientAttribMask @mask);

        public void PushClientAttribDefaultEXT(GlClientAttribMask @mask) {
            Native_PushClientAttribDefaultEXT(@mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPushDebugGroup")]
        static extern void Native_PushDebugGroup(GlDebugSource @source, uint @id, int @length, byte* @message);

        public void PushDebugGroup(GlDebugSource @source, uint @id, int @length, byte[] @message) {
            fixed (byte *ptr_message = @message) {
                Native_PushDebugGroup(@source, @id, @length, @ptr_message);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPushDebugGroupKHR")]
        static extern void Native_PushDebugGroupKHR(GlDebugSource @source, uint @id, int @length, byte* @message);

        public void PushDebugGroupKHR(GlDebugSource @source, uint @id, int @length, byte[] @message) {
            fixed (byte *ptr_message = @message) {
                Native_PushDebugGroupKHR(@source, @id, @length, @ptr_message);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPushGroupMarkerEXT")]
        static extern void Native_PushGroupMarkerEXT(int @length, byte* @marker);

        public void PushGroupMarkerEXT(int @length, byte[] @marker) {
            fixed (byte *ptr_marker = @marker) {
                Native_PushGroupMarkerEXT(@length, @ptr_marker);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPushMatrix")]
        static extern void Native_PushMatrix();

        public void PushMatrix() {
            Native_PushMatrix();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glPushName")]
        static extern void Native_PushName(uint @name);

        public void PushName(uint @name) {
            Native_PushName(@name);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glQueryCounter")]
        static extern void Native_QueryCounter(uint @id, GlQueryTarget @target);

        public void QueryCounter(uint @id, GlQueryTarget @target) {
            Native_QueryCounter(@id, @target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glQueryCounterEXT")]
        static extern void Native_QueryCounterEXT(uint @id, GlQueryTarget @target);

        public void QueryCounterEXT(uint @id, GlQueryTarget @target) {
            Native_QueryCounterEXT(@id, @target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glQueryMatrixxOES")]
        static extern uint Native_QueryMatrixxOES(int* @mantissa, int* @exponent);

        public uint QueryMatrixxOES(int[] @mantissa, int[] @exponent) {
            fixed (int *ptr_mantissa = @mantissa) {
                fixed (int *ptr_exponent = @exponent) {
                    return Native_QueryMatrixxOES(@ptr_mantissa, @ptr_exponent);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glQueryObjectParameteruiAMD")]
        static extern void Native_QueryObjectParameteruiAMD(GlQueryTarget @target, uint @id, uint @pname, GlOcclusionQueryEventMaskAMD @param);

        public void QueryObjectParameteruiAMD(GlQueryTarget @target, uint @id, uint @pname, GlOcclusionQueryEventMaskAMD @param) {
            Native_QueryObjectParameteruiAMD(@target, @id, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glQueryResourceNV")]
        static extern int Native_QueryResourceNV(uint @queryType, int @tagId, uint @bufSize, int* @buffer);

        public int QueryResourceNV(uint @queryType, int @tagId, uint @bufSize, int[] @buffer) {
            fixed (int *ptr_buffer = @buffer) {
                return Native_QueryResourceNV(@queryType, @tagId, @bufSize, @ptr_buffer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glQueryResourceTagNV")]
        static extern void Native_QueryResourceTagNV(int @tagId, byte* @tagString);

        public void QueryResourceTagNV(int @tagId, byte[] @tagString) {
            fixed (byte *ptr_tagString = @tagString) {
                Native_QueryResourceTagNV(@tagId, @ptr_tagString);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos2d")]
        static extern void Native_RasterPos2d(double @x, double @y);

        public void RasterPos2d(double @x, double @y) {
            Native_RasterPos2d(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos2dv")]
        static extern void Native_RasterPos2dv(double* @v);

        public void RasterPos2dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_RasterPos2dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos2f")]
        static extern void Native_RasterPos2f(float @x, float @y);

        public void RasterPos2f(float @x, float @y) {
            Native_RasterPos2f(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos2fv")]
        static extern void Native_RasterPos2fv(float* @v);

        public void RasterPos2fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_RasterPos2fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos2i")]
        static extern void Native_RasterPos2i(int @x, int @y);

        public void RasterPos2i(int @x, int @y) {
            Native_RasterPos2i(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos2iv")]
        static extern void Native_RasterPos2iv(int* @v);

        public void RasterPos2iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_RasterPos2iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos2s")]
        static extern void Native_RasterPos2s(short @x, short @y);

        public void RasterPos2s(short @x, short @y) {
            Native_RasterPos2s(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos2sv")]
        static extern void Native_RasterPos2sv(short* @v);

        public void RasterPos2sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_RasterPos2sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos2xOES")]
        static extern void Native_RasterPos2xOES(int @x, int @y);

        public void RasterPos2xOES(int @x, int @y) {
            Native_RasterPos2xOES(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos2xvOES")]
        static extern void Native_RasterPos2xvOES(int* @coords);

        public void RasterPos2xvOES(int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_RasterPos2xvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos3d")]
        static extern void Native_RasterPos3d(double @x, double @y, double @z);

        public void RasterPos3d(double @x, double @y, double @z) {
            Native_RasterPos3d(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos3dv")]
        static extern void Native_RasterPos3dv(double* @v);

        public void RasterPos3dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_RasterPos3dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos3f")]
        static extern void Native_RasterPos3f(float @x, float @y, float @z);

        public void RasterPos3f(float @x, float @y, float @z) {
            Native_RasterPos3f(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos3fv")]
        static extern void Native_RasterPos3fv(float* @v);

        public void RasterPos3fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_RasterPos3fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos3i")]
        static extern void Native_RasterPos3i(int @x, int @y, int @z);

        public void RasterPos3i(int @x, int @y, int @z) {
            Native_RasterPos3i(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos3iv")]
        static extern void Native_RasterPos3iv(int* @v);

        public void RasterPos3iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_RasterPos3iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos3s")]
        static extern void Native_RasterPos3s(short @x, short @y, short @z);

        public void RasterPos3s(short @x, short @y, short @z) {
            Native_RasterPos3s(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos3sv")]
        static extern void Native_RasterPos3sv(short* @v);

        public void RasterPos3sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_RasterPos3sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos3xOES")]
        static extern void Native_RasterPos3xOES(int @x, int @y, int @z);

        public void RasterPos3xOES(int @x, int @y, int @z) {
            Native_RasterPos3xOES(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos3xvOES")]
        static extern void Native_RasterPos3xvOES(int* @coords);

        public void RasterPos3xvOES(int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_RasterPos3xvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos4d")]
        static extern void Native_RasterPos4d(double @x, double @y, double @z, double @w);

        public void RasterPos4d(double @x, double @y, double @z, double @w) {
            Native_RasterPos4d(@x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos4dv")]
        static extern void Native_RasterPos4dv(double* @v);

        public void RasterPos4dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_RasterPos4dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos4f")]
        static extern void Native_RasterPos4f(float @x, float @y, float @z, float @w);

        public void RasterPos4f(float @x, float @y, float @z, float @w) {
            Native_RasterPos4f(@x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos4fv")]
        static extern void Native_RasterPos4fv(float* @v);

        public void RasterPos4fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_RasterPos4fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos4i")]
        static extern void Native_RasterPos4i(int @x, int @y, int @z, int @w);

        public void RasterPos4i(int @x, int @y, int @z, int @w) {
            Native_RasterPos4i(@x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos4iv")]
        static extern void Native_RasterPos4iv(int* @v);

        public void RasterPos4iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_RasterPos4iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos4s")]
        static extern void Native_RasterPos4s(short @x, short @y, short @z, short @w);

        public void RasterPos4s(short @x, short @y, short @z, short @w) {
            Native_RasterPos4s(@x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos4sv")]
        static extern void Native_RasterPos4sv(short* @v);

        public void RasterPos4sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_RasterPos4sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos4xOES")]
        static extern void Native_RasterPos4xOES(int @x, int @y, int @z, int @w);

        public void RasterPos4xOES(int @x, int @y, int @z, int @w) {
            Native_RasterPos4xOES(@x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterPos4xvOES")]
        static extern void Native_RasterPos4xvOES(int* @coords);

        public void RasterPos4xvOES(int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_RasterPos4xvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRasterSamplesEXT")]
        static extern void Native_RasterSamplesEXT(uint @samples, bool @fixedsamplelocations);

        public void RasterSamplesEXT(uint @samples, bool @fixedsamplelocations) {
            Native_RasterSamplesEXT(@samples, @fixedsamplelocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReadBuffer")]
        static extern void Native_ReadBuffer(GlReadBufferMode @src);

        public void ReadBuffer(GlReadBufferMode @src) {
            Native_ReadBuffer(@src);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReadBufferIndexedEXT")]
        static extern void Native_ReadBufferIndexedEXT(GlReadBufferMode @src, int @index);

        public void ReadBufferIndexedEXT(GlReadBufferMode @src, int @index) {
            Native_ReadBufferIndexedEXT(@src, @index);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReadBufferNV")]
        static extern void Native_ReadBufferNV(uint @mode);

        public void ReadBufferNV(uint @mode) {
            Native_ReadBufferNV(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReadInstrumentsSGIX")]
        static extern void Native_ReadInstrumentsSGIX(int @marker);

        public void ReadInstrumentsSGIX(int @marker) {
            Native_ReadInstrumentsSGIX(@marker);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReadPixels")]
        static extern void Native_ReadPixels(int @x, int @y, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void ReadPixels(int @x, int @y, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_ReadPixels(@x, @y, @width, @height, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReadnPixels")]
        static extern void Native_ReadnPixels(int @x, int @y, int @width, int @height, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @data);

        public void ReadnPixels(int @x, int @y, int @width, int @height, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ReadnPixels(@x, @y, @width, @height, @format, @type, @bufSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReadnPixelsARB")]
        static extern void Native_ReadnPixelsARB(int @x, int @y, int @width, int @height, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @data);

        public void ReadnPixelsARB(int @x, int @y, int @width, int @height, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ReadnPixelsARB(@x, @y, @width, @height, @format, @type, @bufSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReadnPixelsEXT")]
        static extern void Native_ReadnPixelsEXT(int @x, int @y, int @width, int @height, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @data);

        public void ReadnPixelsEXT(int @x, int @y, int @width, int @height, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ReadnPixelsEXT(@x, @y, @width, @height, @format, @type, @bufSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReadnPixelsKHR")]
        static extern void Native_ReadnPixelsKHR(int @x, int @y, int @width, int @height, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte* @data);

        public void ReadnPixelsKHR(int @x, int @y, int @width, int @height, GlPixelFormat @format, GlPixelType @type, int @bufSize, byte[] @data) {
            fixed (byte *ptr_data = @data) {
                Native_ReadnPixelsKHR(@x, @y, @width, @height, @format, @type, @bufSize, @ptr_data);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReleaseKeyedMutexWin32EXT")]
        static extern bool Native_ReleaseKeyedMutexWin32EXT(uint @memory, ulong @key);

        public bool ReleaseKeyedMutexWin32EXT(uint @memory, ulong @key) {
            return Native_ReleaseKeyedMutexWin32EXT(@memory, @key);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRectd")]
        static extern void Native_Rectd(double @x1, double @y1, double @x2, double @y2);

        public void Rectd(double @x1, double @y1, double @x2, double @y2) {
            Native_Rectd(@x1, @y1, @x2, @y2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRectdv")]
        static extern void Native_Rectdv(double* @v1, double* @v2);

        public void Rectdv(double[] @v1, double[] @v2) {
            fixed (double *ptr_v1 = @v1) {
                fixed (double *ptr_v2 = @v2) {
                    Native_Rectdv(@ptr_v1, @ptr_v2);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRectf")]
        static extern void Native_Rectf(float @x1, float @y1, float @x2, float @y2);

        public void Rectf(float @x1, float @y1, float @x2, float @y2) {
            Native_Rectf(@x1, @y1, @x2, @y2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRectfv")]
        static extern void Native_Rectfv(float* @v1, float* @v2);

        public void Rectfv(float[] @v1, float[] @v2) {
            fixed (float *ptr_v1 = @v1) {
                fixed (float *ptr_v2 = @v2) {
                    Native_Rectfv(@ptr_v1, @ptr_v2);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRecti")]
        static extern void Native_Recti(int @x1, int @y1, int @x2, int @y2);

        public void Recti(int @x1, int @y1, int @x2, int @y2) {
            Native_Recti(@x1, @y1, @x2, @y2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRectiv")]
        static extern void Native_Rectiv(int* @v1, int* @v2);

        public void Rectiv(int[] @v1, int[] @v2) {
            fixed (int *ptr_v1 = @v1) {
                fixed (int *ptr_v2 = @v2) {
                    Native_Rectiv(@ptr_v1, @ptr_v2);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRects")]
        static extern void Native_Rects(short @x1, short @y1, short @x2, short @y2);

        public void Rects(short @x1, short @y1, short @x2, short @y2) {
            Native_Rects(@x1, @y1, @x2, @y2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRectsv")]
        static extern void Native_Rectsv(short* @v1, short* @v2);

        public void Rectsv(short[] @v1, short[] @v2) {
            fixed (short *ptr_v1 = @v1) {
                fixed (short *ptr_v2 = @v2) {
                    Native_Rectsv(@ptr_v1, @ptr_v2);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRectxOES")]
        static extern void Native_RectxOES(int @x1, int @y1, int @x2, int @y2);

        public void RectxOES(int @x1, int @y1, int @x2, int @y2) {
            Native_RectxOES(@x1, @y1, @x2, @y2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRectxvOES")]
        static extern void Native_RectxvOES(int* @v1, int* @v2);

        public void RectxvOES(int[] @v1, int[] @v2) {
            fixed (int *ptr_v1 = @v1) {
                fixed (int *ptr_v2 = @v2) {
                    Native_RectxvOES(@ptr_v1, @ptr_v2);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReferencePlaneSGIX")]
        static extern void Native_ReferencePlaneSGIX(double* @equation);

        public void ReferencePlaneSGIX(double[] @equation) {
            fixed (double *ptr_equation = @equation) {
                Native_ReferencePlaneSGIX(@ptr_equation);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReleaseShaderCompiler")]
        static extern void Native_ReleaseShaderCompiler();

        public void ReleaseShaderCompiler() {
            Native_ReleaseShaderCompiler();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRenderGpuMaskNV")]
        static extern void Native_RenderGpuMaskNV(uint @mask);

        public void RenderGpuMaskNV(uint @mask) {
            Native_RenderGpuMaskNV(@mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRenderMode")]
        static extern int Native_RenderMode(GlRenderingMode @mode);

        public int RenderMode(GlRenderingMode @mode) {
            return Native_RenderMode(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRenderbufferStorage")]
        static extern void Native_RenderbufferStorage(GlRenderbufferTarget @target, GlInternalFormat @internalformat, int @width, int @height);

        public void RenderbufferStorage(GlRenderbufferTarget @target, GlInternalFormat @internalformat, int @width, int @height) {
            Native_RenderbufferStorage(@target, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRenderbufferStorageEXT")]
        static extern void Native_RenderbufferStorageEXT(GlRenderbufferTarget @target, GlInternalFormat @internalformat, int @width, int @height);

        public void RenderbufferStorageEXT(GlRenderbufferTarget @target, GlInternalFormat @internalformat, int @width, int @height) {
            Native_RenderbufferStorageEXT(@target, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRenderbufferStorageMultisample")]
        static extern void Native_RenderbufferStorageMultisample(GlRenderbufferTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height);

        public void RenderbufferStorageMultisample(GlRenderbufferTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height) {
            Native_RenderbufferStorageMultisample(@target, @samples, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRenderbufferStorageMultisampleANGLE")]
        static extern void Native_RenderbufferStorageMultisampleANGLE(GlRenderbufferTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height);

        public void RenderbufferStorageMultisampleANGLE(GlRenderbufferTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height) {
            Native_RenderbufferStorageMultisampleANGLE(@target, @samples, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRenderbufferStorageMultisampleAPPLE")]
        static extern void Native_RenderbufferStorageMultisampleAPPLE(GlRenderbufferTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height);

        public void RenderbufferStorageMultisampleAPPLE(GlRenderbufferTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height) {
            Native_RenderbufferStorageMultisampleAPPLE(@target, @samples, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRenderbufferStorageMultisampleCoverageNV")]
        static extern void Native_RenderbufferStorageMultisampleCoverageNV(GlRenderbufferTarget @target, int @coverageSamples, int @colorSamples, GlInternalFormat @internalformat, int @width, int @height);

        public void RenderbufferStorageMultisampleCoverageNV(GlRenderbufferTarget @target, int @coverageSamples, int @colorSamples, GlInternalFormat @internalformat, int @width, int @height) {
            Native_RenderbufferStorageMultisampleCoverageNV(@target, @coverageSamples, @colorSamples, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRenderbufferStorageMultisampleEXT")]
        static extern void Native_RenderbufferStorageMultisampleEXT(GlRenderbufferTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height);

        public void RenderbufferStorageMultisampleEXT(GlRenderbufferTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height) {
            Native_RenderbufferStorageMultisampleEXT(@target, @samples, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRenderbufferStorageMultisampleIMG")]
        static extern void Native_RenderbufferStorageMultisampleIMG(GlRenderbufferTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height);

        public void RenderbufferStorageMultisampleIMG(GlRenderbufferTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height) {
            Native_RenderbufferStorageMultisampleIMG(@target, @samples, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRenderbufferStorageMultisampleNV")]
        static extern void Native_RenderbufferStorageMultisampleNV(GlRenderbufferTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height);

        public void RenderbufferStorageMultisampleNV(GlRenderbufferTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height) {
            Native_RenderbufferStorageMultisampleNV(@target, @samples, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRenderbufferStorageOES")]
        static extern void Native_RenderbufferStorageOES(GlRenderbufferTarget @target, GlInternalFormat @internalformat, int @width, int @height);

        public void RenderbufferStorageOES(GlRenderbufferTarget @target, GlInternalFormat @internalformat, int @width, int @height) {
            Native_RenderbufferStorageOES(@target, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodePointerSUN")]
        static extern void Native_ReplacementCodePointerSUN(uint @type, int @stride, byte** @pointer);

        public void ReplacementCodePointerSUN(uint @type, int @stride, byte[][] @pointer) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_ReplacementCodePointerSUN(@type, @stride, (byte **) ptr_pointer.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeubSUN")]
        static extern void Native_ReplacementCodeubSUN(byte @code);

        public void ReplacementCodeubSUN(byte @code) {
            Native_ReplacementCodeubSUN(@code);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeubvSUN")]
        static extern void Native_ReplacementCodeubvSUN(byte* @code);

        public void ReplacementCodeubvSUN(byte[] @code) {
            fixed (byte *ptr_code = @code) {
                Native_ReplacementCodeubvSUN(@ptr_code);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiColor3fVertex3fSUN")]
        static extern void Native_ReplacementCodeuiColor3fVertex3fSUN(uint @rc, float @r, float @g, float @b, float @x, float @y, float @z);

        public void ReplacementCodeuiColor3fVertex3fSUN(uint @rc, float @r, float @g, float @b, float @x, float @y, float @z) {
            Native_ReplacementCodeuiColor3fVertex3fSUN(@rc, @r, @g, @b, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN")]
        static extern void Native_ReplacementCodeuiColor3fVertex3fvSUN(uint* @rc, float* @c, float* @v);

        public void ReplacementCodeuiColor3fVertex3fvSUN(uint[] @rc, float[] @c, float[] @v) {
            fixed (uint *ptr_rc = @rc) {
                fixed (float *ptr_c = @c) {
                    fixed (float *ptr_v = @v) {
                        Native_ReplacementCodeuiColor3fVertex3fvSUN(@ptr_rc, @ptr_c, @ptr_v);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fSUN")]
        static extern void Native_ReplacementCodeuiColor4fNormal3fVertex3fSUN(uint @rc, float @r, float @g, float @b, float @a, float @nx, float @ny, float @nz, float @x, float @y, float @z);

        public void ReplacementCodeuiColor4fNormal3fVertex3fSUN(uint @rc, float @r, float @g, float @b, float @a, float @nx, float @ny, float @nz, float @x, float @y, float @z) {
            Native_ReplacementCodeuiColor4fNormal3fVertex3fSUN(@rc, @r, @g, @b, @a, @nx, @ny, @nz, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN")]
        static extern void Native_ReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* @rc, float* @c, float* @n, float* @v);

        public void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint[] @rc, float[] @c, float[] @n, float[] @v) {
            fixed (uint *ptr_rc = @rc) {
                fixed (float *ptr_c = @c) {
                    fixed (float *ptr_n = @n) {
                        fixed (float *ptr_v = @v) {
                            Native_ReplacementCodeuiColor4fNormal3fVertex3fvSUN(@ptr_rc, @ptr_c, @ptr_n, @ptr_v);
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiColor4ubVertex3fSUN")]
        static extern void Native_ReplacementCodeuiColor4ubVertex3fSUN(uint @rc, byte @r, byte @g, byte @b, byte @a, float @x, float @y, float @z);

        public void ReplacementCodeuiColor4ubVertex3fSUN(uint @rc, byte @r, byte @g, byte @b, byte @a, float @x, float @y, float @z) {
            Native_ReplacementCodeuiColor4ubVertex3fSUN(@rc, @r, @g, @b, @a, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN")]
        static extern void Native_ReplacementCodeuiColor4ubVertex3fvSUN(uint* @rc, byte* @c, float* @v);

        public void ReplacementCodeuiColor4ubVertex3fvSUN(uint[] @rc, byte[] @c, float[] @v) {
            fixed (uint *ptr_rc = @rc) {
                fixed (byte *ptr_c = @c) {
                    fixed (float *ptr_v = @v) {
                        Native_ReplacementCodeuiColor4ubVertex3fvSUN(@ptr_rc, @ptr_c, @ptr_v);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiNormal3fVertex3fSUN")]
        static extern void Native_ReplacementCodeuiNormal3fVertex3fSUN(uint @rc, float @nx, float @ny, float @nz, float @x, float @y, float @z);

        public void ReplacementCodeuiNormal3fVertex3fSUN(uint @rc, float @nx, float @ny, float @nz, float @x, float @y, float @z) {
            Native_ReplacementCodeuiNormal3fVertex3fSUN(@rc, @nx, @ny, @nz, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN")]
        static extern void Native_ReplacementCodeuiNormal3fVertex3fvSUN(uint* @rc, float* @n, float* @v);

        public void ReplacementCodeuiNormal3fVertex3fvSUN(uint[] @rc, float[] @n, float[] @v) {
            fixed (uint *ptr_rc = @rc) {
                fixed (float *ptr_n = @n) {
                    fixed (float *ptr_v = @v) {
                        Native_ReplacementCodeuiNormal3fVertex3fvSUN(@ptr_rc, @ptr_n, @ptr_v);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiSUN")]
        static extern void Native_ReplacementCodeuiSUN(uint @code);

        public void ReplacementCodeuiSUN(uint @code) {
            Native_ReplacementCodeuiSUN(@code);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN")]
        static extern void Native_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint @rc, float @s, float @t, float @r, float @g, float @b, float @a, float @nx, float @ny, float @nz, float @x, float @y, float @z);

        public void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint @rc, float @s, float @t, float @r, float @g, float @b, float @a, float @nx, float @ny, float @nz, float @x, float @y, float @z) {
            Native_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(@rc, @s, @t, @r, @g, @b, @a, @nx, @ny, @nz, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")]
        static extern void Native_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* @rc, float* @tc, float* @c, float* @n, float* @v);

        public void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] @rc, float[] @tc, float[] @c, float[] @n, float[] @v) {
            fixed (uint *ptr_rc = @rc) {
                fixed (float *ptr_tc = @tc) {
                    fixed (float *ptr_c = @c) {
                        fixed (float *ptr_n = @n) {
                            fixed (float *ptr_v = @v) {
                                Native_ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(@ptr_rc, @ptr_tc, @ptr_c, @ptr_n, @ptr_v);
                            }
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN")]
        static extern void Native_ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint @rc, float @s, float @t, float @nx, float @ny, float @nz, float @x, float @y, float @z);

        public void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint @rc, float @s, float @t, float @nx, float @ny, float @nz, float @x, float @y, float @z) {
            Native_ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(@rc, @s, @t, @nx, @ny, @nz, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")]
        static extern void Native_ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* @rc, float* @tc, float* @n, float* @v);

        public void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint[] @rc, float[] @tc, float[] @n, float[] @v) {
            fixed (uint *ptr_rc = @rc) {
                fixed (float *ptr_tc = @tc) {
                    fixed (float *ptr_n = @n) {
                        fixed (float *ptr_v = @v) {
                            Native_ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(@ptr_rc, @ptr_tc, @ptr_n, @ptr_v);
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fSUN")]
        static extern void Native_ReplacementCodeuiTexCoord2fVertex3fSUN(uint @rc, float @s, float @t, float @x, float @y, float @z);

        public void ReplacementCodeuiTexCoord2fVertex3fSUN(uint @rc, float @s, float @t, float @x, float @y, float @z) {
            Native_ReplacementCodeuiTexCoord2fVertex3fSUN(@rc, @s, @t, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN")]
        static extern void Native_ReplacementCodeuiTexCoord2fVertex3fvSUN(uint* @rc, float* @tc, float* @v);

        public void ReplacementCodeuiTexCoord2fVertex3fvSUN(uint[] @rc, float[] @tc, float[] @v) {
            fixed (uint *ptr_rc = @rc) {
                fixed (float *ptr_tc = @tc) {
                    fixed (float *ptr_v = @v) {
                        Native_ReplacementCodeuiTexCoord2fVertex3fvSUN(@ptr_rc, @ptr_tc, @ptr_v);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiVertex3fSUN")]
        static extern void Native_ReplacementCodeuiVertex3fSUN(uint @rc, float @x, float @y, float @z);

        public void ReplacementCodeuiVertex3fSUN(uint @rc, float @x, float @y, float @z) {
            Native_ReplacementCodeuiVertex3fSUN(@rc, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuiVertex3fvSUN")]
        static extern void Native_ReplacementCodeuiVertex3fvSUN(uint* @rc, float* @v);

        public void ReplacementCodeuiVertex3fvSUN(uint[] @rc, float[] @v) {
            fixed (uint *ptr_rc = @rc) {
                fixed (float *ptr_v = @v) {
                    Native_ReplacementCodeuiVertex3fvSUN(@ptr_rc, @ptr_v);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeuivSUN")]
        static extern void Native_ReplacementCodeuivSUN(uint* @code);

        public void ReplacementCodeuivSUN(uint[] @code) {
            fixed (uint *ptr_code = @code) {
                Native_ReplacementCodeuivSUN(@ptr_code);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeusSUN")]
        static extern void Native_ReplacementCodeusSUN(ushort @code);

        public void ReplacementCodeusSUN(ushort @code) {
            Native_ReplacementCodeusSUN(@code);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glReplacementCodeusvSUN")]
        static extern void Native_ReplacementCodeusvSUN(ushort* @code);

        public void ReplacementCodeusvSUN(ushort[] @code) {
            fixed (ushort *ptr_code = @code) {
                Native_ReplacementCodeusvSUN(@ptr_code);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRequestResidentProgramsNV")]
        static extern void Native_RequestResidentProgramsNV(int @n, uint* @programs);

        public void RequestResidentProgramsNV(int @n, uint[] @programs) {
            fixed (uint *ptr_programs = @programs) {
                Native_RequestResidentProgramsNV(@n, @ptr_programs);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glResetHistogram")]
        static extern void Native_ResetHistogram(GlHistogramTargetEXT @target);

        public void ResetHistogram(GlHistogramTargetEXT @target) {
            Native_ResetHistogram(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glResetHistogramEXT")]
        static extern void Native_ResetHistogramEXT(GlHistogramTargetEXT @target);

        public void ResetHistogramEXT(GlHistogramTargetEXT @target) {
            Native_ResetHistogramEXT(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glResetMinmax")]
        static extern void Native_ResetMinmax(GlMinmaxTargetEXT @target);

        public void ResetMinmax(GlMinmaxTargetEXT @target) {
            Native_ResetMinmax(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glResetMinmaxEXT")]
        static extern void Native_ResetMinmaxEXT(GlMinmaxTargetEXT @target);

        public void ResetMinmaxEXT(GlMinmaxTargetEXT @target) {
            Native_ResetMinmaxEXT(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glResizeBuffersMESA")]
        static extern void Native_ResizeBuffersMESA();

        public void ResizeBuffersMESA() {
            Native_ResizeBuffersMESA();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glResolveDepthValuesNV")]
        static extern void Native_ResolveDepthValuesNV();

        public void ResolveDepthValuesNV() {
            Native_ResolveDepthValuesNV();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glResolveMultisampleFramebufferAPPLE")]
        static extern void Native_ResolveMultisampleFramebufferAPPLE();

        public void ResolveMultisampleFramebufferAPPLE() {
            Native_ResolveMultisampleFramebufferAPPLE();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glResumeTransformFeedback")]
        static extern void Native_ResumeTransformFeedback();

        public void ResumeTransformFeedback() {
            Native_ResumeTransformFeedback();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glResumeTransformFeedbackNV")]
        static extern void Native_ResumeTransformFeedbackNV();

        public void ResumeTransformFeedbackNV() {
            Native_ResumeTransformFeedbackNV();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRotated")]
        static extern void Native_Rotated(double @angle, double @x, double @y, double @z);

        public void Rotated(double @angle, double @x, double @y, double @z) {
            Native_Rotated(@angle, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRotatef")]
        static extern void Native_Rotatef(float @angle, float @x, float @y, float @z);

        public void Rotatef(float @angle, float @x, float @y, float @z) {
            Native_Rotatef(@angle, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRotatex")]
        static extern void Native_Rotatex(int @angle, int @x, int @y, int @z);

        public void Rotatex(int @angle, int @x, int @y, int @z) {
            Native_Rotatex(@angle, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glRotatexOES")]
        static extern void Native_RotatexOES(int @angle, int @x, int @y, int @z);

        public void RotatexOES(int @angle, int @x, int @y, int @z) {
            Native_RotatexOES(@angle, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSampleCoverage")]
        static extern void Native_SampleCoverage(float @value, GlBoolean @invert);

        public void SampleCoverage(float @value, GlBoolean @invert) {
            Native_SampleCoverage(@value, @invert);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSampleCoverageARB")]
        static extern void Native_SampleCoverageARB(float @value, GlBoolean @invert);

        public void SampleCoverageARB(float @value, GlBoolean @invert) {
            Native_SampleCoverageARB(@value, @invert);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSampleCoveragex")]
        static extern void Native_SampleCoveragex(int @value, bool @invert);

        public void SampleCoveragex(int @value, bool @invert) {
            Native_SampleCoveragex(@value, @invert);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSampleCoveragexOES")]
        static extern void Native_SampleCoveragexOES(int @value, bool @invert);

        public void SampleCoveragexOES(int @value, bool @invert) {
            Native_SampleCoveragexOES(@value, @invert);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSampleMapATI")]
        static extern void Native_SampleMapATI(uint @dst, uint @interp, uint @swizzle);

        public void SampleMapATI(uint @dst, uint @interp, uint @swizzle) {
            Native_SampleMapATI(@dst, @interp, @swizzle);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSampleMaskEXT")]
        static extern void Native_SampleMaskEXT(float @value, GlBoolean @invert);

        public void SampleMaskEXT(float @value, GlBoolean @invert) {
            Native_SampleMaskEXT(@value, @invert);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSampleMaskIndexedNV")]
        static extern void Native_SampleMaskIndexedNV(uint @index, uint @mask);

        public void SampleMaskIndexedNV(uint @index, uint @mask) {
            Native_SampleMaskIndexedNV(@index, @mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSampleMaskSGIS")]
        static extern void Native_SampleMaskSGIS(float @value, GlBoolean @invert);

        public void SampleMaskSGIS(float @value, GlBoolean @invert) {
            Native_SampleMaskSGIS(@value, @invert);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSampleMaski")]
        static extern void Native_SampleMaski(uint @maskNumber, uint @mask);

        public void SampleMaski(uint @maskNumber, uint @mask) {
            Native_SampleMaski(@maskNumber, @mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSamplePatternEXT")]
        static extern void Native_SamplePatternEXT(uint @pattern);

        public void SamplePatternEXT(uint @pattern) {
            Native_SamplePatternEXT(@pattern);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSamplePatternSGIS")]
        static extern void Native_SamplePatternSGIS(GlSamplePatternSGIS @pattern);

        public void SamplePatternSGIS(GlSamplePatternSGIS @pattern) {
            Native_SamplePatternSGIS(@pattern);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSamplerParameterIiv")]
        static extern void Native_SamplerParameterIiv(uint @sampler, GlSamplerParameterName @pname, int* @param);

        public void SamplerParameterIiv(uint @sampler, GlSamplerParameterName @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_SamplerParameterIiv(@sampler, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSamplerParameterIivEXT")]
        static extern void Native_SamplerParameterIivEXT(uint @sampler, GlSamplerParameterName @pname, int* @param);

        public void SamplerParameterIivEXT(uint @sampler, GlSamplerParameterName @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_SamplerParameterIivEXT(@sampler, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSamplerParameterIivOES")]
        static extern void Native_SamplerParameterIivOES(uint @sampler, GlSamplerParameterName @pname, int* @param);

        public void SamplerParameterIivOES(uint @sampler, GlSamplerParameterName @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_SamplerParameterIivOES(@sampler, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSamplerParameterIuiv")]
        static extern void Native_SamplerParameterIuiv(uint @sampler, GlSamplerParameterName @pname, uint* @param);

        public void SamplerParameterIuiv(uint @sampler, GlSamplerParameterName @pname, uint[] @param) {
            fixed (uint *ptr_param = @param) {
                Native_SamplerParameterIuiv(@sampler, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSamplerParameterIuivEXT")]
        static extern void Native_SamplerParameterIuivEXT(uint @sampler, GlSamplerParameterName @pname, uint* @param);

        public void SamplerParameterIuivEXT(uint @sampler, GlSamplerParameterName @pname, uint[] @param) {
            fixed (uint *ptr_param = @param) {
                Native_SamplerParameterIuivEXT(@sampler, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSamplerParameterIuivOES")]
        static extern void Native_SamplerParameterIuivOES(uint @sampler, GlSamplerParameterName @pname, uint* @param);

        public void SamplerParameterIuivOES(uint @sampler, GlSamplerParameterName @pname, uint[] @param) {
            fixed (uint *ptr_param = @param) {
                Native_SamplerParameterIuivOES(@sampler, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSamplerParameterf")]
        static extern void Native_SamplerParameterf(uint @sampler, GlSamplerParameterName @pname, float @param);

        public void SamplerParameterf(uint @sampler, GlSamplerParameterName @pname, float @param) {
            Native_SamplerParameterf(@sampler, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSamplerParameterfv")]
        static extern void Native_SamplerParameterfv(uint @sampler, GlSamplerParameterName @pname, float* @param);

        public void SamplerParameterfv(uint @sampler, GlSamplerParameterName @pname, float[] @param) {
            fixed (float *ptr_param = @param) {
                Native_SamplerParameterfv(@sampler, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSamplerParameteri")]
        static extern void Native_SamplerParameteri(uint @sampler, GlSamplerParameterName @pname, int @param);

        public void SamplerParameteri(uint @sampler, GlSamplerParameterName @pname, int @param) {
            Native_SamplerParameteri(@sampler, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSamplerParameteriv")]
        static extern void Native_SamplerParameteriv(uint @sampler, GlSamplerParameterName @pname, int* @param);

        public void SamplerParameteriv(uint @sampler, GlSamplerParameterName @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_SamplerParameteriv(@sampler, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glScaled")]
        static extern void Native_Scaled(double @x, double @y, double @z);

        public void Scaled(double @x, double @y, double @z) {
            Native_Scaled(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glScalef")]
        static extern void Native_Scalef(float @x, float @y, float @z);

        public void Scalef(float @x, float @y, float @z) {
            Native_Scalef(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glScalex")]
        static extern void Native_Scalex(int @x, int @y, int @z);

        public void Scalex(int @x, int @y, int @z) {
            Native_Scalex(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glScalexOES")]
        static extern void Native_ScalexOES(int @x, int @y, int @z);

        public void ScalexOES(int @x, int @y, int @z) {
            Native_ScalexOES(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glScissor")]
        static extern void Native_Scissor(int @x, int @y, int @width, int @height);

        public void Scissor(int @x, int @y, int @width, int @height) {
            Native_Scissor(@x, @y, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glScissorArrayv")]
        static extern void Native_ScissorArrayv(uint @first, int @count, int* @v);

        public void ScissorArrayv(uint @first, int @count, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_ScissorArrayv(@first, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glScissorArrayvNV")]
        static extern void Native_ScissorArrayvNV(uint @first, int @count, int* @v);

        public void ScissorArrayvNV(uint @first, int @count, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_ScissorArrayvNV(@first, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glScissorArrayvOES")]
        static extern void Native_ScissorArrayvOES(uint @first, int @count, int* @v);

        public void ScissorArrayvOES(uint @first, int @count, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_ScissorArrayvOES(@first, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glScissorIndexed")]
        static extern void Native_ScissorIndexed(uint @index, int @left, int @bottom, int @width, int @height);

        public void ScissorIndexed(uint @index, int @left, int @bottom, int @width, int @height) {
            Native_ScissorIndexed(@index, @left, @bottom, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glScissorIndexedNV")]
        static extern void Native_ScissorIndexedNV(uint @index, int @left, int @bottom, int @width, int @height);

        public void ScissorIndexedNV(uint @index, int @left, int @bottom, int @width, int @height) {
            Native_ScissorIndexedNV(@index, @left, @bottom, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glScissorIndexedOES")]
        static extern void Native_ScissorIndexedOES(uint @index, int @left, int @bottom, int @width, int @height);

        public void ScissorIndexedOES(uint @index, int @left, int @bottom, int @width, int @height) {
            Native_ScissorIndexedOES(@index, @left, @bottom, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glScissorIndexedv")]
        static extern void Native_ScissorIndexedv(uint @index, int* @v);

        public void ScissorIndexedv(uint @index, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_ScissorIndexedv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glScissorIndexedvNV")]
        static extern void Native_ScissorIndexedvNV(uint @index, int* @v);

        public void ScissorIndexedvNV(uint @index, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_ScissorIndexedvNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glScissorIndexedvOES")]
        static extern void Native_ScissorIndexedvOES(uint @index, int* @v);

        public void ScissorIndexedvOES(uint @index, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_ScissorIndexedvOES(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3b")]
        static extern void Native_SecondaryColor3b(sbyte @red, sbyte @green, sbyte @blue);

        public void SecondaryColor3b(sbyte @red, sbyte @green, sbyte @blue) {
            Native_SecondaryColor3b(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3bEXT")]
        static extern void Native_SecondaryColor3bEXT(sbyte @red, sbyte @green, sbyte @blue);

        public void SecondaryColor3bEXT(sbyte @red, sbyte @green, sbyte @blue) {
            Native_SecondaryColor3bEXT(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3bv")]
        static extern void Native_SecondaryColor3bv(sbyte* @v);

        public void SecondaryColor3bv(sbyte[] @v) {
            fixed (sbyte *ptr_v = @v) {
                Native_SecondaryColor3bv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3bvEXT")]
        static extern void Native_SecondaryColor3bvEXT(sbyte* @v);

        public void SecondaryColor3bvEXT(sbyte[] @v) {
            fixed (sbyte *ptr_v = @v) {
                Native_SecondaryColor3bvEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3d")]
        static extern void Native_SecondaryColor3d(double @red, double @green, double @blue);

        public void SecondaryColor3d(double @red, double @green, double @blue) {
            Native_SecondaryColor3d(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3dEXT")]
        static extern void Native_SecondaryColor3dEXT(double @red, double @green, double @blue);

        public void SecondaryColor3dEXT(double @red, double @green, double @blue) {
            Native_SecondaryColor3dEXT(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3dv")]
        static extern void Native_SecondaryColor3dv(double* @v);

        public void SecondaryColor3dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_SecondaryColor3dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3dvEXT")]
        static extern void Native_SecondaryColor3dvEXT(double* @v);

        public void SecondaryColor3dvEXT(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_SecondaryColor3dvEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3f")]
        static extern void Native_SecondaryColor3f(float @red, float @green, float @blue);

        public void SecondaryColor3f(float @red, float @green, float @blue) {
            Native_SecondaryColor3f(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3fEXT")]
        static extern void Native_SecondaryColor3fEXT(float @red, float @green, float @blue);

        public void SecondaryColor3fEXT(float @red, float @green, float @blue) {
            Native_SecondaryColor3fEXT(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3fv")]
        static extern void Native_SecondaryColor3fv(float* @v);

        public void SecondaryColor3fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_SecondaryColor3fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3fvEXT")]
        static extern void Native_SecondaryColor3fvEXT(float* @v);

        public void SecondaryColor3fvEXT(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_SecondaryColor3fvEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3hNV")]
        static extern void Native_SecondaryColor3hNV(ushort @red, ushort @green, ushort @blue);

        public void SecondaryColor3hNV(ushort @red, ushort @green, ushort @blue) {
            Native_SecondaryColor3hNV(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3hvNV")]
        static extern void Native_SecondaryColor3hvNV(ushort* @v);

        public void SecondaryColor3hvNV(ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_SecondaryColor3hvNV(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3i")]
        static extern void Native_SecondaryColor3i(int @red, int @green, int @blue);

        public void SecondaryColor3i(int @red, int @green, int @blue) {
            Native_SecondaryColor3i(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3iEXT")]
        static extern void Native_SecondaryColor3iEXT(int @red, int @green, int @blue);

        public void SecondaryColor3iEXT(int @red, int @green, int @blue) {
            Native_SecondaryColor3iEXT(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3iv")]
        static extern void Native_SecondaryColor3iv(int* @v);

        public void SecondaryColor3iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_SecondaryColor3iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3ivEXT")]
        static extern void Native_SecondaryColor3ivEXT(int* @v);

        public void SecondaryColor3ivEXT(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_SecondaryColor3ivEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3s")]
        static extern void Native_SecondaryColor3s(short @red, short @green, short @blue);

        public void SecondaryColor3s(short @red, short @green, short @blue) {
            Native_SecondaryColor3s(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3sEXT")]
        static extern void Native_SecondaryColor3sEXT(short @red, short @green, short @blue);

        public void SecondaryColor3sEXT(short @red, short @green, short @blue) {
            Native_SecondaryColor3sEXT(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3sv")]
        static extern void Native_SecondaryColor3sv(short* @v);

        public void SecondaryColor3sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_SecondaryColor3sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3svEXT")]
        static extern void Native_SecondaryColor3svEXT(short* @v);

        public void SecondaryColor3svEXT(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_SecondaryColor3svEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3ub")]
        static extern void Native_SecondaryColor3ub(byte @red, byte @green, byte @blue);

        public void SecondaryColor3ub(byte @red, byte @green, byte @blue) {
            Native_SecondaryColor3ub(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3ubEXT")]
        static extern void Native_SecondaryColor3ubEXT(byte @red, byte @green, byte @blue);

        public void SecondaryColor3ubEXT(byte @red, byte @green, byte @blue) {
            Native_SecondaryColor3ubEXT(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3ubv")]
        static extern void Native_SecondaryColor3ubv(byte* @v);

        public void SecondaryColor3ubv(byte[] @v) {
            fixed (byte *ptr_v = @v) {
                Native_SecondaryColor3ubv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3ubvEXT")]
        static extern void Native_SecondaryColor3ubvEXT(byte* @v);

        public void SecondaryColor3ubvEXT(byte[] @v) {
            fixed (byte *ptr_v = @v) {
                Native_SecondaryColor3ubvEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3ui")]
        static extern void Native_SecondaryColor3ui(uint @red, uint @green, uint @blue);

        public void SecondaryColor3ui(uint @red, uint @green, uint @blue) {
            Native_SecondaryColor3ui(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3uiEXT")]
        static extern void Native_SecondaryColor3uiEXT(uint @red, uint @green, uint @blue);

        public void SecondaryColor3uiEXT(uint @red, uint @green, uint @blue) {
            Native_SecondaryColor3uiEXT(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3uiv")]
        static extern void Native_SecondaryColor3uiv(uint* @v);

        public void SecondaryColor3uiv(uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_SecondaryColor3uiv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3uivEXT")]
        static extern void Native_SecondaryColor3uivEXT(uint* @v);

        public void SecondaryColor3uivEXT(uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_SecondaryColor3uivEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3us")]
        static extern void Native_SecondaryColor3us(ushort @red, ushort @green, ushort @blue);

        public void SecondaryColor3us(ushort @red, ushort @green, ushort @blue) {
            Native_SecondaryColor3us(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3usEXT")]
        static extern void Native_SecondaryColor3usEXT(ushort @red, ushort @green, ushort @blue);

        public void SecondaryColor3usEXT(ushort @red, ushort @green, ushort @blue) {
            Native_SecondaryColor3usEXT(@red, @green, @blue);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3usv")]
        static extern void Native_SecondaryColor3usv(ushort* @v);

        public void SecondaryColor3usv(ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_SecondaryColor3usv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColor3usvEXT")]
        static extern void Native_SecondaryColor3usvEXT(ushort* @v);

        public void SecondaryColor3usvEXT(ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_SecondaryColor3usvEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColorFormatNV")]
        static extern void Native_SecondaryColorFormatNV(int @size, GlColorPointerType @type, int @stride);

        public void SecondaryColorFormatNV(int @size, GlColorPointerType @type, int @stride) {
            Native_SecondaryColorFormatNV(@size, @type, @stride);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColorP3ui")]
        static extern void Native_SecondaryColorP3ui(GlColorPointerType @type, uint @color);

        public void SecondaryColorP3ui(GlColorPointerType @type, uint @color) {
            Native_SecondaryColorP3ui(@type, @color);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColorP3uiv")]
        static extern void Native_SecondaryColorP3uiv(GlColorPointerType @type, uint* @color);

        public void SecondaryColorP3uiv(GlColorPointerType @type, uint[] @color) {
            fixed (uint *ptr_color = @color) {
                Native_SecondaryColorP3uiv(@type, @ptr_color);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColorPointer")]
        static extern void Native_SecondaryColorPointer(int @size, GlColorPointerType @type, int @stride, byte* @pointer);

        public void SecondaryColorPointer(int @size, GlColorPointerType @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_SecondaryColorPointer(@size, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColorPointerEXT")]
        static extern void Native_SecondaryColorPointerEXT(int @size, GlColorPointerType @type, int @stride, byte* @pointer);

        public void SecondaryColorPointerEXT(int @size, GlColorPointerType @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_SecondaryColorPointerEXT(@size, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSecondaryColorPointerListIBM")]
        static extern void Native_SecondaryColorPointerListIBM(int @size, uint @type, int @stride, byte** @pointer, int @ptrstride);

        public void SecondaryColorPointerListIBM(int @size, uint @type, int @stride, byte[][] @pointer, int @ptrstride) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_SecondaryColorPointerListIBM(@size, @type, @stride, (byte **) ptr_pointer.ToPointer(), @ptrstride);
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSelectBuffer")]
        static extern void Native_SelectBuffer(int @size, uint* @buffer);

        public void SelectBuffer(int @size, uint[] @buffer) {
            fixed (uint *ptr_buffer = @buffer) {
                Native_SelectBuffer(@size, @ptr_buffer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSelectPerfMonitorCountersAMD")]
        static extern void Native_SelectPerfMonitorCountersAMD(uint @monitor, GlBoolean @enable, uint @group, int @numCounters, uint* @counterList);

        public void SelectPerfMonitorCountersAMD(uint @monitor, GlBoolean @enable, uint @group, int @numCounters, uint[] @counterList) {
            fixed (uint *ptr_counterList = @counterList) {
                Native_SelectPerfMonitorCountersAMD(@monitor, @enable, @group, @numCounters, @ptr_counterList);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSemaphoreParameterui64vEXT")]
        static extern void Native_SemaphoreParameterui64vEXT(uint @semaphore, GlSemaphoreParameterName @pname, ulong* @params);

        public void SemaphoreParameterui64vEXT(uint @semaphore, GlSemaphoreParameterName @pname, ulong[] @params) {
            fixed (ulong *ptr_params = @params) {
                Native_SemaphoreParameterui64vEXT(@semaphore, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSeparableFilter2D")]
        static extern void Native_SeparableFilter2D(GlSeparableTargetEXT @target, GlInternalFormat @internalformat, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte* @row, byte* @column);

        public void SeparableFilter2D(GlSeparableTargetEXT @target, GlInternalFormat @internalformat, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte[] @row, byte[] @column) {
            fixed (byte *ptr_row = @row) {
                fixed (byte *ptr_column = @column) {
                    Native_SeparableFilter2D(@target, @internalformat, @width, @height, @format, @type, @ptr_row, @ptr_column);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSeparableFilter2DEXT")]
        static extern void Native_SeparableFilter2DEXT(GlSeparableTargetEXT @target, GlInternalFormat @internalformat, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte* @row, byte* @column);

        public void SeparableFilter2DEXT(GlSeparableTargetEXT @target, GlInternalFormat @internalformat, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte[] @row, byte[] @column) {
            fixed (byte *ptr_row = @row) {
                fixed (byte *ptr_column = @column) {
                    Native_SeparableFilter2DEXT(@target, @internalformat, @width, @height, @format, @type, @ptr_row, @ptr_column);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSetFenceAPPLE")]
        static extern void Native_SetFenceAPPLE(uint @fence);

        public void SetFenceAPPLE(uint @fence) {
            Native_SetFenceAPPLE(@fence);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSetFenceNV")]
        static extern void Native_SetFenceNV(uint @fence, uint @condition);

        public void SetFenceNV(uint @fence, uint @condition) {
            Native_SetFenceNV(@fence, @condition);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSetFragmentShaderConstantATI")]
        static extern void Native_SetFragmentShaderConstantATI(uint @dst, float* @value);

        public void SetFragmentShaderConstantATI(uint @dst, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_SetFragmentShaderConstantATI(@dst, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSetInvariantEXT")]
        static extern void Native_SetInvariantEXT(uint @id, uint @type, byte* @addr);

        public void SetInvariantEXT(uint @id, uint @type, byte[] @addr) {
            fixed (byte *ptr_addr = @addr) {
                Native_SetInvariantEXT(@id, @type, @ptr_addr);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSetLocalConstantEXT")]
        static extern void Native_SetLocalConstantEXT(uint @id, uint @type, byte* @addr);

        public void SetLocalConstantEXT(uint @id, uint @type, byte[] @addr) {
            fixed (byte *ptr_addr = @addr) {
                Native_SetLocalConstantEXT(@id, @type, @ptr_addr);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSetMultisamplefvAMD")]
        static extern void Native_SetMultisamplefvAMD(uint @pname, uint @index, float* @val);

        public void SetMultisamplefvAMD(uint @pname, uint @index, float[] @val) {
            fixed (float *ptr_val = @val) {
                Native_SetMultisamplefvAMD(@pname, @index, @ptr_val);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glShadeModel")]
        static extern void Native_ShadeModel(GlShadingModel @mode);

        public void ShadeModel(GlShadingModel @mode) {
            Native_ShadeModel(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glShaderBinary")]
        static extern void Native_ShaderBinary(int @count, uint* @shaders, uint @binaryformat, byte* @binary, int @length);

        public void ShaderBinary(int @count, uint[] @shaders, uint @binaryformat, byte[] @binary, int @length) {
            fixed (uint *ptr_shaders = @shaders) {
                fixed (byte *ptr_binary = @binary) {
                    Native_ShaderBinary(@count, @ptr_shaders, @binaryformat, @ptr_binary, @length);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glShaderOp1EXT")]
        static extern void Native_ShaderOp1EXT(uint @op, uint @res, uint @arg1);

        public void ShaderOp1EXT(uint @op, uint @res, uint @arg1) {
            Native_ShaderOp1EXT(@op, @res, @arg1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glShaderOp2EXT")]
        static extern void Native_ShaderOp2EXT(uint @op, uint @res, uint @arg1, uint @arg2);

        public void ShaderOp2EXT(uint @op, uint @res, uint @arg1, uint @arg2) {
            Native_ShaderOp2EXT(@op, @res, @arg1, @arg2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glShaderOp3EXT")]
        static extern void Native_ShaderOp3EXT(uint @op, uint @res, uint @arg1, uint @arg2, uint @arg3);

        public void ShaderOp3EXT(uint @op, uint @res, uint @arg1, uint @arg2, uint @arg3) {
            Native_ShaderOp3EXT(@op, @res, @arg1, @arg2, @arg3);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glShaderSource")]
        static extern void Native_ShaderSource(uint @shader, int @count, byte** @string, int* @length);

        public void ShaderSource(uint @shader, int @count, byte[][] @string, int[] @length) {
            IntPtr ptr_string = Marshal.AllocHGlobal(@string.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_string, @string, (void **) ptr_string.ToPointer(), 0, __fixedLocals => {
                    fixed (int *ptr_length = @length) {
                        Native_ShaderSource(@shader, @count, (byte **) ptr_string.ToPointer(), @ptr_length);
                    }
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_string);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glShaderSourceARB")]
        static extern void Native_ShaderSourceARB(IntPtr @shaderObj, int @count, byte** @string, int* @length);

        public void ShaderSourceARB(IntPtr @shaderObj, int @count, byte[][] @string, int[] @length) {
            IntPtr ptr_string = Marshal.AllocHGlobal(@string.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_string, @string, (void **) ptr_string.ToPointer(), 0, __fixedLocals => {
                    fixed (int *ptr_length = @length) {
                        Native_ShaderSourceARB(@shaderObj, @count, (byte **) ptr_string.ToPointer(), @ptr_length);
                    }
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_string);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glShaderStorageBlockBinding")]
        static extern void Native_ShaderStorageBlockBinding(uint @program, uint @storageBlockIndex, uint @storageBlockBinding);

        public void ShaderStorageBlockBinding(uint @program, uint @storageBlockIndex, uint @storageBlockBinding) {
            Native_ShaderStorageBlockBinding(@program, @storageBlockIndex, @storageBlockBinding);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSharpenTexFuncSGIS")]
        static extern void Native_SharpenTexFuncSGIS(GlTextureTarget @target, int @n, float* @points);

        public void SharpenTexFuncSGIS(GlTextureTarget @target, int @n, float[] @points) {
            fixed (float *ptr_points = @points) {
                Native_SharpenTexFuncSGIS(@target, @n, @ptr_points);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSignalSemaphoreEXT")]
        static extern void Native_SignalSemaphoreEXT(uint @semaphore, uint @numBufferBarriers, uint* @buffers, uint @numTextureBarriers, uint* @textures, GlTextureLayout* @dstLayouts);

        public void SignalSemaphoreEXT(uint @semaphore, uint @numBufferBarriers, uint[] @buffers, uint @numTextureBarriers, uint[] @textures, GlTextureLayout[] @dstLayouts) {
            fixed (uint *ptr_buffers = @buffers) {
                fixed (uint *ptr_textures = @textures) {
                    fixed (GlTextureLayout *ptr_dstLayouts = @dstLayouts) {
                        Native_SignalSemaphoreEXT(@semaphore, @numBufferBarriers, @ptr_buffers, @numTextureBarriers, @ptr_textures, @ptr_dstLayouts);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSpecializeShader")]
        static extern void Native_SpecializeShader(uint @shader, byte* @pEntryPoint, uint @numSpecializationConstants, uint* @pConstantIndex, uint* @pConstantValue);

        public void SpecializeShader(uint @shader, byte[] @pEntryPoint, uint @numSpecializationConstants, uint[] @pConstantIndex, uint[] @pConstantValue) {
            fixed (byte *ptr_pEntryPoint = @pEntryPoint) {
                fixed (uint *ptr_pConstantIndex = @pConstantIndex) {
                    fixed (uint *ptr_pConstantValue = @pConstantValue) {
                        Native_SpecializeShader(@shader, @ptr_pEntryPoint, @numSpecializationConstants, @ptr_pConstantIndex, @ptr_pConstantValue);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSpecializeShaderARB")]
        static extern void Native_SpecializeShaderARB(uint @shader, byte* @pEntryPoint, uint @numSpecializationConstants, uint* @pConstantIndex, uint* @pConstantValue);

        public void SpecializeShaderARB(uint @shader, byte[] @pEntryPoint, uint @numSpecializationConstants, uint[] @pConstantIndex, uint[] @pConstantValue) {
            fixed (byte *ptr_pEntryPoint = @pEntryPoint) {
                fixed (uint *ptr_pConstantIndex = @pConstantIndex) {
                    fixed (uint *ptr_pConstantValue = @pConstantValue) {
                        Native_SpecializeShaderARB(@shader, @ptr_pEntryPoint, @numSpecializationConstants, @ptr_pConstantIndex, @ptr_pConstantValue);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSpriteParameterfSGIX")]
        static extern void Native_SpriteParameterfSGIX(uint @pname, float @param);

        public void SpriteParameterfSGIX(uint @pname, float @param) {
            Native_SpriteParameterfSGIX(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSpriteParameterfvSGIX")]
        static extern void Native_SpriteParameterfvSGIX(uint @pname, float* @params);

        public void SpriteParameterfvSGIX(uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_SpriteParameterfvSGIX(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSpriteParameteriSGIX")]
        static extern void Native_SpriteParameteriSGIX(uint @pname, int @param);

        public void SpriteParameteriSGIX(uint @pname, int @param) {
            Native_SpriteParameteriSGIX(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSpriteParameterivSGIX")]
        static extern void Native_SpriteParameterivSGIX(uint @pname, int* @params);

        public void SpriteParameterivSGIX(uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_SpriteParameterivSGIX(@pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStartInstrumentsSGIX")]
        static extern void Native_StartInstrumentsSGIX();

        public void StartInstrumentsSGIX() {
            Native_StartInstrumentsSGIX();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStartTilingQCOM")]
        static extern void Native_StartTilingQCOM(uint @x, uint @y, uint @width, uint @height, GlBufferBitQCOM @preserveMask);

        public void StartTilingQCOM(uint @x, uint @y, uint @width, uint @height, GlBufferBitQCOM @preserveMask) {
            Native_StartTilingQCOM(@x, @y, @width, @height, @preserveMask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStateCaptureNV")]
        static extern void Native_StateCaptureNV(uint @state, uint @mode);

        public void StateCaptureNV(uint @state, uint @mode) {
            Native_StateCaptureNV(@state, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilClearTagEXT")]
        static extern void Native_StencilClearTagEXT(int @stencilTagBits, uint @stencilClearTag);

        public void StencilClearTagEXT(int @stencilTagBits, uint @stencilClearTag) {
            Native_StencilClearTagEXT(@stencilTagBits, @stencilClearTag);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilFillPathInstancedNV")]
        static extern void Native_StencilFillPathInstancedNV(int @numPaths, GlPathElementType @pathNameType, byte* @paths, uint @pathBase, GlPathFillMode @fillMode, uint @mask, GlPathTransformType @transformType, float* @transformValues);

        public void StencilFillPathInstancedNV(int @numPaths, GlPathElementType @pathNameType, byte[] @paths, uint @pathBase, GlPathFillMode @fillMode, uint @mask, GlPathTransformType @transformType, float[] @transformValues) {
            fixed (byte *ptr_paths = @paths) {
                fixed (float *ptr_transformValues = @transformValues) {
                    Native_StencilFillPathInstancedNV(@numPaths, @pathNameType, @ptr_paths, @pathBase, @fillMode, @mask, @transformType, @ptr_transformValues);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilFillPathNV")]
        static extern void Native_StencilFillPathNV(uint @path, GlPathFillMode @fillMode, uint @mask);

        public void StencilFillPathNV(uint @path, GlPathFillMode @fillMode, uint @mask) {
            Native_StencilFillPathNV(@path, @fillMode, @mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilFunc")]
        static extern void Native_StencilFunc(GlStencilFunction @func, int @ref, uint @mask);

        public void StencilFunc(GlStencilFunction @func, int @ref, uint @mask) {
            Native_StencilFunc(@func, @ref, @mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilFuncSeparate")]
        static extern void Native_StencilFuncSeparate(GlStencilFaceDirection @face, GlStencilFunction @func, int @ref, uint @mask);

        public void StencilFuncSeparate(GlStencilFaceDirection @face, GlStencilFunction @func, int @ref, uint @mask) {
            Native_StencilFuncSeparate(@face, @func, @ref, @mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilFuncSeparateATI")]
        static extern void Native_StencilFuncSeparateATI(GlStencilFunction @frontfunc, GlStencilFunction @backfunc, int @ref, uint @mask);

        public void StencilFuncSeparateATI(GlStencilFunction @frontfunc, GlStencilFunction @backfunc, int @ref, uint @mask) {
            Native_StencilFuncSeparateATI(@frontfunc, @backfunc, @ref, @mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilMask")]
        static extern void Native_StencilMask(uint @mask);

        public void StencilMask(uint @mask) {
            Native_StencilMask(@mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilMaskSeparate")]
        static extern void Native_StencilMaskSeparate(GlStencilFaceDirection @face, uint @mask);

        public void StencilMaskSeparate(GlStencilFaceDirection @face, uint @mask) {
            Native_StencilMaskSeparate(@face, @mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilOp")]
        static extern void Native_StencilOp(GlStencilOp @fail, GlStencilOp @zfail, GlStencilOp @zpass);

        public void StencilOp(GlStencilOp @fail, GlStencilOp @zfail, GlStencilOp @zpass) {
            Native_StencilOp(@fail, @zfail, @zpass);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilOpSeparate")]
        static extern void Native_StencilOpSeparate(GlStencilFaceDirection @face, GlStencilOp @sfail, GlStencilOp @dpfail, GlStencilOp @dppass);

        public void StencilOpSeparate(GlStencilFaceDirection @face, GlStencilOp @sfail, GlStencilOp @dpfail, GlStencilOp @dppass) {
            Native_StencilOpSeparate(@face, @sfail, @dpfail, @dppass);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilOpSeparateATI")]
        static extern void Native_StencilOpSeparateATI(GlStencilFaceDirection @face, GlStencilOp @sfail, GlStencilOp @dpfail, GlStencilOp @dppass);

        public void StencilOpSeparateATI(GlStencilFaceDirection @face, GlStencilOp @sfail, GlStencilOp @dpfail, GlStencilOp @dppass) {
            Native_StencilOpSeparateATI(@face, @sfail, @dpfail, @dppass);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilOpValueAMD")]
        static extern void Native_StencilOpValueAMD(GlStencilFaceDirection @face, uint @value);

        public void StencilOpValueAMD(GlStencilFaceDirection @face, uint @value) {
            Native_StencilOpValueAMD(@face, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilStrokePathInstancedNV")]
        static extern void Native_StencilStrokePathInstancedNV(int @numPaths, GlPathElementType @pathNameType, byte* @paths, uint @pathBase, int @reference, uint @mask, GlPathTransformType @transformType, float* @transformValues);

        public void StencilStrokePathInstancedNV(int @numPaths, GlPathElementType @pathNameType, byte[] @paths, uint @pathBase, int @reference, uint @mask, GlPathTransformType @transformType, float[] @transformValues) {
            fixed (byte *ptr_paths = @paths) {
                fixed (float *ptr_transformValues = @transformValues) {
                    Native_StencilStrokePathInstancedNV(@numPaths, @pathNameType, @ptr_paths, @pathBase, @reference, @mask, @transformType, @ptr_transformValues);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilStrokePathNV")]
        static extern void Native_StencilStrokePathNV(uint @path, int @reference, uint @mask);

        public void StencilStrokePathNV(uint @path, int @reference, uint @mask) {
            Native_StencilStrokePathNV(@path, @reference, @mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
        static extern void Native_StencilThenCoverFillPathInstancedNV(int @numPaths, uint @pathNameType, byte* @paths, uint @pathBase, uint @fillMode, uint @mask, uint @coverMode, uint @transformType, float* @transformValues);

        public void StencilThenCoverFillPathInstancedNV(int @numPaths, uint @pathNameType, byte[] @paths, uint @pathBase, uint @fillMode, uint @mask, uint @coverMode, uint @transformType, float[] @transformValues) {
            fixed (byte *ptr_paths = @paths) {
                fixed (float *ptr_transformValues = @transformValues) {
                    Native_StencilThenCoverFillPathInstancedNV(@numPaths, @pathNameType, @ptr_paths, @pathBase, @fillMode, @mask, @coverMode, @transformType, @ptr_transformValues);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilThenCoverFillPathNV")]
        static extern void Native_StencilThenCoverFillPathNV(uint @path, uint @fillMode, uint @mask, uint @coverMode);

        public void StencilThenCoverFillPathNV(uint @path, uint @fillMode, uint @mask, uint @coverMode) {
            Native_StencilThenCoverFillPathNV(@path, @fillMode, @mask, @coverMode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
        static extern void Native_StencilThenCoverStrokePathInstancedNV(int @numPaths, uint @pathNameType, byte* @paths, uint @pathBase, int @reference, uint @mask, uint @coverMode, uint @transformType, float* @transformValues);

        public void StencilThenCoverStrokePathInstancedNV(int @numPaths, uint @pathNameType, byte[] @paths, uint @pathBase, int @reference, uint @mask, uint @coverMode, uint @transformType, float[] @transformValues) {
            fixed (byte *ptr_paths = @paths) {
                fixed (float *ptr_transformValues = @transformValues) {
                    Native_StencilThenCoverStrokePathInstancedNV(@numPaths, @pathNameType, @ptr_paths, @pathBase, @reference, @mask, @coverMode, @transformType, @ptr_transformValues);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStencilThenCoverStrokePathNV")]
        static extern void Native_StencilThenCoverStrokePathNV(uint @path, int @reference, uint @mask, uint @coverMode);

        public void StencilThenCoverStrokePathNV(uint @path, int @reference, uint @mask, uint @coverMode) {
            Native_StencilThenCoverStrokePathNV(@path, @reference, @mask, @coverMode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStopInstrumentsSGIX")]
        static extern void Native_StopInstrumentsSGIX(int @marker);

        public void StopInstrumentsSGIX(int @marker) {
            Native_StopInstrumentsSGIX(@marker);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glStringMarkerGREMEDY")]
        static extern void Native_StringMarkerGREMEDY(int @len, byte* @string);

        public void StringMarkerGREMEDY(int @len, byte[] @string) {
            fixed (byte *ptr_string = @string) {
                Native_StringMarkerGREMEDY(@len, @ptr_string);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSubpixelPrecisionBiasNV")]
        static extern void Native_SubpixelPrecisionBiasNV(uint @xbits, uint @ybits);

        public void SubpixelPrecisionBiasNV(uint @xbits, uint @ybits) {
            Native_SubpixelPrecisionBiasNV(@xbits, @ybits);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSwizzleEXT")]
        static extern void Native_SwizzleEXT(uint @res, uint @in, uint @outX, uint @outY, uint @outZ, uint @outW);

        public void SwizzleEXT(uint @res, uint @in, uint @outX, uint @outY, uint @outZ, uint @outW) {
            Native_SwizzleEXT(@res, @in, @outX, @outY, @outZ, @outW);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSyncTextureINTEL")]
        static extern void Native_SyncTextureINTEL(uint @texture);

        public void SyncTextureINTEL(uint @texture) {
            Native_SyncTextureINTEL(@texture);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTagSampleBufferSGIX")]
        static extern void Native_TagSampleBufferSGIX();

        public void TagSampleBufferSGIX() {
            Native_TagSampleBufferSGIX();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTangent3bEXT")]
        static extern void Native_Tangent3bEXT(sbyte @tx, sbyte @ty, sbyte @tz);

        public void Tangent3bEXT(sbyte @tx, sbyte @ty, sbyte @tz) {
            Native_Tangent3bEXT(@tx, @ty, @tz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTangent3bvEXT")]
        static extern void Native_Tangent3bvEXT(sbyte* @v);

        public void Tangent3bvEXT(sbyte[] @v) {
            fixed (sbyte *ptr_v = @v) {
                Native_Tangent3bvEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTangent3dEXT")]
        static extern void Native_Tangent3dEXT(double @tx, double @ty, double @tz);

        public void Tangent3dEXT(double @tx, double @ty, double @tz) {
            Native_Tangent3dEXT(@tx, @ty, @tz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTangent3dvEXT")]
        static extern void Native_Tangent3dvEXT(double* @v);

        public void Tangent3dvEXT(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_Tangent3dvEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTangent3fEXT")]
        static extern void Native_Tangent3fEXT(float @tx, float @ty, float @tz);

        public void Tangent3fEXT(float @tx, float @ty, float @tz) {
            Native_Tangent3fEXT(@tx, @ty, @tz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTangent3fvEXT")]
        static extern void Native_Tangent3fvEXT(float* @v);

        public void Tangent3fvEXT(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_Tangent3fvEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTangent3iEXT")]
        static extern void Native_Tangent3iEXT(int @tx, int @ty, int @tz);

        public void Tangent3iEXT(int @tx, int @ty, int @tz) {
            Native_Tangent3iEXT(@tx, @ty, @tz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTangent3ivEXT")]
        static extern void Native_Tangent3ivEXT(int* @v);

        public void Tangent3ivEXT(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_Tangent3ivEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTangent3sEXT")]
        static extern void Native_Tangent3sEXT(short @tx, short @ty, short @tz);

        public void Tangent3sEXT(short @tx, short @ty, short @tz) {
            Native_Tangent3sEXT(@tx, @ty, @tz);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTangent3svEXT")]
        static extern void Native_Tangent3svEXT(short* @v);

        public void Tangent3svEXT(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_Tangent3svEXT(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTangentPointerEXT")]
        static extern void Native_TangentPointerEXT(uint @type, int @stride, byte* @pointer);

        public void TangentPointerEXT(uint @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_TangentPointerEXT(@type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTbufferMask3DFX")]
        static extern void Native_TbufferMask3DFX(uint @mask);

        public void TbufferMask3DFX(uint @mask) {
            Native_TbufferMask3DFX(@mask);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTessellationFactorAMD")]
        static extern void Native_TessellationFactorAMD(float @factor);

        public void TessellationFactorAMD(float @factor) {
            Native_TessellationFactorAMD(@factor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTessellationModeAMD")]
        static extern void Native_TessellationModeAMD(uint @mode);

        public void TessellationModeAMD(uint @mode) {
            Native_TessellationModeAMD(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTestFenceAPPLE")]
        static extern bool Native_TestFenceAPPLE(uint @fence);

        public bool TestFenceAPPLE(uint @fence) {
            return Native_TestFenceAPPLE(@fence);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTestFenceNV")]
        static extern bool Native_TestFenceNV(uint @fence);

        public bool TestFenceNV(uint @fence) {
            return Native_TestFenceNV(@fence);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTestObjectAPPLE")]
        static extern bool Native_TestObjectAPPLE(uint @object, uint @name);

        public bool TestObjectAPPLE(uint @object, uint @name) {
            return Native_TestObjectAPPLE(@object, @name);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexBuffer")]
        static extern void Native_TexBuffer(GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer);

        public void TexBuffer(GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer) {
            Native_TexBuffer(@target, @internalformat, @buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexBufferARB")]
        static extern void Native_TexBufferARB(GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer);

        public void TexBufferARB(GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer) {
            Native_TexBufferARB(@target, @internalformat, @buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexBufferEXT")]
        static extern void Native_TexBufferEXT(GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer);

        public void TexBufferEXT(GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer) {
            Native_TexBufferEXT(@target, @internalformat, @buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexBufferOES")]
        static extern void Native_TexBufferOES(GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer);

        public void TexBufferOES(GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer) {
            Native_TexBufferOES(@target, @internalformat, @buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexBufferRange")]
        static extern void Native_TexBufferRange(GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer, long @offset, long @size);

        public void TexBufferRange(GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer, long @offset, long @size) {
            Native_TexBufferRange(@target, @internalformat, @buffer, @offset, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexBufferRangeEXT")]
        static extern void Native_TexBufferRangeEXT(GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer, long @offset, long @size);

        public void TexBufferRangeEXT(GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer, long @offset, long @size) {
            Native_TexBufferRangeEXT(@target, @internalformat, @buffer, @offset, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexBufferRangeOES")]
        static extern void Native_TexBufferRangeOES(GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer, long @offset, long @size);

        public void TexBufferRangeOES(GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer, long @offset, long @size) {
            Native_TexBufferRangeOES(@target, @internalformat, @buffer, @offset, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexBumpParameterfvATI")]
        static extern void Native_TexBumpParameterfvATI(uint @pname, float* @param);

        public void TexBumpParameterfvATI(uint @pname, float[] @param) {
            fixed (float *ptr_param = @param) {
                Native_TexBumpParameterfvATI(@pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexBumpParameterivATI")]
        static extern void Native_TexBumpParameterivATI(uint @pname, int* @param);

        public void TexBumpParameterivATI(uint @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_TexBumpParameterivATI(@pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord1bOES")]
        static extern void Native_TexCoord1bOES(sbyte @s);

        public void TexCoord1bOES(sbyte @s) {
            Native_TexCoord1bOES(@s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord1bvOES")]
        static extern void Native_TexCoord1bvOES(sbyte* @coords);

        public void TexCoord1bvOES(sbyte[] @coords) {
            fixed (sbyte *ptr_coords = @coords) {
                Native_TexCoord1bvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord1d")]
        static extern void Native_TexCoord1d(double @s);

        public void TexCoord1d(double @s) {
            Native_TexCoord1d(@s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord1dv")]
        static extern void Native_TexCoord1dv(double* @v);

        public void TexCoord1dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_TexCoord1dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord1f")]
        static extern void Native_TexCoord1f(float @s);

        public void TexCoord1f(float @s) {
            Native_TexCoord1f(@s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord1fv")]
        static extern void Native_TexCoord1fv(float* @v);

        public void TexCoord1fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_TexCoord1fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord1hNV")]
        static extern void Native_TexCoord1hNV(ushort @s);

        public void TexCoord1hNV(ushort @s) {
            Native_TexCoord1hNV(@s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord1hvNV")]
        static extern void Native_TexCoord1hvNV(ushort* @v);

        public void TexCoord1hvNV(ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_TexCoord1hvNV(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord1i")]
        static extern void Native_TexCoord1i(int @s);

        public void TexCoord1i(int @s) {
            Native_TexCoord1i(@s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord1iv")]
        static extern void Native_TexCoord1iv(int* @v);

        public void TexCoord1iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_TexCoord1iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord1s")]
        static extern void Native_TexCoord1s(short @s);

        public void TexCoord1s(short @s) {
            Native_TexCoord1s(@s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord1sv")]
        static extern void Native_TexCoord1sv(short* @v);

        public void TexCoord1sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_TexCoord1sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord1xOES")]
        static extern void Native_TexCoord1xOES(int @s);

        public void TexCoord1xOES(int @s) {
            Native_TexCoord1xOES(@s);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord1xvOES")]
        static extern void Native_TexCoord1xvOES(int* @coords);

        public void TexCoord1xvOES(int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_TexCoord1xvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2bOES")]
        static extern void Native_TexCoord2bOES(sbyte @s, sbyte @t);

        public void TexCoord2bOES(sbyte @s, sbyte @t) {
            Native_TexCoord2bOES(@s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2bvOES")]
        static extern void Native_TexCoord2bvOES(sbyte* @coords);

        public void TexCoord2bvOES(sbyte[] @coords) {
            fixed (sbyte *ptr_coords = @coords) {
                Native_TexCoord2bvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2d")]
        static extern void Native_TexCoord2d(double @s, double @t);

        public void TexCoord2d(double @s, double @t) {
            Native_TexCoord2d(@s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2dv")]
        static extern void Native_TexCoord2dv(double* @v);

        public void TexCoord2dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_TexCoord2dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2f")]
        static extern void Native_TexCoord2f(float @s, float @t);

        public void TexCoord2f(float @s, float @t) {
            Native_TexCoord2f(@s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2fColor3fVertex3fSUN")]
        static extern void Native_TexCoord2fColor3fVertex3fSUN(float @s, float @t, float @r, float @g, float @b, float @x, float @y, float @z);

        public void TexCoord2fColor3fVertex3fSUN(float @s, float @t, float @r, float @g, float @b, float @x, float @y, float @z) {
            Native_TexCoord2fColor3fVertex3fSUN(@s, @t, @r, @g, @b, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2fColor3fVertex3fvSUN")]
        static extern void Native_TexCoord2fColor3fVertex3fvSUN(float* @tc, float* @c, float* @v);

        public void TexCoord2fColor3fVertex3fvSUN(float[] @tc, float[] @c, float[] @v) {
            fixed (float *ptr_tc = @tc) {
                fixed (float *ptr_c = @c) {
                    fixed (float *ptr_v = @v) {
                        Native_TexCoord2fColor3fVertex3fvSUN(@ptr_tc, @ptr_c, @ptr_v);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2fColor4fNormal3fVertex3fSUN")]
        static extern void Native_TexCoord2fColor4fNormal3fVertex3fSUN(float @s, float @t, float @r, float @g, float @b, float @a, float @nx, float @ny, float @nz, float @x, float @y, float @z);

        public void TexCoord2fColor4fNormal3fVertex3fSUN(float @s, float @t, float @r, float @g, float @b, float @a, float @nx, float @ny, float @nz, float @x, float @y, float @z) {
            Native_TexCoord2fColor4fNormal3fVertex3fSUN(@s, @t, @r, @g, @b, @a, @nx, @ny, @nz, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2fColor4fNormal3fVertex3fvSUN")]
        static extern void Native_TexCoord2fColor4fNormal3fVertex3fvSUN(float* @tc, float* @c, float* @n, float* @v);

        public void TexCoord2fColor4fNormal3fVertex3fvSUN(float[] @tc, float[] @c, float[] @n, float[] @v) {
            fixed (float *ptr_tc = @tc) {
                fixed (float *ptr_c = @c) {
                    fixed (float *ptr_n = @n) {
                        fixed (float *ptr_v = @v) {
                            Native_TexCoord2fColor4fNormal3fVertex3fvSUN(@ptr_tc, @ptr_c, @ptr_n, @ptr_v);
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2fColor4ubVertex3fSUN")]
        static extern void Native_TexCoord2fColor4ubVertex3fSUN(float @s, float @t, byte @r, byte @g, byte @b, byte @a, float @x, float @y, float @z);

        public void TexCoord2fColor4ubVertex3fSUN(float @s, float @t, byte @r, byte @g, byte @b, byte @a, float @x, float @y, float @z) {
            Native_TexCoord2fColor4ubVertex3fSUN(@s, @t, @r, @g, @b, @a, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2fColor4ubVertex3fvSUN")]
        static extern void Native_TexCoord2fColor4ubVertex3fvSUN(float* @tc, byte* @c, float* @v);

        public void TexCoord2fColor4ubVertex3fvSUN(float[] @tc, byte[] @c, float[] @v) {
            fixed (float *ptr_tc = @tc) {
                fixed (byte *ptr_c = @c) {
                    fixed (float *ptr_v = @v) {
                        Native_TexCoord2fColor4ubVertex3fvSUN(@ptr_tc, @ptr_c, @ptr_v);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2fNormal3fVertex3fSUN")]
        static extern void Native_TexCoord2fNormal3fVertex3fSUN(float @s, float @t, float @nx, float @ny, float @nz, float @x, float @y, float @z);

        public void TexCoord2fNormal3fVertex3fSUN(float @s, float @t, float @nx, float @ny, float @nz, float @x, float @y, float @z) {
            Native_TexCoord2fNormal3fVertex3fSUN(@s, @t, @nx, @ny, @nz, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2fNormal3fVertex3fvSUN")]
        static extern void Native_TexCoord2fNormal3fVertex3fvSUN(float* @tc, float* @n, float* @v);

        public void TexCoord2fNormal3fVertex3fvSUN(float[] @tc, float[] @n, float[] @v) {
            fixed (float *ptr_tc = @tc) {
                fixed (float *ptr_n = @n) {
                    fixed (float *ptr_v = @v) {
                        Native_TexCoord2fNormal3fVertex3fvSUN(@ptr_tc, @ptr_n, @ptr_v);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2fVertex3fSUN")]
        static extern void Native_TexCoord2fVertex3fSUN(float @s, float @t, float @x, float @y, float @z);

        public void TexCoord2fVertex3fSUN(float @s, float @t, float @x, float @y, float @z) {
            Native_TexCoord2fVertex3fSUN(@s, @t, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2fVertex3fvSUN")]
        static extern void Native_TexCoord2fVertex3fvSUN(float* @tc, float* @v);

        public void TexCoord2fVertex3fvSUN(float[] @tc, float[] @v) {
            fixed (float *ptr_tc = @tc) {
                fixed (float *ptr_v = @v) {
                    Native_TexCoord2fVertex3fvSUN(@ptr_tc, @ptr_v);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2fv")]
        static extern void Native_TexCoord2fv(float* @v);

        public void TexCoord2fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_TexCoord2fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2hNV")]
        static extern void Native_TexCoord2hNV(ushort @s, ushort @t);

        public void TexCoord2hNV(ushort @s, ushort @t) {
            Native_TexCoord2hNV(@s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2hvNV")]
        static extern void Native_TexCoord2hvNV(ushort* @v);

        public void TexCoord2hvNV(ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_TexCoord2hvNV(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2i")]
        static extern void Native_TexCoord2i(int @s, int @t);

        public void TexCoord2i(int @s, int @t) {
            Native_TexCoord2i(@s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2iv")]
        static extern void Native_TexCoord2iv(int* @v);

        public void TexCoord2iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_TexCoord2iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2s")]
        static extern void Native_TexCoord2s(short @s, short @t);

        public void TexCoord2s(short @s, short @t) {
            Native_TexCoord2s(@s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2sv")]
        static extern void Native_TexCoord2sv(short* @v);

        public void TexCoord2sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_TexCoord2sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2xOES")]
        static extern void Native_TexCoord2xOES(int @s, int @t);

        public void TexCoord2xOES(int @s, int @t) {
            Native_TexCoord2xOES(@s, @t);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord2xvOES")]
        static extern void Native_TexCoord2xvOES(int* @coords);

        public void TexCoord2xvOES(int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_TexCoord2xvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord3bOES")]
        static extern void Native_TexCoord3bOES(sbyte @s, sbyte @t, sbyte @r);

        public void TexCoord3bOES(sbyte @s, sbyte @t, sbyte @r) {
            Native_TexCoord3bOES(@s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord3bvOES")]
        static extern void Native_TexCoord3bvOES(sbyte* @coords);

        public void TexCoord3bvOES(sbyte[] @coords) {
            fixed (sbyte *ptr_coords = @coords) {
                Native_TexCoord3bvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord3d")]
        static extern void Native_TexCoord3d(double @s, double @t, double @r);

        public void TexCoord3d(double @s, double @t, double @r) {
            Native_TexCoord3d(@s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord3dv")]
        static extern void Native_TexCoord3dv(double* @v);

        public void TexCoord3dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_TexCoord3dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord3f")]
        static extern void Native_TexCoord3f(float @s, float @t, float @r);

        public void TexCoord3f(float @s, float @t, float @r) {
            Native_TexCoord3f(@s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord3fv")]
        static extern void Native_TexCoord3fv(float* @v);

        public void TexCoord3fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_TexCoord3fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord3hNV")]
        static extern void Native_TexCoord3hNV(ushort @s, ushort @t, ushort @r);

        public void TexCoord3hNV(ushort @s, ushort @t, ushort @r) {
            Native_TexCoord3hNV(@s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord3hvNV")]
        static extern void Native_TexCoord3hvNV(ushort* @v);

        public void TexCoord3hvNV(ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_TexCoord3hvNV(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord3i")]
        static extern void Native_TexCoord3i(int @s, int @t, int @r);

        public void TexCoord3i(int @s, int @t, int @r) {
            Native_TexCoord3i(@s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord3iv")]
        static extern void Native_TexCoord3iv(int* @v);

        public void TexCoord3iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_TexCoord3iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord3s")]
        static extern void Native_TexCoord3s(short @s, short @t, short @r);

        public void TexCoord3s(short @s, short @t, short @r) {
            Native_TexCoord3s(@s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord3sv")]
        static extern void Native_TexCoord3sv(short* @v);

        public void TexCoord3sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_TexCoord3sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord3xOES")]
        static extern void Native_TexCoord3xOES(int @s, int @t, int @r);

        public void TexCoord3xOES(int @s, int @t, int @r) {
            Native_TexCoord3xOES(@s, @t, @r);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord3xvOES")]
        static extern void Native_TexCoord3xvOES(int* @coords);

        public void TexCoord3xvOES(int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_TexCoord3xvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4bOES")]
        static extern void Native_TexCoord4bOES(sbyte @s, sbyte @t, sbyte @r, sbyte @q);

        public void TexCoord4bOES(sbyte @s, sbyte @t, sbyte @r, sbyte @q) {
            Native_TexCoord4bOES(@s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4bvOES")]
        static extern void Native_TexCoord4bvOES(sbyte* @coords);

        public void TexCoord4bvOES(sbyte[] @coords) {
            fixed (sbyte *ptr_coords = @coords) {
                Native_TexCoord4bvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4d")]
        static extern void Native_TexCoord4d(double @s, double @t, double @r, double @q);

        public void TexCoord4d(double @s, double @t, double @r, double @q) {
            Native_TexCoord4d(@s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4dv")]
        static extern void Native_TexCoord4dv(double* @v);

        public void TexCoord4dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_TexCoord4dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4f")]
        static extern void Native_TexCoord4f(float @s, float @t, float @r, float @q);

        public void TexCoord4f(float @s, float @t, float @r, float @q) {
            Native_TexCoord4f(@s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4fColor4fNormal3fVertex4fSUN")]
        static extern void Native_TexCoord4fColor4fNormal3fVertex4fSUN(float @s, float @t, float @p, float @q, float @r, float @g, float @b, float @a, float @nx, float @ny, float @nz, float @x, float @y, float @z, float @w);

        public void TexCoord4fColor4fNormal3fVertex4fSUN(float @s, float @t, float @p, float @q, float @r, float @g, float @b, float @a, float @nx, float @ny, float @nz, float @x, float @y, float @z, float @w) {
            Native_TexCoord4fColor4fNormal3fVertex4fSUN(@s, @t, @p, @q, @r, @g, @b, @a, @nx, @ny, @nz, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4fColor4fNormal3fVertex4fvSUN")]
        static extern void Native_TexCoord4fColor4fNormal3fVertex4fvSUN(float* @tc, float* @c, float* @n, float* @v);

        public void TexCoord4fColor4fNormal3fVertex4fvSUN(float[] @tc, float[] @c, float[] @n, float[] @v) {
            fixed (float *ptr_tc = @tc) {
                fixed (float *ptr_c = @c) {
                    fixed (float *ptr_n = @n) {
                        fixed (float *ptr_v = @v) {
                            Native_TexCoord4fColor4fNormal3fVertex4fvSUN(@ptr_tc, @ptr_c, @ptr_n, @ptr_v);
                        }
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4fVertex4fSUN")]
        static extern void Native_TexCoord4fVertex4fSUN(float @s, float @t, float @p, float @q, float @x, float @y, float @z, float @w);

        public void TexCoord4fVertex4fSUN(float @s, float @t, float @p, float @q, float @x, float @y, float @z, float @w) {
            Native_TexCoord4fVertex4fSUN(@s, @t, @p, @q, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4fVertex4fvSUN")]
        static extern void Native_TexCoord4fVertex4fvSUN(float* @tc, float* @v);

        public void TexCoord4fVertex4fvSUN(float[] @tc, float[] @v) {
            fixed (float *ptr_tc = @tc) {
                fixed (float *ptr_v = @v) {
                    Native_TexCoord4fVertex4fvSUN(@ptr_tc, @ptr_v);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4fv")]
        static extern void Native_TexCoord4fv(float* @v);

        public void TexCoord4fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_TexCoord4fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4hNV")]
        static extern void Native_TexCoord4hNV(ushort @s, ushort @t, ushort @r, ushort @q);

        public void TexCoord4hNV(ushort @s, ushort @t, ushort @r, ushort @q) {
            Native_TexCoord4hNV(@s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4hvNV")]
        static extern void Native_TexCoord4hvNV(ushort* @v);

        public void TexCoord4hvNV(ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_TexCoord4hvNV(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4i")]
        static extern void Native_TexCoord4i(int @s, int @t, int @r, int @q);

        public void TexCoord4i(int @s, int @t, int @r, int @q) {
            Native_TexCoord4i(@s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4iv")]
        static extern void Native_TexCoord4iv(int* @v);

        public void TexCoord4iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_TexCoord4iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4s")]
        static extern void Native_TexCoord4s(short @s, short @t, short @r, short @q);

        public void TexCoord4s(short @s, short @t, short @r, short @q) {
            Native_TexCoord4s(@s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4sv")]
        static extern void Native_TexCoord4sv(short* @v);

        public void TexCoord4sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_TexCoord4sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4xOES")]
        static extern void Native_TexCoord4xOES(int @s, int @t, int @r, int @q);

        public void TexCoord4xOES(int @s, int @t, int @r, int @q) {
            Native_TexCoord4xOES(@s, @t, @r, @q);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoord4xvOES")]
        static extern void Native_TexCoord4xvOES(int* @coords);

        public void TexCoord4xvOES(int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_TexCoord4xvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoordFormatNV")]
        static extern void Native_TexCoordFormatNV(int @size, uint @type, int @stride);

        public void TexCoordFormatNV(int @size, uint @type, int @stride) {
            Native_TexCoordFormatNV(@size, @type, @stride);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoordP1ui")]
        static extern void Native_TexCoordP1ui(GlTexCoordPointerType @type, uint @coords);

        public void TexCoordP1ui(GlTexCoordPointerType @type, uint @coords) {
            Native_TexCoordP1ui(@type, @coords);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoordP1uiv")]
        static extern void Native_TexCoordP1uiv(GlTexCoordPointerType @type, uint* @coords);

        public void TexCoordP1uiv(GlTexCoordPointerType @type, uint[] @coords) {
            fixed (uint *ptr_coords = @coords) {
                Native_TexCoordP1uiv(@type, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoordP2ui")]
        static extern void Native_TexCoordP2ui(GlTexCoordPointerType @type, uint @coords);

        public void TexCoordP2ui(GlTexCoordPointerType @type, uint @coords) {
            Native_TexCoordP2ui(@type, @coords);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoordP2uiv")]
        static extern void Native_TexCoordP2uiv(GlTexCoordPointerType @type, uint* @coords);

        public void TexCoordP2uiv(GlTexCoordPointerType @type, uint[] @coords) {
            fixed (uint *ptr_coords = @coords) {
                Native_TexCoordP2uiv(@type, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoordP3ui")]
        static extern void Native_TexCoordP3ui(GlTexCoordPointerType @type, uint @coords);

        public void TexCoordP3ui(GlTexCoordPointerType @type, uint @coords) {
            Native_TexCoordP3ui(@type, @coords);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoordP3uiv")]
        static extern void Native_TexCoordP3uiv(GlTexCoordPointerType @type, uint* @coords);

        public void TexCoordP3uiv(GlTexCoordPointerType @type, uint[] @coords) {
            fixed (uint *ptr_coords = @coords) {
                Native_TexCoordP3uiv(@type, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoordP4ui")]
        static extern void Native_TexCoordP4ui(GlTexCoordPointerType @type, uint @coords);

        public void TexCoordP4ui(GlTexCoordPointerType @type, uint @coords) {
            Native_TexCoordP4ui(@type, @coords);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoordP4uiv")]
        static extern void Native_TexCoordP4uiv(GlTexCoordPointerType @type, uint* @coords);

        public void TexCoordP4uiv(GlTexCoordPointerType @type, uint[] @coords) {
            fixed (uint *ptr_coords = @coords) {
                Native_TexCoordP4uiv(@type, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoordPointer")]
        static extern void Native_TexCoordPointer(int @size, GlTexCoordPointerType @type, int @stride, byte* @pointer);

        public void TexCoordPointer(int @size, GlTexCoordPointerType @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_TexCoordPointer(@size, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoordPointerEXT")]
        static extern void Native_TexCoordPointerEXT(int @size, GlTexCoordPointerType @type, int @stride, int @count, byte* @pointer);

        public void TexCoordPointerEXT(int @size, GlTexCoordPointerType @type, int @stride, int @count, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_TexCoordPointerEXT(@size, @type, @stride, @count, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoordPointerListIBM")]
        static extern void Native_TexCoordPointerListIBM(int @size, GlTexCoordPointerType @type, int @stride, byte** @pointer, int @ptrstride);

        public void TexCoordPointerListIBM(int @size, GlTexCoordPointerType @type, int @stride, byte[][] @pointer, int @ptrstride) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_TexCoordPointerListIBM(@size, @type, @stride, (byte **) ptr_pointer.ToPointer(), @ptrstride);
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexCoordPointervINTEL")]
        static extern void Native_TexCoordPointervINTEL(int @size, GlVertexPointerType @type, byte** @pointer);

        public void TexCoordPointervINTEL(int @size, GlVertexPointerType @type, byte[][] @pointer) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_TexCoordPointervINTEL(@size, @type, (byte **) ptr_pointer.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexEnvf")]
        static extern void Native_TexEnvf(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, float @param);

        public void TexEnvf(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, float @param) {
            Native_TexEnvf(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexEnvfv")]
        static extern void Native_TexEnvfv(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, float* @params);

        public void TexEnvfv(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_TexEnvfv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexEnvi")]
        static extern void Native_TexEnvi(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int @param);

        public void TexEnvi(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int @param) {
            Native_TexEnvi(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexEnviv")]
        static extern void Native_TexEnviv(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int* @params);

        public void TexEnviv(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_TexEnviv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexEnvx")]
        static extern void Native_TexEnvx(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int @param);

        public void TexEnvx(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int @param) {
            Native_TexEnvx(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexEnvxOES")]
        static extern void Native_TexEnvxOES(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int @param);

        public void TexEnvxOES(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int @param) {
            Native_TexEnvxOES(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexEnvxv")]
        static extern void Native_TexEnvxv(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int* @params);

        public void TexEnvxv(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_TexEnvxv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexEnvxvOES")]
        static extern void Native_TexEnvxvOES(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int* @params);

        public void TexEnvxvOES(GlTextureEnvTarget @target, GlTextureEnvParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_TexEnvxvOES(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexFilterFuncSGIS")]
        static extern void Native_TexFilterFuncSGIS(GlTextureTarget @target, uint @filter, int @n, float* @weights);

        public void TexFilterFuncSGIS(GlTextureTarget @target, uint @filter, int @n, float[] @weights) {
            fixed (float *ptr_weights = @weights) {
                Native_TexFilterFuncSGIS(@target, @filter, @n, @ptr_weights);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexGend")]
        static extern void Native_TexGend(GlTextureCoordName @coord, GlTextureGenParameter @pname, double @param);

        public void TexGend(GlTextureCoordName @coord, GlTextureGenParameter @pname, double @param) {
            Native_TexGend(@coord, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexGendv")]
        static extern void Native_TexGendv(GlTextureCoordName @coord, GlTextureGenParameter @pname, double* @params);

        public void TexGendv(GlTextureCoordName @coord, GlTextureGenParameter @pname, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_TexGendv(@coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexGenf")]
        static extern void Native_TexGenf(GlTextureCoordName @coord, GlTextureGenParameter @pname, float @param);

        public void TexGenf(GlTextureCoordName @coord, GlTextureGenParameter @pname, float @param) {
            Native_TexGenf(@coord, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexGenfOES")]
        static extern void Native_TexGenfOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, float @param);

        public void TexGenfOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, float @param) {
            Native_TexGenfOES(@coord, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexGenfv")]
        static extern void Native_TexGenfv(GlTextureCoordName @coord, GlTextureGenParameter @pname, float* @params);

        public void TexGenfv(GlTextureCoordName @coord, GlTextureGenParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_TexGenfv(@coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexGenfvOES")]
        static extern void Native_TexGenfvOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, float* @params);

        public void TexGenfvOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_TexGenfvOES(@coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexGeni")]
        static extern void Native_TexGeni(GlTextureCoordName @coord, GlTextureGenParameter @pname, int @param);

        public void TexGeni(GlTextureCoordName @coord, GlTextureGenParameter @pname, int @param) {
            Native_TexGeni(@coord, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexGeniOES")]
        static extern void Native_TexGeniOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, int @param);

        public void TexGeniOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, int @param) {
            Native_TexGeniOES(@coord, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexGeniv")]
        static extern void Native_TexGeniv(GlTextureCoordName @coord, GlTextureGenParameter @pname, int* @params);

        public void TexGeniv(GlTextureCoordName @coord, GlTextureGenParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_TexGeniv(@coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexGenivOES")]
        static extern void Native_TexGenivOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, int* @params);

        public void TexGenivOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_TexGenivOES(@coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexGenxOES")]
        static extern void Native_TexGenxOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, int @param);

        public void TexGenxOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, int @param) {
            Native_TexGenxOES(@coord, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexGenxvOES")]
        static extern void Native_TexGenxvOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, int* @params);

        public void TexGenxvOES(GlTextureCoordName @coord, GlTextureGenParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_TexGenxvOES(@coord, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexImage1D")]
        static extern void Native_TexImage1D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @border, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TexImage1D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @border, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TexImage1D(@target, @level, @internalformat, @width, @border, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexImage2D")]
        static extern void Native_TexImage2D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @border, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TexImage2D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @border, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TexImage2D(@target, @level, @internalformat, @width, @height, @border, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexImage2DMultisample")]
        static extern void Native_TexImage2DMultisample(GlTextureTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height, GlBoolean @fixedsamplelocations);

        public void TexImage2DMultisample(GlTextureTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height, GlBoolean @fixedsamplelocations) {
            Native_TexImage2DMultisample(@target, @samples, @internalformat, @width, @height, @fixedsamplelocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexImage2DMultisampleCoverageNV")]
        static extern void Native_TexImage2DMultisampleCoverageNV(GlTextureTarget @target, int @coverageSamples, int @colorSamples, int @internalFormat, int @width, int @height, GlBoolean @fixedSampleLocations);

        public void TexImage2DMultisampleCoverageNV(GlTextureTarget @target, int @coverageSamples, int @colorSamples, int @internalFormat, int @width, int @height, GlBoolean @fixedSampleLocations) {
            Native_TexImage2DMultisampleCoverageNV(@target, @coverageSamples, @colorSamples, @internalFormat, @width, @height, @fixedSampleLocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexImage3D")]
        static extern void Native_TexImage3D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TexImage3D(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TexImage3D(@target, @level, @internalformat, @width, @height, @depth, @border, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexImage3DEXT")]
        static extern void Native_TexImage3DEXT(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TexImage3DEXT(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TexImage3DEXT(@target, @level, @internalformat, @width, @height, @depth, @border, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexImage3DMultisample")]
        static extern void Native_TexImage3DMultisample(GlTextureTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height, int @depth, GlBoolean @fixedsamplelocations);

        public void TexImage3DMultisample(GlTextureTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height, int @depth, GlBoolean @fixedsamplelocations) {
            Native_TexImage3DMultisample(@target, @samples, @internalformat, @width, @height, @depth, @fixedsamplelocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexImage3DMultisampleCoverageNV")]
        static extern void Native_TexImage3DMultisampleCoverageNV(GlTextureTarget @target, int @coverageSamples, int @colorSamples, int @internalFormat, int @width, int @height, int @depth, GlBoolean @fixedSampleLocations);

        public void TexImage3DMultisampleCoverageNV(GlTextureTarget @target, int @coverageSamples, int @colorSamples, int @internalFormat, int @width, int @height, int @depth, GlBoolean @fixedSampleLocations) {
            Native_TexImage3DMultisampleCoverageNV(@target, @coverageSamples, @colorSamples, @internalFormat, @width, @height, @depth, @fixedSampleLocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexImage3DOES")]
        static extern void Native_TexImage3DOES(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TexImage3DOES(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TexImage3DOES(@target, @level, @internalformat, @width, @height, @depth, @border, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexImage4DSGIS")]
        static extern void Native_TexImage4DSGIS(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @size4d, int @border, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TexImage4DSGIS(GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @size4d, int @border, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TexImage4DSGIS(@target, @level, @internalformat, @width, @height, @depth, @size4d, @border, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexPageCommitmentARB")]
        static extern void Native_TexPageCommitmentARB(uint @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, bool @commit);

        public void TexPageCommitmentARB(uint @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, bool @commit) {
            Native_TexPageCommitmentARB(@target, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @commit);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexPageCommitmentEXT")]
        static extern void Native_TexPageCommitmentEXT(uint @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, bool @commit);

        public void TexPageCommitmentEXT(uint @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, bool @commit) {
            Native_TexPageCommitmentEXT(@target, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @commit);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexParameterIiv")]
        static extern void Native_TexParameterIiv(GlTextureTarget @target, GlTextureParameterName @pname, int* @params);

        public void TexParameterIiv(GlTextureTarget @target, GlTextureParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_TexParameterIiv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexParameterIivEXT")]
        static extern void Native_TexParameterIivEXT(GlTextureTarget @target, GlTextureParameterName @pname, int* @params);

        public void TexParameterIivEXT(GlTextureTarget @target, GlTextureParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_TexParameterIivEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexParameterIivOES")]
        static extern void Native_TexParameterIivOES(GlTextureTarget @target, GlTextureParameterName @pname, int* @params);

        public void TexParameterIivOES(GlTextureTarget @target, GlTextureParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_TexParameterIivOES(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexParameterIuiv")]
        static extern void Native_TexParameterIuiv(GlTextureTarget @target, GlTextureParameterName @pname, uint* @params);

        public void TexParameterIuiv(GlTextureTarget @target, GlTextureParameterName @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_TexParameterIuiv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexParameterIuivEXT")]
        static extern void Native_TexParameterIuivEXT(GlTextureTarget @target, GlTextureParameterName @pname, uint* @params);

        public void TexParameterIuivEXT(GlTextureTarget @target, GlTextureParameterName @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_TexParameterIuivEXT(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexParameterIuivOES")]
        static extern void Native_TexParameterIuivOES(GlTextureTarget @target, GlTextureParameterName @pname, uint* @params);

        public void TexParameterIuivOES(GlTextureTarget @target, GlTextureParameterName @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_TexParameterIuivOES(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexParameterf")]
        static extern void Native_TexParameterf(GlTextureTarget @target, GlTextureParameterName @pname, float @param);

        public void TexParameterf(GlTextureTarget @target, GlTextureParameterName @pname, float @param) {
            Native_TexParameterf(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexParameterfv")]
        static extern void Native_TexParameterfv(GlTextureTarget @target, GlTextureParameterName @pname, float* @params);

        public void TexParameterfv(GlTextureTarget @target, GlTextureParameterName @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_TexParameterfv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexParameteri")]
        static extern void Native_TexParameteri(GlTextureTarget @target, GlTextureParameterName @pname, int @param);

        public void TexParameteri(GlTextureTarget @target, GlTextureParameterName @pname, int @param) {
            Native_TexParameteri(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexParameteriv")]
        static extern void Native_TexParameteriv(GlTextureTarget @target, GlTextureParameterName @pname, int* @params);

        public void TexParameteriv(GlTextureTarget @target, GlTextureParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_TexParameteriv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexParameterx")]
        static extern void Native_TexParameterx(GlTextureTarget @target, GlGetTextureParameter @pname, int @param);

        public void TexParameterx(GlTextureTarget @target, GlGetTextureParameter @pname, int @param) {
            Native_TexParameterx(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexParameterxOES")]
        static extern void Native_TexParameterxOES(GlTextureTarget @target, GlGetTextureParameter @pname, int @param);

        public void TexParameterxOES(GlTextureTarget @target, GlGetTextureParameter @pname, int @param) {
            Native_TexParameterxOES(@target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexParameterxv")]
        static extern void Native_TexParameterxv(GlTextureTarget @target, GlGetTextureParameter @pname, int* @params);

        public void TexParameterxv(GlTextureTarget @target, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_TexParameterxv(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexParameterxvOES")]
        static extern void Native_TexParameterxvOES(GlTextureTarget @target, GlGetTextureParameter @pname, int* @params);

        public void TexParameterxvOES(GlTextureTarget @target, GlGetTextureParameter @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_TexParameterxvOES(@target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexRenderbufferNV")]
        static extern void Native_TexRenderbufferNV(GlTextureTarget @target, uint @renderbuffer);

        public void TexRenderbufferNV(GlTextureTarget @target, uint @renderbuffer) {
            Native_TexRenderbufferNV(@target, @renderbuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexStorage1D")]
        static extern void Native_TexStorage1D(GlTextureTarget @target, int @levels, GlInternalFormat @internalformat, int @width);

        public void TexStorage1D(GlTextureTarget @target, int @levels, GlInternalFormat @internalformat, int @width) {
            Native_TexStorage1D(@target, @levels, @internalformat, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexStorage1DEXT")]
        static extern void Native_TexStorage1DEXT(GlTextureTarget @target, int @levels, GlInternalFormat @internalformat, int @width);

        public void TexStorage1DEXT(GlTextureTarget @target, int @levels, GlInternalFormat @internalformat, int @width) {
            Native_TexStorage1DEXT(@target, @levels, @internalformat, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexStorage2D")]
        static extern void Native_TexStorage2D(GlTextureTarget @target, int @levels, GlInternalFormat @internalformat, int @width, int @height);

        public void TexStorage2D(GlTextureTarget @target, int @levels, GlInternalFormat @internalformat, int @width, int @height) {
            Native_TexStorage2D(@target, @levels, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexStorage2DEXT")]
        static extern void Native_TexStorage2DEXT(GlTextureTarget @target, int @levels, GlInternalFormat @internalformat, int @width, int @height);

        public void TexStorage2DEXT(GlTextureTarget @target, int @levels, GlInternalFormat @internalformat, int @width, int @height) {
            Native_TexStorage2DEXT(@target, @levels, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexStorage2DMultisample")]
        static extern void Native_TexStorage2DMultisample(GlTextureTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height, GlBoolean @fixedsamplelocations);

        public void TexStorage2DMultisample(GlTextureTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height, GlBoolean @fixedsamplelocations) {
            Native_TexStorage2DMultisample(@target, @samples, @internalformat, @width, @height, @fixedsamplelocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexStorage3D")]
        static extern void Native_TexStorage3D(GlTextureTarget @target, int @levels, GlInternalFormat @internalformat, int @width, int @height, int @depth);

        public void TexStorage3D(GlTextureTarget @target, int @levels, GlInternalFormat @internalformat, int @width, int @height, int @depth) {
            Native_TexStorage3D(@target, @levels, @internalformat, @width, @height, @depth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexStorage3DEXT")]
        static extern void Native_TexStorage3DEXT(GlTextureTarget @target, int @levels, GlInternalFormat @internalformat, int @width, int @height, int @depth);

        public void TexStorage3DEXT(GlTextureTarget @target, int @levels, GlInternalFormat @internalformat, int @width, int @height, int @depth) {
            Native_TexStorage3DEXT(@target, @levels, @internalformat, @width, @height, @depth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexStorage3DMultisample")]
        static extern void Native_TexStorage3DMultisample(GlTextureTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height, int @depth, GlBoolean @fixedsamplelocations);

        public void TexStorage3DMultisample(GlTextureTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height, int @depth, GlBoolean @fixedsamplelocations) {
            Native_TexStorage3DMultisample(@target, @samples, @internalformat, @width, @height, @depth, @fixedsamplelocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexStorage3DMultisampleOES")]
        static extern void Native_TexStorage3DMultisampleOES(GlTextureTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height, int @depth, GlBoolean @fixedsamplelocations);

        public void TexStorage3DMultisampleOES(GlTextureTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height, int @depth, GlBoolean @fixedsamplelocations) {
            Native_TexStorage3DMultisampleOES(@target, @samples, @internalformat, @width, @height, @depth, @fixedsamplelocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexStorageMem1DEXT")]
        static extern void Native_TexStorageMem1DEXT(GlTextureTarget @target, int @levels, uint @internalFormat, int @width, uint @memory, ulong @offset);

        public void TexStorageMem1DEXT(GlTextureTarget @target, int @levels, uint @internalFormat, int @width, uint @memory, ulong @offset) {
            Native_TexStorageMem1DEXT(@target, @levels, @internalFormat, @width, @memory, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexStorageMem2DEXT")]
        static extern void Native_TexStorageMem2DEXT(GlTextureTarget @target, int @levels, uint @internalFormat, int @width, int @height, uint @memory, ulong @offset);

        public void TexStorageMem2DEXT(GlTextureTarget @target, int @levels, uint @internalFormat, int @width, int @height, uint @memory, ulong @offset) {
            Native_TexStorageMem2DEXT(@target, @levels, @internalFormat, @width, @height, @memory, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexStorageMem2DMultisampleEXT")]
        static extern void Native_TexStorageMem2DMultisampleEXT(GlTextureTarget @target, int @samples, uint @internalFormat, int @width, int @height, bool @fixedSampleLocations, uint @memory, ulong @offset);

        public void TexStorageMem2DMultisampleEXT(GlTextureTarget @target, int @samples, uint @internalFormat, int @width, int @height, bool @fixedSampleLocations, uint @memory, ulong @offset) {
            Native_TexStorageMem2DMultisampleEXT(@target, @samples, @internalFormat, @width, @height, @fixedSampleLocations, @memory, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexStorageMem3DEXT")]
        static extern void Native_TexStorageMem3DEXT(GlTextureTarget @target, int @levels, uint @internalFormat, int @width, int @height, int @depth, uint @memory, ulong @offset);

        public void TexStorageMem3DEXT(GlTextureTarget @target, int @levels, uint @internalFormat, int @width, int @height, int @depth, uint @memory, ulong @offset) {
            Native_TexStorageMem3DEXT(@target, @levels, @internalFormat, @width, @height, @depth, @memory, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexStorageMem3DMultisampleEXT")]
        static extern void Native_TexStorageMem3DMultisampleEXT(GlTextureTarget @target, int @samples, uint @internalFormat, int @width, int @height, int @depth, bool @fixedSampleLocations, uint @memory, ulong @offset);

        public void TexStorageMem3DMultisampleEXT(GlTextureTarget @target, int @samples, uint @internalFormat, int @width, int @height, int @depth, bool @fixedSampleLocations, uint @memory, ulong @offset) {
            Native_TexStorageMem3DMultisampleEXT(@target, @samples, @internalFormat, @width, @height, @depth, @fixedSampleLocations, @memory, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexStorageSparseAMD")]
        static extern void Native_TexStorageSparseAMD(GlTextureTarget @target, GlInternalFormat @internalFormat, int @width, int @height, int @depth, int @layers, GlTextureStorageMaskAMD @flags);

        public void TexStorageSparseAMD(GlTextureTarget @target, GlInternalFormat @internalFormat, int @width, int @height, int @depth, int @layers, GlTextureStorageMaskAMD @flags) {
            Native_TexStorageSparseAMD(@target, @internalFormat, @width, @height, @depth, @layers, @flags);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexSubImage1D")]
        static extern void Native_TexSubImage1D(GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TexSubImage1D(GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TexSubImage1D(@target, @level, @xoffset, @width, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexSubImage1DEXT")]
        static extern void Native_TexSubImage1DEXT(GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TexSubImage1DEXT(GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TexSubImage1DEXT(@target, @level, @xoffset, @width, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexSubImage2D")]
        static extern void Native_TexSubImage2D(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TexSubImage2D(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TexSubImage2D(@target, @level, @xoffset, @yoffset, @width, @height, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexSubImage2DEXT")]
        static extern void Native_TexSubImage2DEXT(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TexSubImage2DEXT(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TexSubImage2DEXT(@target, @level, @xoffset, @yoffset, @width, @height, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexSubImage3D")]
        static extern void Native_TexSubImage3D(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TexSubImage3D(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TexSubImage3D(@target, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexSubImage3DEXT")]
        static extern void Native_TexSubImage3DEXT(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TexSubImage3DEXT(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TexSubImage3DEXT(@target, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexSubImage3DOES")]
        static extern void Native_TexSubImage3DOES(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TexSubImage3DOES(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TexSubImage3DOES(@target, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexSubImage4DSGIS")]
        static extern void Native_TexSubImage4DSGIS(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @woffset, int @width, int @height, int @depth, int @size4d, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TexSubImage4DSGIS(GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @woffset, int @width, int @height, int @depth, int @size4d, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TexSubImage4DSGIS(@target, @level, @xoffset, @yoffset, @zoffset, @woffset, @width, @height, @depth, @size4d, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureBarrier")]
        static extern void Native_TextureBarrier();

        public void TextureBarrier() {
            Native_TextureBarrier();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureBarrierNV")]
        static extern void Native_TextureBarrierNV();

        public void TextureBarrierNV() {
            Native_TextureBarrierNV();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureBuffer")]
        static extern void Native_TextureBuffer(uint @texture, GlInternalFormat @internalformat, uint @buffer);

        public void TextureBuffer(uint @texture, GlInternalFormat @internalformat, uint @buffer) {
            Native_TextureBuffer(@texture, @internalformat, @buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureBufferEXT")]
        static extern void Native_TextureBufferEXT(uint @texture, GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer);

        public void TextureBufferEXT(uint @texture, GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer) {
            Native_TextureBufferEXT(@texture, @target, @internalformat, @buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureBufferRange")]
        static extern void Native_TextureBufferRange(uint @texture, GlInternalFormat @internalformat, uint @buffer, long @offset, long @size);

        public void TextureBufferRange(uint @texture, GlInternalFormat @internalformat, uint @buffer, long @offset, long @size) {
            Native_TextureBufferRange(@texture, @internalformat, @buffer, @offset, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureBufferRangeEXT")]
        static extern void Native_TextureBufferRangeEXT(uint @texture, GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer, long @offset, long @size);

        public void TextureBufferRangeEXT(uint @texture, GlTextureTarget @target, GlInternalFormat @internalformat, uint @buffer, long @offset, long @size) {
            Native_TextureBufferRangeEXT(@texture, @target, @internalformat, @buffer, @offset, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureColorMaskSGIS")]
        static extern void Native_TextureColorMaskSGIS(GlBoolean @red, GlBoolean @green, GlBoolean @blue, GlBoolean @alpha);

        public void TextureColorMaskSGIS(GlBoolean @red, GlBoolean @green, GlBoolean @blue, GlBoolean @alpha) {
            Native_TextureColorMaskSGIS(@red, @green, @blue, @alpha);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureFoveationParametersQCOM")]
        static extern void Native_TextureFoveationParametersQCOM(uint @texture, uint @layer, uint @focalPoint, float @focalX, float @focalY, float @gainX, float @gainY, float @foveaArea);

        public void TextureFoveationParametersQCOM(uint @texture, uint @layer, uint @focalPoint, float @focalX, float @focalY, float @gainX, float @gainY, float @foveaArea) {
            Native_TextureFoveationParametersQCOM(@texture, @layer, @focalPoint, @focalX, @focalY, @gainX, @gainY, @foveaArea);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureImage1DEXT")]
        static extern void Native_TextureImage1DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @border, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TextureImage1DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @border, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TextureImage1DEXT(@texture, @target, @level, @internalformat, @width, @border, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureImage2DEXT")]
        static extern void Native_TextureImage2DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @border, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TextureImage2DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @border, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TextureImage2DEXT(@texture, @target, @level, @internalformat, @width, @height, @border, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureImage2DMultisampleCoverageNV")]
        static extern void Native_TextureImage2DMultisampleCoverageNV(uint @texture, GlTextureTarget @target, int @coverageSamples, int @colorSamples, int @internalFormat, int @width, int @height, GlBoolean @fixedSampleLocations);

        public void TextureImage2DMultisampleCoverageNV(uint @texture, GlTextureTarget @target, int @coverageSamples, int @colorSamples, int @internalFormat, int @width, int @height, GlBoolean @fixedSampleLocations) {
            Native_TextureImage2DMultisampleCoverageNV(@texture, @target, @coverageSamples, @colorSamples, @internalFormat, @width, @height, @fixedSampleLocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureImage2DMultisampleNV")]
        static extern void Native_TextureImage2DMultisampleNV(uint @texture, GlTextureTarget @target, int @samples, int @internalFormat, int @width, int @height, GlBoolean @fixedSampleLocations);

        public void TextureImage2DMultisampleNV(uint @texture, GlTextureTarget @target, int @samples, int @internalFormat, int @width, int @height, GlBoolean @fixedSampleLocations) {
            Native_TextureImage2DMultisampleNV(@texture, @target, @samples, @internalFormat, @width, @height, @fixedSampleLocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureImage3DEXT")]
        static extern void Native_TextureImage3DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TextureImage3DEXT(uint @texture, GlTextureTarget @target, int @level, GlInternalFormat @internalformat, int @width, int @height, int @depth, int @border, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TextureImage3DEXT(@texture, @target, @level, @internalformat, @width, @height, @depth, @border, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureImage3DMultisampleCoverageNV")]
        static extern void Native_TextureImage3DMultisampleCoverageNV(uint @texture, GlTextureTarget @target, int @coverageSamples, int @colorSamples, int @internalFormat, int @width, int @height, int @depth, GlBoolean @fixedSampleLocations);

        public void TextureImage3DMultisampleCoverageNV(uint @texture, GlTextureTarget @target, int @coverageSamples, int @colorSamples, int @internalFormat, int @width, int @height, int @depth, GlBoolean @fixedSampleLocations) {
            Native_TextureImage3DMultisampleCoverageNV(@texture, @target, @coverageSamples, @colorSamples, @internalFormat, @width, @height, @depth, @fixedSampleLocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureImage3DMultisampleNV")]
        static extern void Native_TextureImage3DMultisampleNV(uint @texture, GlTextureTarget @target, int @samples, int @internalFormat, int @width, int @height, int @depth, GlBoolean @fixedSampleLocations);

        public void TextureImage3DMultisampleNV(uint @texture, GlTextureTarget @target, int @samples, int @internalFormat, int @width, int @height, int @depth, GlBoolean @fixedSampleLocations) {
            Native_TextureImage3DMultisampleNV(@texture, @target, @samples, @internalFormat, @width, @height, @depth, @fixedSampleLocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureLightEXT")]
        static extern void Native_TextureLightEXT(uint @pname);

        public void TextureLightEXT(uint @pname) {
            Native_TextureLightEXT(@pname);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureMaterialEXT")]
        static extern void Native_TextureMaterialEXT(GlMaterialFace @face, GlMaterialParameter @mode);

        public void TextureMaterialEXT(GlMaterialFace @face, GlMaterialParameter @mode) {
            Native_TextureMaterialEXT(@face, @mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureNormalEXT")]
        static extern void Native_TextureNormalEXT(uint @mode);

        public void TextureNormalEXT(uint @mode) {
            Native_TextureNormalEXT(@mode);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTexturePageCommitmentEXT")]
        static extern void Native_TexturePageCommitmentEXT(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, bool @commit);

        public void TexturePageCommitmentEXT(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, bool @commit) {
            Native_TexturePageCommitmentEXT(@texture, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @commit);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureParameterIiv")]
        static extern void Native_TextureParameterIiv(uint @texture, GlTextureParameterName @pname, int* @params);

        public void TextureParameterIiv(uint @texture, GlTextureParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_TextureParameterIiv(@texture, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureParameterIivEXT")]
        static extern void Native_TextureParameterIivEXT(uint @texture, GlTextureTarget @target, GlTextureParameterName @pname, int* @params);

        public void TextureParameterIivEXT(uint @texture, GlTextureTarget @target, GlTextureParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_TextureParameterIivEXT(@texture, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureParameterIuiv")]
        static extern void Native_TextureParameterIuiv(uint @texture, GlTextureParameterName @pname, uint* @params);

        public void TextureParameterIuiv(uint @texture, GlTextureParameterName @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_TextureParameterIuiv(@texture, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureParameterIuivEXT")]
        static extern void Native_TextureParameterIuivEXT(uint @texture, GlTextureTarget @target, GlTextureParameterName @pname, uint* @params);

        public void TextureParameterIuivEXT(uint @texture, GlTextureTarget @target, GlTextureParameterName @pname, uint[] @params) {
            fixed (uint *ptr_params = @params) {
                Native_TextureParameterIuivEXT(@texture, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureParameterf")]
        static extern void Native_TextureParameterf(uint @texture, GlTextureParameterName @pname, float @param);

        public void TextureParameterf(uint @texture, GlTextureParameterName @pname, float @param) {
            Native_TextureParameterf(@texture, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureParameterfEXT")]
        static extern void Native_TextureParameterfEXT(uint @texture, GlTextureTarget @target, GlTextureParameterName @pname, float @param);

        public void TextureParameterfEXT(uint @texture, GlTextureTarget @target, GlTextureParameterName @pname, float @param) {
            Native_TextureParameterfEXT(@texture, @target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureParameterfv")]
        static extern void Native_TextureParameterfv(uint @texture, GlTextureParameterName @pname, float* @param);

        public void TextureParameterfv(uint @texture, GlTextureParameterName @pname, float[] @param) {
            fixed (float *ptr_param = @param) {
                Native_TextureParameterfv(@texture, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureParameterfvEXT")]
        static extern void Native_TextureParameterfvEXT(uint @texture, GlTextureTarget @target, GlTextureParameterName @pname, float* @params);

        public void TextureParameterfvEXT(uint @texture, GlTextureTarget @target, GlTextureParameterName @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_TextureParameterfvEXT(@texture, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureParameteri")]
        static extern void Native_TextureParameteri(uint @texture, GlTextureParameterName @pname, int @param);

        public void TextureParameteri(uint @texture, GlTextureParameterName @pname, int @param) {
            Native_TextureParameteri(@texture, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureParameteriEXT")]
        static extern void Native_TextureParameteriEXT(uint @texture, GlTextureTarget @target, GlTextureParameterName @pname, int @param);

        public void TextureParameteriEXT(uint @texture, GlTextureTarget @target, GlTextureParameterName @pname, int @param) {
            Native_TextureParameteriEXT(@texture, @target, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureParameteriv")]
        static extern void Native_TextureParameteriv(uint @texture, GlTextureParameterName @pname, int* @param);

        public void TextureParameteriv(uint @texture, GlTextureParameterName @pname, int[] @param) {
            fixed (int *ptr_param = @param) {
                Native_TextureParameteriv(@texture, @pname, @ptr_param);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureParameterivEXT")]
        static extern void Native_TextureParameterivEXT(uint @texture, GlTextureTarget @target, GlTextureParameterName @pname, int* @params);

        public void TextureParameterivEXT(uint @texture, GlTextureTarget @target, GlTextureParameterName @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_TextureParameterivEXT(@texture, @target, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureRangeAPPLE")]
        static extern void Native_TextureRangeAPPLE(uint @target, int @length, byte* @pointer);

        public void TextureRangeAPPLE(uint @target, int @length, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_TextureRangeAPPLE(@target, @length, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureRenderbufferEXT")]
        static extern void Native_TextureRenderbufferEXT(uint @texture, GlTextureTarget @target, uint @renderbuffer);

        public void TextureRenderbufferEXT(uint @texture, GlTextureTarget @target, uint @renderbuffer) {
            Native_TextureRenderbufferEXT(@texture, @target, @renderbuffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorage1D")]
        static extern void Native_TextureStorage1D(uint @texture, int @levels, GlInternalFormat @internalformat, int @width);

        public void TextureStorage1D(uint @texture, int @levels, GlInternalFormat @internalformat, int @width) {
            Native_TextureStorage1D(@texture, @levels, @internalformat, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorage1DEXT")]
        static extern void Native_TextureStorage1DEXT(uint @texture, uint @target, int @levels, GlInternalFormat @internalformat, int @width);

        public void TextureStorage1DEXT(uint @texture, uint @target, int @levels, GlInternalFormat @internalformat, int @width) {
            Native_TextureStorage1DEXT(@texture, @target, @levels, @internalformat, @width);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorage2D")]
        static extern void Native_TextureStorage2D(uint @texture, int @levels, GlInternalFormat @internalformat, int @width, int @height);

        public void TextureStorage2D(uint @texture, int @levels, GlInternalFormat @internalformat, int @width, int @height) {
            Native_TextureStorage2D(@texture, @levels, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorage2DEXT")]
        static extern void Native_TextureStorage2DEXT(uint @texture, uint @target, int @levels, GlInternalFormat @internalformat, int @width, int @height);

        public void TextureStorage2DEXT(uint @texture, uint @target, int @levels, GlInternalFormat @internalformat, int @width, int @height) {
            Native_TextureStorage2DEXT(@texture, @target, @levels, @internalformat, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorage2DMultisample")]
        static extern void Native_TextureStorage2DMultisample(uint @texture, int @samples, GlInternalFormat @internalformat, int @width, int @height, bool @fixedsamplelocations);

        public void TextureStorage2DMultisample(uint @texture, int @samples, GlInternalFormat @internalformat, int @width, int @height, bool @fixedsamplelocations) {
            Native_TextureStorage2DMultisample(@texture, @samples, @internalformat, @width, @height, @fixedsamplelocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorage2DMultisampleEXT")]
        static extern void Native_TextureStorage2DMultisampleEXT(uint @texture, GlTextureTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height, GlBoolean @fixedsamplelocations);

        public void TextureStorage2DMultisampleEXT(uint @texture, GlTextureTarget @target, int @samples, GlInternalFormat @internalformat, int @width, int @height, GlBoolean @fixedsamplelocations) {
            Native_TextureStorage2DMultisampleEXT(@texture, @target, @samples, @internalformat, @width, @height, @fixedsamplelocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorage3D")]
        static extern void Native_TextureStorage3D(uint @texture, int @levels, GlInternalFormat @internalformat, int @width, int @height, int @depth);

        public void TextureStorage3D(uint @texture, int @levels, GlInternalFormat @internalformat, int @width, int @height, int @depth) {
            Native_TextureStorage3D(@texture, @levels, @internalformat, @width, @height, @depth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorage3DEXT")]
        static extern void Native_TextureStorage3DEXT(uint @texture, uint @target, int @levels, GlInternalFormat @internalformat, int @width, int @height, int @depth);

        public void TextureStorage3DEXT(uint @texture, uint @target, int @levels, GlInternalFormat @internalformat, int @width, int @height, int @depth) {
            Native_TextureStorage3DEXT(@texture, @target, @levels, @internalformat, @width, @height, @depth);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorage3DMultisample")]
        static extern void Native_TextureStorage3DMultisample(uint @texture, int @samples, GlInternalFormat @internalformat, int @width, int @height, int @depth, bool @fixedsamplelocations);

        public void TextureStorage3DMultisample(uint @texture, int @samples, GlInternalFormat @internalformat, int @width, int @height, int @depth, bool @fixedsamplelocations) {
            Native_TextureStorage3DMultisample(@texture, @samples, @internalformat, @width, @height, @depth, @fixedsamplelocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorage3DMultisampleEXT")]
        static extern void Native_TextureStorage3DMultisampleEXT(uint @texture, uint @target, int @samples, GlInternalFormat @internalformat, int @width, int @height, int @depth, GlBoolean @fixedsamplelocations);

        public void TextureStorage3DMultisampleEXT(uint @texture, uint @target, int @samples, GlInternalFormat @internalformat, int @width, int @height, int @depth, GlBoolean @fixedsamplelocations) {
            Native_TextureStorage3DMultisampleEXT(@texture, @target, @samples, @internalformat, @width, @height, @depth, @fixedsamplelocations);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorageMem1DEXT")]
        static extern void Native_TextureStorageMem1DEXT(uint @texture, int @levels, uint @internalFormat, int @width, uint @memory, ulong @offset);

        public void TextureStorageMem1DEXT(uint @texture, int @levels, uint @internalFormat, int @width, uint @memory, ulong @offset) {
            Native_TextureStorageMem1DEXT(@texture, @levels, @internalFormat, @width, @memory, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorageMem2DEXT")]
        static extern void Native_TextureStorageMem2DEXT(uint @texture, int @levels, uint @internalFormat, int @width, int @height, uint @memory, ulong @offset);

        public void TextureStorageMem2DEXT(uint @texture, int @levels, uint @internalFormat, int @width, int @height, uint @memory, ulong @offset) {
            Native_TextureStorageMem2DEXT(@texture, @levels, @internalFormat, @width, @height, @memory, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorageMem2DMultisampleEXT")]
        static extern void Native_TextureStorageMem2DMultisampleEXT(uint @texture, int @samples, uint @internalFormat, int @width, int @height, bool @fixedSampleLocations, uint @memory, ulong @offset);

        public void TextureStorageMem2DMultisampleEXT(uint @texture, int @samples, uint @internalFormat, int @width, int @height, bool @fixedSampleLocations, uint @memory, ulong @offset) {
            Native_TextureStorageMem2DMultisampleEXT(@texture, @samples, @internalFormat, @width, @height, @fixedSampleLocations, @memory, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorageMem3DEXT")]
        static extern void Native_TextureStorageMem3DEXT(uint @texture, int @levels, uint @internalFormat, int @width, int @height, int @depth, uint @memory, ulong @offset);

        public void TextureStorageMem3DEXT(uint @texture, int @levels, uint @internalFormat, int @width, int @height, int @depth, uint @memory, ulong @offset) {
            Native_TextureStorageMem3DEXT(@texture, @levels, @internalFormat, @width, @height, @depth, @memory, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorageMem3DMultisampleEXT")]
        static extern void Native_TextureStorageMem3DMultisampleEXT(uint @texture, int @samples, uint @internalFormat, int @width, int @height, int @depth, bool @fixedSampleLocations, uint @memory, ulong @offset);

        public void TextureStorageMem3DMultisampleEXT(uint @texture, int @samples, uint @internalFormat, int @width, int @height, int @depth, bool @fixedSampleLocations, uint @memory, ulong @offset) {
            Native_TextureStorageMem3DMultisampleEXT(@texture, @samples, @internalFormat, @width, @height, @depth, @fixedSampleLocations, @memory, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureStorageSparseAMD")]
        static extern void Native_TextureStorageSparseAMD(uint @texture, uint @target, GlInternalFormat @internalFormat, int @width, int @height, int @depth, int @layers, GlTextureStorageMaskAMD @flags);

        public void TextureStorageSparseAMD(uint @texture, uint @target, GlInternalFormat @internalFormat, int @width, int @height, int @depth, int @layers, GlTextureStorageMaskAMD @flags) {
            Native_TextureStorageSparseAMD(@texture, @target, @internalFormat, @width, @height, @depth, @layers, @flags);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureSubImage1D")]
        static extern void Native_TextureSubImage1D(uint @texture, int @level, int @xoffset, int @width, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TextureSubImage1D(uint @texture, int @level, int @xoffset, int @width, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TextureSubImage1D(@texture, @level, @xoffset, @width, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureSubImage1DEXT")]
        static extern void Native_TextureSubImage1DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TextureSubImage1DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @width, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TextureSubImage1DEXT(@texture, @target, @level, @xoffset, @width, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureSubImage2D")]
        static extern void Native_TextureSubImage2D(uint @texture, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TextureSubImage2D(uint @texture, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TextureSubImage2D(@texture, @level, @xoffset, @yoffset, @width, @height, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureSubImage2DEXT")]
        static extern void Native_TextureSubImage2DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TextureSubImage2DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @width, int @height, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TextureSubImage2DEXT(@texture, @target, @level, @xoffset, @yoffset, @width, @height, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureSubImage3D")]
        static extern void Native_TextureSubImage3D(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TextureSubImage3D(uint @texture, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TextureSubImage3D(@texture, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureSubImage3DEXT")]
        static extern void Native_TextureSubImage3DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte* @pixels);

        public void TextureSubImage3DEXT(uint @texture, GlTextureTarget @target, int @level, int @xoffset, int @yoffset, int @zoffset, int @width, int @height, int @depth, GlPixelFormat @format, GlPixelType @type, byte[] @pixels) {
            fixed (byte *ptr_pixels = @pixels) {
                Native_TextureSubImage3DEXT(@texture, @target, @level, @xoffset, @yoffset, @zoffset, @width, @height, @depth, @format, @type, @ptr_pixels);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureView")]
        static extern void Native_TextureView(uint @texture, GlTextureTarget @target, uint @origtexture, GlInternalFormat @internalformat, uint @minlevel, uint @numlevels, uint @minlayer, uint @numlayers);

        public void TextureView(uint @texture, GlTextureTarget @target, uint @origtexture, GlInternalFormat @internalformat, uint @minlevel, uint @numlevels, uint @minlayer, uint @numlayers) {
            Native_TextureView(@texture, @target, @origtexture, @internalformat, @minlevel, @numlevels, @minlayer, @numlayers);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureViewEXT")]
        static extern void Native_TextureViewEXT(uint @texture, GlTextureTarget @target, uint @origtexture, GlInternalFormat @internalformat, uint @minlevel, uint @numlevels, uint @minlayer, uint @numlayers);

        public void TextureViewEXT(uint @texture, GlTextureTarget @target, uint @origtexture, GlInternalFormat @internalformat, uint @minlevel, uint @numlevels, uint @minlayer, uint @numlayers) {
            Native_TextureViewEXT(@texture, @target, @origtexture, @internalformat, @minlevel, @numlevels, @minlayer, @numlayers);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTextureViewOES")]
        static extern void Native_TextureViewOES(uint @texture, GlTextureTarget @target, uint @origtexture, GlInternalFormat @internalformat, uint @minlevel, uint @numlevels, uint @minlayer, uint @numlayers);

        public void TextureViewOES(uint @texture, GlTextureTarget @target, uint @origtexture, GlInternalFormat @internalformat, uint @minlevel, uint @numlevels, uint @minlayer, uint @numlayers) {
            Native_TextureViewOES(@texture, @target, @origtexture, @internalformat, @minlevel, @numlevels, @minlayer, @numlayers);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTrackMatrixNV")]
        static extern void Native_TrackMatrixNV(uint @target, uint @address, uint @matrix, uint @transform);

        public void TrackMatrixNV(uint @target, uint @address, uint @matrix, uint @transform) {
            Native_TrackMatrixNV(@target, @address, @matrix, @transform);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTransformFeedbackAttribsNV")]
        static extern void Native_TransformFeedbackAttribsNV(int @count, int* @attribs, uint @bufferMode);

        public void TransformFeedbackAttribsNV(int @count, int[] @attribs, uint @bufferMode) {
            fixed (int *ptr_attribs = @attribs) {
                Native_TransformFeedbackAttribsNV(@count, @ptr_attribs, @bufferMode);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTransformFeedbackBufferBase")]
        static extern void Native_TransformFeedbackBufferBase(uint @xfb, uint @index, uint @buffer);

        public void TransformFeedbackBufferBase(uint @xfb, uint @index, uint @buffer) {
            Native_TransformFeedbackBufferBase(@xfb, @index, @buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTransformFeedbackBufferRange")]
        static extern void Native_TransformFeedbackBufferRange(uint @xfb, uint @index, uint @buffer, long @offset, long @size);

        public void TransformFeedbackBufferRange(uint @xfb, uint @index, uint @buffer, long @offset, long @size) {
            Native_TransformFeedbackBufferRange(@xfb, @index, @buffer, @offset, @size);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTransformFeedbackStreamAttribsNV")]
        static extern void Native_TransformFeedbackStreamAttribsNV(int @count, int* @attribs, int @nbuffers, int* @bufstreams, uint @bufferMode);

        public void TransformFeedbackStreamAttribsNV(int @count, int[] @attribs, int @nbuffers, int[] @bufstreams, uint @bufferMode) {
            fixed (int *ptr_attribs = @attribs) {
                fixed (int *ptr_bufstreams = @bufstreams) {
                    Native_TransformFeedbackStreamAttribsNV(@count, @ptr_attribs, @nbuffers, @ptr_bufstreams, @bufferMode);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTransformFeedbackVaryings")]
        static extern void Native_TransformFeedbackVaryings(uint @program, int @count, byte** @varyings, uint @bufferMode);

        public void TransformFeedbackVaryings(uint @program, int @count, byte[][] @varyings, uint @bufferMode) {
            IntPtr ptr_varyings = Marshal.AllocHGlobal(@varyings.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_varyings, @varyings, (void **) ptr_varyings.ToPointer(), 0, __fixedLocals => {
                    Native_TransformFeedbackVaryings(@program, @count, (byte **) ptr_varyings.ToPointer(), @bufferMode);
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_varyings);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTransformFeedbackVaryingsEXT")]
        static extern void Native_TransformFeedbackVaryingsEXT(uint @program, int @count, byte** @varyings, uint @bufferMode);

        public void TransformFeedbackVaryingsEXT(uint @program, int @count, byte[][] @varyings, uint @bufferMode) {
            IntPtr ptr_varyings = Marshal.AllocHGlobal(@varyings.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_varyings, @varyings, (void **) ptr_varyings.ToPointer(), 0, __fixedLocals => {
                    Native_TransformFeedbackVaryingsEXT(@program, @count, (byte **) ptr_varyings.ToPointer(), @bufferMode);
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_varyings);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTransformFeedbackVaryingsNV")]
        static extern void Native_TransformFeedbackVaryingsNV(uint @program, int @count, int* @locations, uint @bufferMode);

        public void TransformFeedbackVaryingsNV(uint @program, int @count, int[] @locations, uint @bufferMode) {
            fixed (int *ptr_locations = @locations) {
                Native_TransformFeedbackVaryingsNV(@program, @count, @ptr_locations, @bufferMode);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTransformPathNV")]
        static extern void Native_TransformPathNV(uint @resultPath, uint @srcPath, GlPathTransformType @transformType, float* @transformValues);

        public void TransformPathNV(uint @resultPath, uint @srcPath, GlPathTransformType @transformType, float[] @transformValues) {
            fixed (float *ptr_transformValues = @transformValues) {
                Native_TransformPathNV(@resultPath, @srcPath, @transformType, @ptr_transformValues);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTranslated")]
        static extern void Native_Translated(double @x, double @y, double @z);

        public void Translated(double @x, double @y, double @z) {
            Native_Translated(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTranslatef")]
        static extern void Native_Translatef(float @x, float @y, float @z);

        public void Translatef(float @x, float @y, float @z) {
            Native_Translatef(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTranslatex")]
        static extern void Native_Translatex(int @x, int @y, int @z);

        public void Translatex(int @x, int @y, int @z) {
            Native_Translatex(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glTranslatexOES")]
        static extern void Native_TranslatexOES(int @x, int @y, int @z);

        public void TranslatexOES(int @x, int @y, int @z) {
            Native_TranslatexOES(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1d")]
        static extern void Native_Uniform1d(int @location, double @x);

        public void Uniform1d(int @location, double @x) {
            Native_Uniform1d(@location, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1dv")]
        static extern void Native_Uniform1dv(int @location, int @count, double* @value);

        public void Uniform1dv(int @location, int @count, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_Uniform1dv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1f")]
        static extern void Native_Uniform1f(int @location, float @v0);

        public void Uniform1f(int @location, float @v0) {
            Native_Uniform1f(@location, @v0);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1fARB")]
        static extern void Native_Uniform1fARB(int @location, float @v0);

        public void Uniform1fARB(int @location, float @v0) {
            Native_Uniform1fARB(@location, @v0);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1fv")]
        static extern void Native_Uniform1fv(int @location, int @count, float* @value);

        public void Uniform1fv(int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_Uniform1fv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1fvARB")]
        static extern void Native_Uniform1fvARB(int @location, int @count, float* @value);

        public void Uniform1fvARB(int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_Uniform1fvARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1i")]
        static extern void Native_Uniform1i(int @location, int @v0);

        public void Uniform1i(int @location, int @v0) {
            Native_Uniform1i(@location, @v0);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1i64ARB")]
        static extern void Native_Uniform1i64ARB(int @location, long @x);

        public void Uniform1i64ARB(int @location, long @x) {
            Native_Uniform1i64ARB(@location, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1i64NV")]
        static extern void Native_Uniform1i64NV(int @location, long @x);

        public void Uniform1i64NV(int @location, long @x) {
            Native_Uniform1i64NV(@location, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1i64vARB")]
        static extern void Native_Uniform1i64vARB(int @location, int @count, long* @value);

        public void Uniform1i64vARB(int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_Uniform1i64vARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1i64vNV")]
        static extern void Native_Uniform1i64vNV(int @location, int @count, long* @value);

        public void Uniform1i64vNV(int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_Uniform1i64vNV(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1iARB")]
        static extern void Native_Uniform1iARB(int @location, int @v0);

        public void Uniform1iARB(int @location, int @v0) {
            Native_Uniform1iARB(@location, @v0);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1iv")]
        static extern void Native_Uniform1iv(int @location, int @count, int* @value);

        public void Uniform1iv(int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_Uniform1iv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1ivARB")]
        static extern void Native_Uniform1ivARB(int @location, int @count, int* @value);

        public void Uniform1ivARB(int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_Uniform1ivARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1ui")]
        static extern void Native_Uniform1ui(int @location, uint @v0);

        public void Uniform1ui(int @location, uint @v0) {
            Native_Uniform1ui(@location, @v0);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1ui64ARB")]
        static extern void Native_Uniform1ui64ARB(int @location, ulong @x);

        public void Uniform1ui64ARB(int @location, ulong @x) {
            Native_Uniform1ui64ARB(@location, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1ui64NV")]
        static extern void Native_Uniform1ui64NV(int @location, ulong @x);

        public void Uniform1ui64NV(int @location, ulong @x) {
            Native_Uniform1ui64NV(@location, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1ui64vARB")]
        static extern void Native_Uniform1ui64vARB(int @location, int @count, ulong* @value);

        public void Uniform1ui64vARB(int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_Uniform1ui64vARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1ui64vNV")]
        static extern void Native_Uniform1ui64vNV(int @location, int @count, ulong* @value);

        public void Uniform1ui64vNV(int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_Uniform1ui64vNV(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1uiEXT")]
        static extern void Native_Uniform1uiEXT(int @location, uint @v0);

        public void Uniform1uiEXT(int @location, uint @v0) {
            Native_Uniform1uiEXT(@location, @v0);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1uiv")]
        static extern void Native_Uniform1uiv(int @location, int @count, uint* @value);

        public void Uniform1uiv(int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_Uniform1uiv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform1uivEXT")]
        static extern void Native_Uniform1uivEXT(int @location, int @count, uint* @value);

        public void Uniform1uivEXT(int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_Uniform1uivEXT(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2d")]
        static extern void Native_Uniform2d(int @location, double @x, double @y);

        public void Uniform2d(int @location, double @x, double @y) {
            Native_Uniform2d(@location, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2dv")]
        static extern void Native_Uniform2dv(int @location, int @count, double* @value);

        public void Uniform2dv(int @location, int @count, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_Uniform2dv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2f")]
        static extern void Native_Uniform2f(int @location, float @v0, float @v1);

        public void Uniform2f(int @location, float @v0, float @v1) {
            Native_Uniform2f(@location, @v0, @v1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2fARB")]
        static extern void Native_Uniform2fARB(int @location, float @v0, float @v1);

        public void Uniform2fARB(int @location, float @v0, float @v1) {
            Native_Uniform2fARB(@location, @v0, @v1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2fv")]
        static extern void Native_Uniform2fv(int @location, int @count, float* @value);

        public void Uniform2fv(int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_Uniform2fv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2fvARB")]
        static extern void Native_Uniform2fvARB(int @location, int @count, float* @value);

        public void Uniform2fvARB(int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_Uniform2fvARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2i")]
        static extern void Native_Uniform2i(int @location, int @v0, int @v1);

        public void Uniform2i(int @location, int @v0, int @v1) {
            Native_Uniform2i(@location, @v0, @v1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2i64ARB")]
        static extern void Native_Uniform2i64ARB(int @location, long @x, long @y);

        public void Uniform2i64ARB(int @location, long @x, long @y) {
            Native_Uniform2i64ARB(@location, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2i64NV")]
        static extern void Native_Uniform2i64NV(int @location, long @x, long @y);

        public void Uniform2i64NV(int @location, long @x, long @y) {
            Native_Uniform2i64NV(@location, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2i64vARB")]
        static extern void Native_Uniform2i64vARB(int @location, int @count, long* @value);

        public void Uniform2i64vARB(int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_Uniform2i64vARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2i64vNV")]
        static extern void Native_Uniform2i64vNV(int @location, int @count, long* @value);

        public void Uniform2i64vNV(int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_Uniform2i64vNV(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2iARB")]
        static extern void Native_Uniform2iARB(int @location, int @v0, int @v1);

        public void Uniform2iARB(int @location, int @v0, int @v1) {
            Native_Uniform2iARB(@location, @v0, @v1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2iv")]
        static extern void Native_Uniform2iv(int @location, int @count, int* @value);

        public void Uniform2iv(int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_Uniform2iv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2ivARB")]
        static extern void Native_Uniform2ivARB(int @location, int @count, int* @value);

        public void Uniform2ivARB(int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_Uniform2ivARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2ui")]
        static extern void Native_Uniform2ui(int @location, uint @v0, uint @v1);

        public void Uniform2ui(int @location, uint @v0, uint @v1) {
            Native_Uniform2ui(@location, @v0, @v1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2ui64ARB")]
        static extern void Native_Uniform2ui64ARB(int @location, ulong @x, ulong @y);

        public void Uniform2ui64ARB(int @location, ulong @x, ulong @y) {
            Native_Uniform2ui64ARB(@location, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2ui64NV")]
        static extern void Native_Uniform2ui64NV(int @location, ulong @x, ulong @y);

        public void Uniform2ui64NV(int @location, ulong @x, ulong @y) {
            Native_Uniform2ui64NV(@location, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2ui64vARB")]
        static extern void Native_Uniform2ui64vARB(int @location, int @count, ulong* @value);

        public void Uniform2ui64vARB(int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_Uniform2ui64vARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2ui64vNV")]
        static extern void Native_Uniform2ui64vNV(int @location, int @count, ulong* @value);

        public void Uniform2ui64vNV(int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_Uniform2ui64vNV(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2uiEXT")]
        static extern void Native_Uniform2uiEXT(int @location, uint @v0, uint @v1);

        public void Uniform2uiEXT(int @location, uint @v0, uint @v1) {
            Native_Uniform2uiEXT(@location, @v0, @v1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2uiv")]
        static extern void Native_Uniform2uiv(int @location, int @count, uint* @value);

        public void Uniform2uiv(int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_Uniform2uiv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform2uivEXT")]
        static extern void Native_Uniform2uivEXT(int @location, int @count, uint* @value);

        public void Uniform2uivEXT(int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_Uniform2uivEXT(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3d")]
        static extern void Native_Uniform3d(int @location, double @x, double @y, double @z);

        public void Uniform3d(int @location, double @x, double @y, double @z) {
            Native_Uniform3d(@location, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3dv")]
        static extern void Native_Uniform3dv(int @location, int @count, double* @value);

        public void Uniform3dv(int @location, int @count, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_Uniform3dv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3f")]
        static extern void Native_Uniform3f(int @location, float @v0, float @v1, float @v2);

        public void Uniform3f(int @location, float @v0, float @v1, float @v2) {
            Native_Uniform3f(@location, @v0, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3fARB")]
        static extern void Native_Uniform3fARB(int @location, float @v0, float @v1, float @v2);

        public void Uniform3fARB(int @location, float @v0, float @v1, float @v2) {
            Native_Uniform3fARB(@location, @v0, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3fv")]
        static extern void Native_Uniform3fv(int @location, int @count, float* @value);

        public void Uniform3fv(int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_Uniform3fv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3fvARB")]
        static extern void Native_Uniform3fvARB(int @location, int @count, float* @value);

        public void Uniform3fvARB(int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_Uniform3fvARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3i")]
        static extern void Native_Uniform3i(int @location, int @v0, int @v1, int @v2);

        public void Uniform3i(int @location, int @v0, int @v1, int @v2) {
            Native_Uniform3i(@location, @v0, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3i64ARB")]
        static extern void Native_Uniform3i64ARB(int @location, long @x, long @y, long @z);

        public void Uniform3i64ARB(int @location, long @x, long @y, long @z) {
            Native_Uniform3i64ARB(@location, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3i64NV")]
        static extern void Native_Uniform3i64NV(int @location, long @x, long @y, long @z);

        public void Uniform3i64NV(int @location, long @x, long @y, long @z) {
            Native_Uniform3i64NV(@location, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3i64vARB")]
        static extern void Native_Uniform3i64vARB(int @location, int @count, long* @value);

        public void Uniform3i64vARB(int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_Uniform3i64vARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3i64vNV")]
        static extern void Native_Uniform3i64vNV(int @location, int @count, long* @value);

        public void Uniform3i64vNV(int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_Uniform3i64vNV(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3iARB")]
        static extern void Native_Uniform3iARB(int @location, int @v0, int @v1, int @v2);

        public void Uniform3iARB(int @location, int @v0, int @v1, int @v2) {
            Native_Uniform3iARB(@location, @v0, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3iv")]
        static extern void Native_Uniform3iv(int @location, int @count, int* @value);

        public void Uniform3iv(int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_Uniform3iv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3ivARB")]
        static extern void Native_Uniform3ivARB(int @location, int @count, int* @value);

        public void Uniform3ivARB(int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_Uniform3ivARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3ui")]
        static extern void Native_Uniform3ui(int @location, uint @v0, uint @v1, uint @v2);

        public void Uniform3ui(int @location, uint @v0, uint @v1, uint @v2) {
            Native_Uniform3ui(@location, @v0, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3ui64ARB")]
        static extern void Native_Uniform3ui64ARB(int @location, ulong @x, ulong @y, ulong @z);

        public void Uniform3ui64ARB(int @location, ulong @x, ulong @y, ulong @z) {
            Native_Uniform3ui64ARB(@location, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3ui64NV")]
        static extern void Native_Uniform3ui64NV(int @location, ulong @x, ulong @y, ulong @z);

        public void Uniform3ui64NV(int @location, ulong @x, ulong @y, ulong @z) {
            Native_Uniform3ui64NV(@location, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3ui64vARB")]
        static extern void Native_Uniform3ui64vARB(int @location, int @count, ulong* @value);

        public void Uniform3ui64vARB(int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_Uniform3ui64vARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3ui64vNV")]
        static extern void Native_Uniform3ui64vNV(int @location, int @count, ulong* @value);

        public void Uniform3ui64vNV(int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_Uniform3ui64vNV(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3uiEXT")]
        static extern void Native_Uniform3uiEXT(int @location, uint @v0, uint @v1, uint @v2);

        public void Uniform3uiEXT(int @location, uint @v0, uint @v1, uint @v2) {
            Native_Uniform3uiEXT(@location, @v0, @v1, @v2);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3uiv")]
        static extern void Native_Uniform3uiv(int @location, int @count, uint* @value);

        public void Uniform3uiv(int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_Uniform3uiv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform3uivEXT")]
        static extern void Native_Uniform3uivEXT(int @location, int @count, uint* @value);

        public void Uniform3uivEXT(int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_Uniform3uivEXT(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4d")]
        static extern void Native_Uniform4d(int @location, double @x, double @y, double @z, double @w);

        public void Uniform4d(int @location, double @x, double @y, double @z, double @w) {
            Native_Uniform4d(@location, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4dv")]
        static extern void Native_Uniform4dv(int @location, int @count, double* @value);

        public void Uniform4dv(int @location, int @count, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_Uniform4dv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4f")]
        static extern void Native_Uniform4f(int @location, float @v0, float @v1, float @v2, float @v3);

        public void Uniform4f(int @location, float @v0, float @v1, float @v2, float @v3) {
            Native_Uniform4f(@location, @v0, @v1, @v2, @v3);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4fARB")]
        static extern void Native_Uniform4fARB(int @location, float @v0, float @v1, float @v2, float @v3);

        public void Uniform4fARB(int @location, float @v0, float @v1, float @v2, float @v3) {
            Native_Uniform4fARB(@location, @v0, @v1, @v2, @v3);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4fv")]
        static extern void Native_Uniform4fv(int @location, int @count, float* @value);

        public void Uniform4fv(int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_Uniform4fv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4fvARB")]
        static extern void Native_Uniform4fvARB(int @location, int @count, float* @value);

        public void Uniform4fvARB(int @location, int @count, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_Uniform4fvARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4i")]
        static extern void Native_Uniform4i(int @location, int @v0, int @v1, int @v2, int @v3);

        public void Uniform4i(int @location, int @v0, int @v1, int @v2, int @v3) {
            Native_Uniform4i(@location, @v0, @v1, @v2, @v3);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4i64ARB")]
        static extern void Native_Uniform4i64ARB(int @location, long @x, long @y, long @z, long @w);

        public void Uniform4i64ARB(int @location, long @x, long @y, long @z, long @w) {
            Native_Uniform4i64ARB(@location, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4i64NV")]
        static extern void Native_Uniform4i64NV(int @location, long @x, long @y, long @z, long @w);

        public void Uniform4i64NV(int @location, long @x, long @y, long @z, long @w) {
            Native_Uniform4i64NV(@location, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4i64vARB")]
        static extern void Native_Uniform4i64vARB(int @location, int @count, long* @value);

        public void Uniform4i64vARB(int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_Uniform4i64vARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4i64vNV")]
        static extern void Native_Uniform4i64vNV(int @location, int @count, long* @value);

        public void Uniform4i64vNV(int @location, int @count, long[] @value) {
            fixed (long *ptr_value = @value) {
                Native_Uniform4i64vNV(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4iARB")]
        static extern void Native_Uniform4iARB(int @location, int @v0, int @v1, int @v2, int @v3);

        public void Uniform4iARB(int @location, int @v0, int @v1, int @v2, int @v3) {
            Native_Uniform4iARB(@location, @v0, @v1, @v2, @v3);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4iv")]
        static extern void Native_Uniform4iv(int @location, int @count, int* @value);

        public void Uniform4iv(int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_Uniform4iv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4ivARB")]
        static extern void Native_Uniform4ivARB(int @location, int @count, int* @value);

        public void Uniform4ivARB(int @location, int @count, int[] @value) {
            fixed (int *ptr_value = @value) {
                Native_Uniform4ivARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4ui")]
        static extern void Native_Uniform4ui(int @location, uint @v0, uint @v1, uint @v2, uint @v3);

        public void Uniform4ui(int @location, uint @v0, uint @v1, uint @v2, uint @v3) {
            Native_Uniform4ui(@location, @v0, @v1, @v2, @v3);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4ui64ARB")]
        static extern void Native_Uniform4ui64ARB(int @location, ulong @x, ulong @y, ulong @z, ulong @w);

        public void Uniform4ui64ARB(int @location, ulong @x, ulong @y, ulong @z, ulong @w) {
            Native_Uniform4ui64ARB(@location, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4ui64NV")]
        static extern void Native_Uniform4ui64NV(int @location, ulong @x, ulong @y, ulong @z, ulong @w);

        public void Uniform4ui64NV(int @location, ulong @x, ulong @y, ulong @z, ulong @w) {
            Native_Uniform4ui64NV(@location, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4ui64vARB")]
        static extern void Native_Uniform4ui64vARB(int @location, int @count, ulong* @value);

        public void Uniform4ui64vARB(int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_Uniform4ui64vARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4ui64vNV")]
        static extern void Native_Uniform4ui64vNV(int @location, int @count, ulong* @value);

        public void Uniform4ui64vNV(int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_Uniform4ui64vNV(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4uiEXT")]
        static extern void Native_Uniform4uiEXT(int @location, uint @v0, uint @v1, uint @v2, uint @v3);

        public void Uniform4uiEXT(int @location, uint @v0, uint @v1, uint @v2, uint @v3) {
            Native_Uniform4uiEXT(@location, @v0, @v1, @v2, @v3);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4uiv")]
        static extern void Native_Uniform4uiv(int @location, int @count, uint* @value);

        public void Uniform4uiv(int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_Uniform4uiv(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniform4uivEXT")]
        static extern void Native_Uniform4uivEXT(int @location, int @count, uint* @value);

        public void Uniform4uivEXT(int @location, int @count, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_Uniform4uivEXT(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformBlockBinding")]
        static extern void Native_UniformBlockBinding(uint @program, uint @uniformBlockIndex, uint @uniformBlockBinding);

        public void UniformBlockBinding(uint @program, uint @uniformBlockIndex, uint @uniformBlockBinding) {
            Native_UniformBlockBinding(@program, @uniformBlockIndex, @uniformBlockBinding);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformBufferEXT")]
        static extern void Native_UniformBufferEXT(uint @program, int @location, uint @buffer);

        public void UniformBufferEXT(uint @program, int @location, uint @buffer) {
            Native_UniformBufferEXT(@program, @location, @buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformHandleui64ARB")]
        static extern void Native_UniformHandleui64ARB(int @location, ulong @value);

        public void UniformHandleui64ARB(int @location, ulong @value) {
            Native_UniformHandleui64ARB(@location, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformHandleui64IMG")]
        static extern void Native_UniformHandleui64IMG(int @location, ulong @value);

        public void UniformHandleui64IMG(int @location, ulong @value) {
            Native_UniformHandleui64IMG(@location, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformHandleui64NV")]
        static extern void Native_UniformHandleui64NV(int @location, ulong @value);

        public void UniformHandleui64NV(int @location, ulong @value) {
            Native_UniformHandleui64NV(@location, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformHandleui64vARB")]
        static extern void Native_UniformHandleui64vARB(int @location, int @count, ulong* @value);

        public void UniformHandleui64vARB(int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_UniformHandleui64vARB(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformHandleui64vIMG")]
        static extern void Native_UniformHandleui64vIMG(int @location, int @count, ulong* @value);

        public void UniformHandleui64vIMG(int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_UniformHandleui64vIMG(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformHandleui64vNV")]
        static extern void Native_UniformHandleui64vNV(int @location, int @count, ulong* @value);

        public void UniformHandleui64vNV(int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_UniformHandleui64vNV(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix2dv")]
        static extern void Native_UniformMatrix2dv(int @location, int @count, GlBoolean @transpose, double* @value);

        public void UniformMatrix2dv(int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_UniformMatrix2dv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix2fv")]
        static extern void Native_UniformMatrix2fv(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix2fv(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix2fv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix2fvARB")]
        static extern void Native_UniformMatrix2fvARB(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix2fvARB(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix2fvARB(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix2x3dv")]
        static extern void Native_UniformMatrix2x3dv(int @location, int @count, GlBoolean @transpose, double* @value);

        public void UniformMatrix2x3dv(int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_UniformMatrix2x3dv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix2x3fv")]
        static extern void Native_UniformMatrix2x3fv(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix2x3fv(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix2x3fv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix2x3fvNV")]
        static extern void Native_UniformMatrix2x3fvNV(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix2x3fvNV(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix2x3fvNV(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix2x4dv")]
        static extern void Native_UniformMatrix2x4dv(int @location, int @count, GlBoolean @transpose, double* @value);

        public void UniformMatrix2x4dv(int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_UniformMatrix2x4dv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix2x4fv")]
        static extern void Native_UniformMatrix2x4fv(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix2x4fv(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix2x4fv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix2x4fvNV")]
        static extern void Native_UniformMatrix2x4fvNV(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix2x4fvNV(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix2x4fvNV(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix3dv")]
        static extern void Native_UniformMatrix3dv(int @location, int @count, GlBoolean @transpose, double* @value);

        public void UniformMatrix3dv(int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_UniformMatrix3dv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix3fv")]
        static extern void Native_UniformMatrix3fv(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix3fv(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix3fv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix3fvARB")]
        static extern void Native_UniformMatrix3fvARB(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix3fvARB(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix3fvARB(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix3x2dv")]
        static extern void Native_UniformMatrix3x2dv(int @location, int @count, GlBoolean @transpose, double* @value);

        public void UniformMatrix3x2dv(int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_UniformMatrix3x2dv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix3x2fv")]
        static extern void Native_UniformMatrix3x2fv(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix3x2fv(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix3x2fv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix3x2fvNV")]
        static extern void Native_UniformMatrix3x2fvNV(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix3x2fvNV(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix3x2fvNV(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix3x4dv")]
        static extern void Native_UniformMatrix3x4dv(int @location, int @count, GlBoolean @transpose, double* @value);

        public void UniformMatrix3x4dv(int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_UniformMatrix3x4dv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix3x4fv")]
        static extern void Native_UniformMatrix3x4fv(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix3x4fv(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix3x4fv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix3x4fvNV")]
        static extern void Native_UniformMatrix3x4fvNV(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix3x4fvNV(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix3x4fvNV(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix4dv")]
        static extern void Native_UniformMatrix4dv(int @location, int @count, GlBoolean @transpose, double* @value);

        public void UniformMatrix4dv(int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_UniformMatrix4dv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix4fv")]
        static extern void Native_UniformMatrix4fv(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix4fv(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix4fv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix4fvARB")]
        static extern void Native_UniformMatrix4fvARB(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix4fvARB(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix4fvARB(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix4x2dv")]
        static extern void Native_UniformMatrix4x2dv(int @location, int @count, GlBoolean @transpose, double* @value);

        public void UniformMatrix4x2dv(int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_UniformMatrix4x2dv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix4x2fv")]
        static extern void Native_UniformMatrix4x2fv(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix4x2fv(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix4x2fv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix4x2fvNV")]
        static extern void Native_UniformMatrix4x2fvNV(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix4x2fvNV(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix4x2fvNV(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix4x3dv")]
        static extern void Native_UniformMatrix4x3dv(int @location, int @count, GlBoolean @transpose, double* @value);

        public void UniformMatrix4x3dv(int @location, int @count, GlBoolean @transpose, double[] @value) {
            fixed (double *ptr_value = @value) {
                Native_UniformMatrix4x3dv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix4x3fv")]
        static extern void Native_UniformMatrix4x3fv(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix4x3fv(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix4x3fv(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformMatrix4x3fvNV")]
        static extern void Native_UniformMatrix4x3fvNV(int @location, int @count, GlBoolean @transpose, float* @value);

        public void UniformMatrix4x3fvNV(int @location, int @count, GlBoolean @transpose, float[] @value) {
            fixed (float *ptr_value = @value) {
                Native_UniformMatrix4x3fvNV(@location, @count, @transpose, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformSubroutinesuiv")]
        static extern void Native_UniformSubroutinesuiv(GlShaderType @shadertype, int @count, uint* @indices);

        public void UniformSubroutinesuiv(GlShaderType @shadertype, int @count, uint[] @indices) {
            fixed (uint *ptr_indices = @indices) {
                Native_UniformSubroutinesuiv(@shadertype, @count, @ptr_indices);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformui64NV")]
        static extern void Native_Uniformui64NV(int @location, ulong @value);

        public void Uniformui64NV(int @location, ulong @value) {
            Native_Uniformui64NV(@location, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUniformui64vNV")]
        static extern void Native_Uniformui64vNV(int @location, int @count, ulong* @value);

        public void Uniformui64vNV(int @location, int @count, ulong[] @value) {
            fixed (ulong *ptr_value = @value) {
                Native_Uniformui64vNV(@location, @count, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUnlockArraysEXT")]
        static extern void Native_UnlockArraysEXT();

        public void UnlockArraysEXT() {
            Native_UnlockArraysEXT();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUnmapBuffer")]
        static extern bool Native_UnmapBuffer(GlBufferTargetARB @target);

        public bool UnmapBuffer(GlBufferTargetARB @target) {
            return Native_UnmapBuffer(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUnmapBufferARB")]
        static extern bool Native_UnmapBufferARB(GlBufferTargetARB @target);

        public bool UnmapBufferARB(GlBufferTargetARB @target) {
            return Native_UnmapBufferARB(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUnmapBufferOES")]
        static extern bool Native_UnmapBufferOES(uint @target);

        public bool UnmapBufferOES(uint @target) {
            return Native_UnmapBufferOES(@target);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUnmapNamedBuffer")]
        static extern bool Native_UnmapNamedBuffer(uint @buffer);

        public bool UnmapNamedBuffer(uint @buffer) {
            return Native_UnmapNamedBuffer(@buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUnmapNamedBufferEXT")]
        static extern bool Native_UnmapNamedBufferEXT(uint @buffer);

        public bool UnmapNamedBufferEXT(uint @buffer) {
            return Native_UnmapNamedBufferEXT(@buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUnmapObjectBufferATI")]
        static extern void Native_UnmapObjectBufferATI(uint @buffer);

        public void UnmapObjectBufferATI(uint @buffer) {
            Native_UnmapObjectBufferATI(@buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUnmapTexture2DINTEL")]
        static extern void Native_UnmapTexture2DINTEL(uint @texture, int @level);

        public void UnmapTexture2DINTEL(uint @texture, int @level) {
            Native_UnmapTexture2DINTEL(@texture, @level);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUpdateObjectBufferATI")]
        static extern void Native_UpdateObjectBufferATI(uint @buffer, uint @offset, int @size, byte* @pointer, uint @preserve);

        public void UpdateObjectBufferATI(uint @buffer, uint @offset, int @size, byte[] @pointer, uint @preserve) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_UpdateObjectBufferATI(@buffer, @offset, @size, @ptr_pointer, @preserve);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUseProgram")]
        static extern void Native_UseProgram(uint @program);

        public void UseProgram(uint @program) {
            Native_UseProgram(@program);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUseProgramObjectARB")]
        static extern void Native_UseProgramObjectARB(IntPtr @programObj);

        public void UseProgramObjectARB(IntPtr @programObj) {
            Native_UseProgramObjectARB(@programObj);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUseProgramStages")]
        static extern void Native_UseProgramStages(uint @pipeline, GlUseProgramStageMask @stages, uint @program);

        public void UseProgramStages(uint @pipeline, GlUseProgramStageMask @stages, uint @program) {
            Native_UseProgramStages(@pipeline, @stages, @program);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUseProgramStagesEXT")]
        static extern void Native_UseProgramStagesEXT(uint @pipeline, GlUseProgramStageMask @stages, uint @program);

        public void UseProgramStagesEXT(uint @pipeline, GlUseProgramStageMask @stages, uint @program) {
            Native_UseProgramStagesEXT(@pipeline, @stages, @program);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glUseShaderProgramEXT")]
        static extern void Native_UseShaderProgramEXT(uint @type, uint @program);

        public void UseShaderProgramEXT(uint @type, uint @program) {
            Native_UseShaderProgramEXT(@type, @program);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVDPAUFiniNV")]
        static extern void Native_VDPAUFiniNV();

        public void VDPAUFiniNV() {
            Native_VDPAUFiniNV();
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVDPAUGetSurfaceivNV")]
        static extern void Native_VDPAUGetSurfaceivNV(long @surface, uint @pname, int @bufSize, int* @length, int* @values);

        public void VDPAUGetSurfaceivNV(long @surface, uint @pname, int @bufSize, int[] @length, int[] @values) {
            fixed (int *ptr_length = @length) {
                fixed (int *ptr_values = @values) {
                    Native_VDPAUGetSurfaceivNV(@surface, @pname, @bufSize, @ptr_length, @ptr_values);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVDPAUInitNV")]
        static extern void Native_VDPAUInitNV(byte* @vdpDevice, byte* @getProcAddress);

        public void VDPAUInitNV(byte[] @vdpDevice, byte[] @getProcAddress) {
            fixed (byte *ptr_vdpDevice = @vdpDevice) {
                fixed (byte *ptr_getProcAddress = @getProcAddress) {
                    Native_VDPAUInitNV(@ptr_vdpDevice, @ptr_getProcAddress);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVDPAUIsSurfaceNV")]
        static extern bool Native_VDPAUIsSurfaceNV(long @surface);

        public bool VDPAUIsSurfaceNV(long @surface) {
            return Native_VDPAUIsSurfaceNV(@surface);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVDPAUMapSurfacesNV")]
        static extern void Native_VDPAUMapSurfacesNV(int @numSurfaces, long* @surfaces);

        public void VDPAUMapSurfacesNV(int @numSurfaces, long[] @surfaces) {
            fixed (long *ptr_surfaces = @surfaces) {
                Native_VDPAUMapSurfacesNV(@numSurfaces, @ptr_surfaces);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
        static extern long Native_VDPAURegisterOutputSurfaceNV(byte* @vdpSurface, uint @target, int @numTextureNames, uint* @textureNames);

        public long VDPAURegisterOutputSurfaceNV(byte[] @vdpSurface, uint @target, int @numTextureNames, uint[] @textureNames) {
            fixed (byte *ptr_vdpSurface = @vdpSurface) {
                fixed (uint *ptr_textureNames = @textureNames) {
                    return Native_VDPAURegisterOutputSurfaceNV(@ptr_vdpSurface, @target, @numTextureNames, @ptr_textureNames);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
        static extern long Native_VDPAURegisterVideoSurfaceNV(byte* @vdpSurface, uint @target, int @numTextureNames, uint* @textureNames);

        public long VDPAURegisterVideoSurfaceNV(byte[] @vdpSurface, uint @target, int @numTextureNames, uint[] @textureNames) {
            fixed (byte *ptr_vdpSurface = @vdpSurface) {
                fixed (uint *ptr_textureNames = @textureNames) {
                    return Native_VDPAURegisterVideoSurfaceNV(@ptr_vdpSurface, @target, @numTextureNames, @ptr_textureNames);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVDPAUSurfaceAccessNV")]
        static extern void Native_VDPAUSurfaceAccessNV(long @surface, uint @access);

        public void VDPAUSurfaceAccessNV(long @surface, uint @access) {
            Native_VDPAUSurfaceAccessNV(@surface, @access);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVDPAUUnmapSurfacesNV")]
        static extern void Native_VDPAUUnmapSurfacesNV(int @numSurface, long* @surfaces);

        public void VDPAUUnmapSurfacesNV(int @numSurface, long[] @surfaces) {
            fixed (long *ptr_surfaces = @surfaces) {
                Native_VDPAUUnmapSurfacesNV(@numSurface, @ptr_surfaces);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVDPAUUnregisterSurfaceNV")]
        static extern void Native_VDPAUUnregisterSurfaceNV(long @surface);

        public void VDPAUUnregisterSurfaceNV(long @surface) {
            Native_VDPAUUnregisterSurfaceNV(@surface);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glValidateProgram")]
        static extern void Native_ValidateProgram(uint @program);

        public void ValidateProgram(uint @program) {
            Native_ValidateProgram(@program);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glValidateProgramARB")]
        static extern void Native_ValidateProgramARB(IntPtr @programObj);

        public void ValidateProgramARB(IntPtr @programObj) {
            Native_ValidateProgramARB(@programObj);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glValidateProgramPipeline")]
        static extern void Native_ValidateProgramPipeline(uint @pipeline);

        public void ValidateProgramPipeline(uint @pipeline) {
            Native_ValidateProgramPipeline(@pipeline);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glValidateProgramPipelineEXT")]
        static extern void Native_ValidateProgramPipelineEXT(uint @pipeline);

        public void ValidateProgramPipelineEXT(uint @pipeline) {
            Native_ValidateProgramPipelineEXT(@pipeline);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVariantArrayObjectATI")]
        static extern void Native_VariantArrayObjectATI(uint @id, uint @type, int @stride, uint @buffer, uint @offset);

        public void VariantArrayObjectATI(uint @id, uint @type, int @stride, uint @buffer, uint @offset) {
            Native_VariantArrayObjectATI(@id, @type, @stride, @buffer, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVariantPointerEXT")]
        static extern void Native_VariantPointerEXT(uint @id, uint @type, uint @stride, byte* @addr);

        public void VariantPointerEXT(uint @id, uint @type, uint @stride, byte[] @addr) {
            fixed (byte *ptr_addr = @addr) {
                Native_VariantPointerEXT(@id, @type, @stride, @ptr_addr);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVariantbvEXT")]
        static extern void Native_VariantbvEXT(uint @id, sbyte* @addr);

        public void VariantbvEXT(uint @id, sbyte[] @addr) {
            fixed (sbyte *ptr_addr = @addr) {
                Native_VariantbvEXT(@id, @ptr_addr);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVariantdvEXT")]
        static extern void Native_VariantdvEXT(uint @id, double* @addr);

        public void VariantdvEXT(uint @id, double[] @addr) {
            fixed (double *ptr_addr = @addr) {
                Native_VariantdvEXT(@id, @ptr_addr);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVariantfvEXT")]
        static extern void Native_VariantfvEXT(uint @id, float* @addr);

        public void VariantfvEXT(uint @id, float[] @addr) {
            fixed (float *ptr_addr = @addr) {
                Native_VariantfvEXT(@id, @ptr_addr);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVariantivEXT")]
        static extern void Native_VariantivEXT(uint @id, int* @addr);

        public void VariantivEXT(uint @id, int[] @addr) {
            fixed (int *ptr_addr = @addr) {
                Native_VariantivEXT(@id, @ptr_addr);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVariantsvEXT")]
        static extern void Native_VariantsvEXT(uint @id, short* @addr);

        public void VariantsvEXT(uint @id, short[] @addr) {
            fixed (short *ptr_addr = @addr) {
                Native_VariantsvEXT(@id, @ptr_addr);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVariantubvEXT")]
        static extern void Native_VariantubvEXT(uint @id, byte* @addr);

        public void VariantubvEXT(uint @id, byte[] @addr) {
            fixed (byte *ptr_addr = @addr) {
                Native_VariantubvEXT(@id, @ptr_addr);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVariantuivEXT")]
        static extern void Native_VariantuivEXT(uint @id, uint* @addr);

        public void VariantuivEXT(uint @id, uint[] @addr) {
            fixed (uint *ptr_addr = @addr) {
                Native_VariantuivEXT(@id, @ptr_addr);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVariantusvEXT")]
        static extern void Native_VariantusvEXT(uint @id, ushort* @addr);

        public void VariantusvEXT(uint @id, ushort[] @addr) {
            fixed (ushort *ptr_addr = @addr) {
                Native_VariantusvEXT(@id, @ptr_addr);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex2bOES")]
        static extern void Native_Vertex2bOES(sbyte @x, sbyte @y);

        public void Vertex2bOES(sbyte @x, sbyte @y) {
            Native_Vertex2bOES(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex2bvOES")]
        static extern void Native_Vertex2bvOES(sbyte* @coords);

        public void Vertex2bvOES(sbyte[] @coords) {
            fixed (sbyte *ptr_coords = @coords) {
                Native_Vertex2bvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex2d")]
        static extern void Native_Vertex2d(double @x, double @y);

        public void Vertex2d(double @x, double @y) {
            Native_Vertex2d(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex2dv")]
        static extern void Native_Vertex2dv(double* @v);

        public void Vertex2dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_Vertex2dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex2f")]
        static extern void Native_Vertex2f(float @x, float @y);

        public void Vertex2f(float @x, float @y) {
            Native_Vertex2f(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex2fv")]
        static extern void Native_Vertex2fv(float* @v);

        public void Vertex2fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_Vertex2fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex2hNV")]
        static extern void Native_Vertex2hNV(ushort @x, ushort @y);

        public void Vertex2hNV(ushort @x, ushort @y) {
            Native_Vertex2hNV(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex2hvNV")]
        static extern void Native_Vertex2hvNV(ushort* @v);

        public void Vertex2hvNV(ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_Vertex2hvNV(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex2i")]
        static extern void Native_Vertex2i(int @x, int @y);

        public void Vertex2i(int @x, int @y) {
            Native_Vertex2i(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex2iv")]
        static extern void Native_Vertex2iv(int* @v);

        public void Vertex2iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_Vertex2iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex2s")]
        static extern void Native_Vertex2s(short @x, short @y);

        public void Vertex2s(short @x, short @y) {
            Native_Vertex2s(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex2sv")]
        static extern void Native_Vertex2sv(short* @v);

        public void Vertex2sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_Vertex2sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex2xOES")]
        static extern void Native_Vertex2xOES(int @x);

        public void Vertex2xOES(int @x) {
            Native_Vertex2xOES(@x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex2xvOES")]
        static extern void Native_Vertex2xvOES(int* @coords);

        public void Vertex2xvOES(int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_Vertex2xvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex3bOES")]
        static extern void Native_Vertex3bOES(sbyte @x, sbyte @y, sbyte @z);

        public void Vertex3bOES(sbyte @x, sbyte @y, sbyte @z) {
            Native_Vertex3bOES(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex3bvOES")]
        static extern void Native_Vertex3bvOES(sbyte* @coords);

        public void Vertex3bvOES(sbyte[] @coords) {
            fixed (sbyte *ptr_coords = @coords) {
                Native_Vertex3bvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex3d")]
        static extern void Native_Vertex3d(double @x, double @y, double @z);

        public void Vertex3d(double @x, double @y, double @z) {
            Native_Vertex3d(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex3dv")]
        static extern void Native_Vertex3dv(double* @v);

        public void Vertex3dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_Vertex3dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex3f")]
        static extern void Native_Vertex3f(float @x, float @y, float @z);

        public void Vertex3f(float @x, float @y, float @z) {
            Native_Vertex3f(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex3fv")]
        static extern void Native_Vertex3fv(float* @v);

        public void Vertex3fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_Vertex3fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex3hNV")]
        static extern void Native_Vertex3hNV(ushort @x, ushort @y, ushort @z);

        public void Vertex3hNV(ushort @x, ushort @y, ushort @z) {
            Native_Vertex3hNV(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex3hvNV")]
        static extern void Native_Vertex3hvNV(ushort* @v);

        public void Vertex3hvNV(ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_Vertex3hvNV(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex3i")]
        static extern void Native_Vertex3i(int @x, int @y, int @z);

        public void Vertex3i(int @x, int @y, int @z) {
            Native_Vertex3i(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex3iv")]
        static extern void Native_Vertex3iv(int* @v);

        public void Vertex3iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_Vertex3iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex3s")]
        static extern void Native_Vertex3s(short @x, short @y, short @z);

        public void Vertex3s(short @x, short @y, short @z) {
            Native_Vertex3s(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex3sv")]
        static extern void Native_Vertex3sv(short* @v);

        public void Vertex3sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_Vertex3sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex3xOES")]
        static extern void Native_Vertex3xOES(int @x, int @y);

        public void Vertex3xOES(int @x, int @y) {
            Native_Vertex3xOES(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex3xvOES")]
        static extern void Native_Vertex3xvOES(int* @coords);

        public void Vertex3xvOES(int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_Vertex3xvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex4bOES")]
        static extern void Native_Vertex4bOES(sbyte @x, sbyte @y, sbyte @z, sbyte @w);

        public void Vertex4bOES(sbyte @x, sbyte @y, sbyte @z, sbyte @w) {
            Native_Vertex4bOES(@x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex4bvOES")]
        static extern void Native_Vertex4bvOES(sbyte* @coords);

        public void Vertex4bvOES(sbyte[] @coords) {
            fixed (sbyte *ptr_coords = @coords) {
                Native_Vertex4bvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex4d")]
        static extern void Native_Vertex4d(double @x, double @y, double @z, double @w);

        public void Vertex4d(double @x, double @y, double @z, double @w) {
            Native_Vertex4d(@x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex4dv")]
        static extern void Native_Vertex4dv(double* @v);

        public void Vertex4dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_Vertex4dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex4f")]
        static extern void Native_Vertex4f(float @x, float @y, float @z, float @w);

        public void Vertex4f(float @x, float @y, float @z, float @w) {
            Native_Vertex4f(@x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex4fv")]
        static extern void Native_Vertex4fv(float* @v);

        public void Vertex4fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_Vertex4fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex4hNV")]
        static extern void Native_Vertex4hNV(ushort @x, ushort @y, ushort @z, ushort @w);

        public void Vertex4hNV(ushort @x, ushort @y, ushort @z, ushort @w) {
            Native_Vertex4hNV(@x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex4hvNV")]
        static extern void Native_Vertex4hvNV(ushort* @v);

        public void Vertex4hvNV(ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_Vertex4hvNV(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex4i")]
        static extern void Native_Vertex4i(int @x, int @y, int @z, int @w);

        public void Vertex4i(int @x, int @y, int @z, int @w) {
            Native_Vertex4i(@x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex4iv")]
        static extern void Native_Vertex4iv(int* @v);

        public void Vertex4iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_Vertex4iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex4s")]
        static extern void Native_Vertex4s(short @x, short @y, short @z, short @w);

        public void Vertex4s(short @x, short @y, short @z, short @w) {
            Native_Vertex4s(@x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex4sv")]
        static extern void Native_Vertex4sv(short* @v);

        public void Vertex4sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_Vertex4sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex4xOES")]
        static extern void Native_Vertex4xOES(int @x, int @y, int @z);

        public void Vertex4xOES(int @x, int @y, int @z) {
            Native_Vertex4xOES(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertex4xvOES")]
        static extern void Native_Vertex4xvOES(int* @coords);

        public void Vertex4xvOES(int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_Vertex4xvOES(@ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayAttribBinding")]
        static extern void Native_VertexArrayAttribBinding(uint @vaobj, uint @attribindex, uint @bindingindex);

        public void VertexArrayAttribBinding(uint @vaobj, uint @attribindex, uint @bindingindex) {
            Native_VertexArrayAttribBinding(@vaobj, @attribindex, @bindingindex);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayAttribFormat")]
        static extern void Native_VertexArrayAttribFormat(uint @vaobj, uint @attribindex, int @size, GlVertexAttribType @type, bool @normalized, uint @relativeoffset);

        public void VertexArrayAttribFormat(uint @vaobj, uint @attribindex, int @size, GlVertexAttribType @type, bool @normalized, uint @relativeoffset) {
            Native_VertexArrayAttribFormat(@vaobj, @attribindex, @size, @type, @normalized, @relativeoffset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayAttribIFormat")]
        static extern void Native_VertexArrayAttribIFormat(uint @vaobj, uint @attribindex, int @size, GlVertexAttribType @type, uint @relativeoffset);

        public void VertexArrayAttribIFormat(uint @vaobj, uint @attribindex, int @size, GlVertexAttribType @type, uint @relativeoffset) {
            Native_VertexArrayAttribIFormat(@vaobj, @attribindex, @size, @type, @relativeoffset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayAttribLFormat")]
        static extern void Native_VertexArrayAttribLFormat(uint @vaobj, uint @attribindex, int @size, GlVertexAttribType @type, uint @relativeoffset);

        public void VertexArrayAttribLFormat(uint @vaobj, uint @attribindex, int @size, GlVertexAttribType @type, uint @relativeoffset) {
            Native_VertexArrayAttribLFormat(@vaobj, @attribindex, @size, @type, @relativeoffset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayBindVertexBufferEXT")]
        static extern void Native_VertexArrayBindVertexBufferEXT(uint @vaobj, uint @bindingindex, uint @buffer, long @offset, int @stride);

        public void VertexArrayBindVertexBufferEXT(uint @vaobj, uint @bindingindex, uint @buffer, long @offset, int @stride) {
            Native_VertexArrayBindVertexBufferEXT(@vaobj, @bindingindex, @buffer, @offset, @stride);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayBindingDivisor")]
        static extern void Native_VertexArrayBindingDivisor(uint @vaobj, uint @bindingindex, uint @divisor);

        public void VertexArrayBindingDivisor(uint @vaobj, uint @bindingindex, uint @divisor) {
            Native_VertexArrayBindingDivisor(@vaobj, @bindingindex, @divisor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayColorOffsetEXT")]
        static extern void Native_VertexArrayColorOffsetEXT(uint @vaobj, uint @buffer, int @size, GlColorPointerType @type, int @stride, long @offset);

        public void VertexArrayColorOffsetEXT(uint @vaobj, uint @buffer, int @size, GlColorPointerType @type, int @stride, long @offset) {
            Native_VertexArrayColorOffsetEXT(@vaobj, @buffer, @size, @type, @stride, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayEdgeFlagOffsetEXT")]
        static extern void Native_VertexArrayEdgeFlagOffsetEXT(uint @vaobj, uint @buffer, int @stride, long @offset);

        public void VertexArrayEdgeFlagOffsetEXT(uint @vaobj, uint @buffer, int @stride, long @offset) {
            Native_VertexArrayEdgeFlagOffsetEXT(@vaobj, @buffer, @stride, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayElementBuffer")]
        static extern void Native_VertexArrayElementBuffer(uint @vaobj, uint @buffer);

        public void VertexArrayElementBuffer(uint @vaobj, uint @buffer) {
            Native_VertexArrayElementBuffer(@vaobj, @buffer);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayFogCoordOffsetEXT")]
        static extern void Native_VertexArrayFogCoordOffsetEXT(uint @vaobj, uint @buffer, GlFogCoordinatePointerType @type, int @stride, long @offset);

        public void VertexArrayFogCoordOffsetEXT(uint @vaobj, uint @buffer, GlFogCoordinatePointerType @type, int @stride, long @offset) {
            Native_VertexArrayFogCoordOffsetEXT(@vaobj, @buffer, @type, @stride, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayIndexOffsetEXT")]
        static extern void Native_VertexArrayIndexOffsetEXT(uint @vaobj, uint @buffer, GlIndexPointerType @type, int @stride, long @offset);

        public void VertexArrayIndexOffsetEXT(uint @vaobj, uint @buffer, GlIndexPointerType @type, int @stride, long @offset) {
            Native_VertexArrayIndexOffsetEXT(@vaobj, @buffer, @type, @stride, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayMultiTexCoordOffsetEXT")]
        static extern void Native_VertexArrayMultiTexCoordOffsetEXT(uint @vaobj, uint @buffer, uint @texunit, int @size, GlTexCoordPointerType @type, int @stride, long @offset);

        public void VertexArrayMultiTexCoordOffsetEXT(uint @vaobj, uint @buffer, uint @texunit, int @size, GlTexCoordPointerType @type, int @stride, long @offset) {
            Native_VertexArrayMultiTexCoordOffsetEXT(@vaobj, @buffer, @texunit, @size, @type, @stride, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayNormalOffsetEXT")]
        static extern void Native_VertexArrayNormalOffsetEXT(uint @vaobj, uint @buffer, GlNormalPointerType @type, int @stride, long @offset);

        public void VertexArrayNormalOffsetEXT(uint @vaobj, uint @buffer, GlNormalPointerType @type, int @stride, long @offset) {
            Native_VertexArrayNormalOffsetEXT(@vaobj, @buffer, @type, @stride, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayParameteriAPPLE")]
        static extern void Native_VertexArrayParameteriAPPLE(uint @pname, int @param);

        public void VertexArrayParameteriAPPLE(uint @pname, int @param) {
            Native_VertexArrayParameteriAPPLE(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayRangeAPPLE")]
        static extern void Native_VertexArrayRangeAPPLE(int @length, byte* @pointer);

        public void VertexArrayRangeAPPLE(int @length, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_VertexArrayRangeAPPLE(@length, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayRangeNV")]
        static extern void Native_VertexArrayRangeNV(int @length, byte* @pointer);

        public void VertexArrayRangeNV(int @length, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_VertexArrayRangeNV(@length, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArraySecondaryColorOffsetEXT")]
        static extern void Native_VertexArraySecondaryColorOffsetEXT(uint @vaobj, uint @buffer, int @size, GlColorPointerType @type, int @stride, long @offset);

        public void VertexArraySecondaryColorOffsetEXT(uint @vaobj, uint @buffer, int @size, GlColorPointerType @type, int @stride, long @offset) {
            Native_VertexArraySecondaryColorOffsetEXT(@vaobj, @buffer, @size, @type, @stride, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayTexCoordOffsetEXT")]
        static extern void Native_VertexArrayTexCoordOffsetEXT(uint @vaobj, uint @buffer, int @size, GlTexCoordPointerType @type, int @stride, long @offset);

        public void VertexArrayTexCoordOffsetEXT(uint @vaobj, uint @buffer, int @size, GlTexCoordPointerType @type, int @stride, long @offset) {
            Native_VertexArrayTexCoordOffsetEXT(@vaobj, @buffer, @size, @type, @stride, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayVertexAttribBindingEXT")]
        static extern void Native_VertexArrayVertexAttribBindingEXT(uint @vaobj, uint @attribindex, uint @bindingindex);

        public void VertexArrayVertexAttribBindingEXT(uint @vaobj, uint @attribindex, uint @bindingindex) {
            Native_VertexArrayVertexAttribBindingEXT(@vaobj, @attribindex, @bindingindex);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayVertexAttribDivisorEXT")]
        static extern void Native_VertexArrayVertexAttribDivisorEXT(uint @vaobj, uint @index, uint @divisor);

        public void VertexArrayVertexAttribDivisorEXT(uint @vaobj, uint @index, uint @divisor) {
            Native_VertexArrayVertexAttribDivisorEXT(@vaobj, @index, @divisor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayVertexAttribFormatEXT")]
        static extern void Native_VertexArrayVertexAttribFormatEXT(uint @vaobj, uint @attribindex, int @size, uint @type, GlBoolean @normalized, uint @relativeoffset);

        public void VertexArrayVertexAttribFormatEXT(uint @vaobj, uint @attribindex, int @size, uint @type, GlBoolean @normalized, uint @relativeoffset) {
            Native_VertexArrayVertexAttribFormatEXT(@vaobj, @attribindex, @size, @type, @normalized, @relativeoffset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayVertexAttribIFormatEXT")]
        static extern void Native_VertexArrayVertexAttribIFormatEXT(uint @vaobj, uint @attribindex, int @size, uint @type, uint @relativeoffset);

        public void VertexArrayVertexAttribIFormatEXT(uint @vaobj, uint @attribindex, int @size, uint @type, uint @relativeoffset) {
            Native_VertexArrayVertexAttribIFormatEXT(@vaobj, @attribindex, @size, @type, @relativeoffset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayVertexAttribIOffsetEXT")]
        static extern void Native_VertexArrayVertexAttribIOffsetEXT(uint @vaobj, uint @buffer, uint @index, int @size, GlVertexAttribEnum @type, int @stride, long @offset);

        public void VertexArrayVertexAttribIOffsetEXT(uint @vaobj, uint @buffer, uint @index, int @size, GlVertexAttribEnum @type, int @stride, long @offset) {
            Native_VertexArrayVertexAttribIOffsetEXT(@vaobj, @buffer, @index, @size, @type, @stride, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayVertexAttribLFormatEXT")]
        static extern void Native_VertexArrayVertexAttribLFormatEXT(uint @vaobj, uint @attribindex, int @size, uint @type, uint @relativeoffset);

        public void VertexArrayVertexAttribLFormatEXT(uint @vaobj, uint @attribindex, int @size, uint @type, uint @relativeoffset) {
            Native_VertexArrayVertexAttribLFormatEXT(@vaobj, @attribindex, @size, @type, @relativeoffset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayVertexAttribLOffsetEXT")]
        static extern void Native_VertexArrayVertexAttribLOffsetEXT(uint @vaobj, uint @buffer, uint @index, int @size, uint @type, int @stride, long @offset);

        public void VertexArrayVertexAttribLOffsetEXT(uint @vaobj, uint @buffer, uint @index, int @size, uint @type, int @stride, long @offset) {
            Native_VertexArrayVertexAttribLOffsetEXT(@vaobj, @buffer, @index, @size, @type, @stride, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayVertexAttribOffsetEXT")]
        static extern void Native_VertexArrayVertexAttribOffsetEXT(uint @vaobj, uint @buffer, uint @index, int @size, GlVertexAttribPointerType @type, bool @normalized, int @stride, long @offset);

        public void VertexArrayVertexAttribOffsetEXT(uint @vaobj, uint @buffer, uint @index, int @size, GlVertexAttribPointerType @type, bool @normalized, int @stride, long @offset) {
            Native_VertexArrayVertexAttribOffsetEXT(@vaobj, @buffer, @index, @size, @type, @normalized, @stride, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayVertexBindingDivisorEXT")]
        static extern void Native_VertexArrayVertexBindingDivisorEXT(uint @vaobj, uint @bindingindex, uint @divisor);

        public void VertexArrayVertexBindingDivisorEXT(uint @vaobj, uint @bindingindex, uint @divisor) {
            Native_VertexArrayVertexBindingDivisorEXT(@vaobj, @bindingindex, @divisor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayVertexBuffer")]
        static extern void Native_VertexArrayVertexBuffer(uint @vaobj, uint @bindingindex, uint @buffer, long @offset, int @stride);

        public void VertexArrayVertexBuffer(uint @vaobj, uint @bindingindex, uint @buffer, long @offset, int @stride) {
            Native_VertexArrayVertexBuffer(@vaobj, @bindingindex, @buffer, @offset, @stride);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayVertexBuffers")]
        static extern void Native_VertexArrayVertexBuffers(uint @vaobj, uint @first, int @count, uint* @buffers, long* @offsets, int* @strides);

        public void VertexArrayVertexBuffers(uint @vaobj, uint @first, int @count, uint[] @buffers, long[] @offsets, int[] @strides) {
            fixed (uint *ptr_buffers = @buffers) {
                fixed (long *ptr_offsets = @offsets) {
                    fixed (int *ptr_strides = @strides) {
                        Native_VertexArrayVertexBuffers(@vaobj, @first, @count, @ptr_buffers, @ptr_offsets, @ptr_strides);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexArrayVertexOffsetEXT")]
        static extern void Native_VertexArrayVertexOffsetEXT(uint @vaobj, uint @buffer, int @size, GlVertexPointerType @type, int @stride, long @offset);

        public void VertexArrayVertexOffsetEXT(uint @vaobj, uint @buffer, int @size, GlVertexPointerType @type, int @stride, long @offset) {
            Native_VertexArrayVertexOffsetEXT(@vaobj, @buffer, @size, @type, @stride, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1d")]
        static extern void Native_VertexAttrib1d(uint @index, double @x);

        public void VertexAttrib1d(uint @index, double @x) {
            Native_VertexAttrib1d(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1dARB")]
        static extern void Native_VertexAttrib1dARB(uint @index, double @x);

        public void VertexAttrib1dARB(uint @index, double @x) {
            Native_VertexAttrib1dARB(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1dNV")]
        static extern void Native_VertexAttrib1dNV(uint @index, double @x);

        public void VertexAttrib1dNV(uint @index, double @x) {
            Native_VertexAttrib1dNV(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1dv")]
        static extern void Native_VertexAttrib1dv(uint @index, double* @v);

        public void VertexAttrib1dv(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttrib1dv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1dvARB")]
        static extern void Native_VertexAttrib1dvARB(uint @index, double* @v);

        public void VertexAttrib1dvARB(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttrib1dvARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1dvNV")]
        static extern void Native_VertexAttrib1dvNV(uint @index, double* @v);

        public void VertexAttrib1dvNV(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttrib1dvNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1f")]
        static extern void Native_VertexAttrib1f(uint @index, float @x);

        public void VertexAttrib1f(uint @index, float @x) {
            Native_VertexAttrib1f(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1fARB")]
        static extern void Native_VertexAttrib1fARB(uint @index, float @x);

        public void VertexAttrib1fARB(uint @index, float @x) {
            Native_VertexAttrib1fARB(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1fNV")]
        static extern void Native_VertexAttrib1fNV(uint @index, float @x);

        public void VertexAttrib1fNV(uint @index, float @x) {
            Native_VertexAttrib1fNV(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1fv")]
        static extern void Native_VertexAttrib1fv(uint @index, float* @v);

        public void VertexAttrib1fv(uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttrib1fv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1fvARB")]
        static extern void Native_VertexAttrib1fvARB(uint @index, float* @v);

        public void VertexAttrib1fvARB(uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttrib1fvARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1fvNV")]
        static extern void Native_VertexAttrib1fvNV(uint @index, float* @v);

        public void VertexAttrib1fvNV(uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttrib1fvNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1hNV")]
        static extern void Native_VertexAttrib1hNV(uint @index, ushort @x);

        public void VertexAttrib1hNV(uint @index, ushort @x) {
            Native_VertexAttrib1hNV(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1hvNV")]
        static extern void Native_VertexAttrib1hvNV(uint @index, ushort* @v);

        public void VertexAttrib1hvNV(uint @index, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_VertexAttrib1hvNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1s")]
        static extern void Native_VertexAttrib1s(uint @index, short @x);

        public void VertexAttrib1s(uint @index, short @x) {
            Native_VertexAttrib1s(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1sARB")]
        static extern void Native_VertexAttrib1sARB(uint @index, short @x);

        public void VertexAttrib1sARB(uint @index, short @x) {
            Native_VertexAttrib1sARB(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1sNV")]
        static extern void Native_VertexAttrib1sNV(uint @index, short @x);

        public void VertexAttrib1sNV(uint @index, short @x) {
            Native_VertexAttrib1sNV(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1sv")]
        static extern void Native_VertexAttrib1sv(uint @index, short* @v);

        public void VertexAttrib1sv(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttrib1sv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1svARB")]
        static extern void Native_VertexAttrib1svARB(uint @index, short* @v);

        public void VertexAttrib1svARB(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttrib1svARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib1svNV")]
        static extern void Native_VertexAttrib1svNV(uint @index, short* @v);

        public void VertexAttrib1svNV(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttrib1svNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2d")]
        static extern void Native_VertexAttrib2d(uint @index, double @x, double @y);

        public void VertexAttrib2d(uint @index, double @x, double @y) {
            Native_VertexAttrib2d(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2dARB")]
        static extern void Native_VertexAttrib2dARB(uint @index, double @x, double @y);

        public void VertexAttrib2dARB(uint @index, double @x, double @y) {
            Native_VertexAttrib2dARB(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2dNV")]
        static extern void Native_VertexAttrib2dNV(uint @index, double @x, double @y);

        public void VertexAttrib2dNV(uint @index, double @x, double @y) {
            Native_VertexAttrib2dNV(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2dv")]
        static extern void Native_VertexAttrib2dv(uint @index, double* @v);

        public void VertexAttrib2dv(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttrib2dv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2dvARB")]
        static extern void Native_VertexAttrib2dvARB(uint @index, double* @v);

        public void VertexAttrib2dvARB(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttrib2dvARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2dvNV")]
        static extern void Native_VertexAttrib2dvNV(uint @index, double* @v);

        public void VertexAttrib2dvNV(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttrib2dvNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2f")]
        static extern void Native_VertexAttrib2f(uint @index, float @x, float @y);

        public void VertexAttrib2f(uint @index, float @x, float @y) {
            Native_VertexAttrib2f(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2fARB")]
        static extern void Native_VertexAttrib2fARB(uint @index, float @x, float @y);

        public void VertexAttrib2fARB(uint @index, float @x, float @y) {
            Native_VertexAttrib2fARB(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2fNV")]
        static extern void Native_VertexAttrib2fNV(uint @index, float @x, float @y);

        public void VertexAttrib2fNV(uint @index, float @x, float @y) {
            Native_VertexAttrib2fNV(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2fv")]
        static extern void Native_VertexAttrib2fv(uint @index, float* @v);

        public void VertexAttrib2fv(uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttrib2fv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2fvARB")]
        static extern void Native_VertexAttrib2fvARB(uint @index, float* @v);

        public void VertexAttrib2fvARB(uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttrib2fvARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2fvNV")]
        static extern void Native_VertexAttrib2fvNV(uint @index, float* @v);

        public void VertexAttrib2fvNV(uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttrib2fvNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2hNV")]
        static extern void Native_VertexAttrib2hNV(uint @index, ushort @x, ushort @y);

        public void VertexAttrib2hNV(uint @index, ushort @x, ushort @y) {
            Native_VertexAttrib2hNV(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2hvNV")]
        static extern void Native_VertexAttrib2hvNV(uint @index, ushort* @v);

        public void VertexAttrib2hvNV(uint @index, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_VertexAttrib2hvNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2s")]
        static extern void Native_VertexAttrib2s(uint @index, short @x, short @y);

        public void VertexAttrib2s(uint @index, short @x, short @y) {
            Native_VertexAttrib2s(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2sARB")]
        static extern void Native_VertexAttrib2sARB(uint @index, short @x, short @y);

        public void VertexAttrib2sARB(uint @index, short @x, short @y) {
            Native_VertexAttrib2sARB(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2sNV")]
        static extern void Native_VertexAttrib2sNV(uint @index, short @x, short @y);

        public void VertexAttrib2sNV(uint @index, short @x, short @y) {
            Native_VertexAttrib2sNV(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2sv")]
        static extern void Native_VertexAttrib2sv(uint @index, short* @v);

        public void VertexAttrib2sv(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttrib2sv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2svARB")]
        static extern void Native_VertexAttrib2svARB(uint @index, short* @v);

        public void VertexAttrib2svARB(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttrib2svARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib2svNV")]
        static extern void Native_VertexAttrib2svNV(uint @index, short* @v);

        public void VertexAttrib2svNV(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttrib2svNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3d")]
        static extern void Native_VertexAttrib3d(uint @index, double @x, double @y, double @z);

        public void VertexAttrib3d(uint @index, double @x, double @y, double @z) {
            Native_VertexAttrib3d(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3dARB")]
        static extern void Native_VertexAttrib3dARB(uint @index, double @x, double @y, double @z);

        public void VertexAttrib3dARB(uint @index, double @x, double @y, double @z) {
            Native_VertexAttrib3dARB(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3dNV")]
        static extern void Native_VertexAttrib3dNV(uint @index, double @x, double @y, double @z);

        public void VertexAttrib3dNV(uint @index, double @x, double @y, double @z) {
            Native_VertexAttrib3dNV(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3dv")]
        static extern void Native_VertexAttrib3dv(uint @index, double* @v);

        public void VertexAttrib3dv(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttrib3dv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3dvARB")]
        static extern void Native_VertexAttrib3dvARB(uint @index, double* @v);

        public void VertexAttrib3dvARB(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttrib3dvARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3dvNV")]
        static extern void Native_VertexAttrib3dvNV(uint @index, double* @v);

        public void VertexAttrib3dvNV(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttrib3dvNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3f")]
        static extern void Native_VertexAttrib3f(uint @index, float @x, float @y, float @z);

        public void VertexAttrib3f(uint @index, float @x, float @y, float @z) {
            Native_VertexAttrib3f(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3fARB")]
        static extern void Native_VertexAttrib3fARB(uint @index, float @x, float @y, float @z);

        public void VertexAttrib3fARB(uint @index, float @x, float @y, float @z) {
            Native_VertexAttrib3fARB(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3fNV")]
        static extern void Native_VertexAttrib3fNV(uint @index, float @x, float @y, float @z);

        public void VertexAttrib3fNV(uint @index, float @x, float @y, float @z) {
            Native_VertexAttrib3fNV(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3fv")]
        static extern void Native_VertexAttrib3fv(uint @index, float* @v);

        public void VertexAttrib3fv(uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttrib3fv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3fvARB")]
        static extern void Native_VertexAttrib3fvARB(uint @index, float* @v);

        public void VertexAttrib3fvARB(uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttrib3fvARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3fvNV")]
        static extern void Native_VertexAttrib3fvNV(uint @index, float* @v);

        public void VertexAttrib3fvNV(uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttrib3fvNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3hNV")]
        static extern void Native_VertexAttrib3hNV(uint @index, ushort @x, ushort @y, ushort @z);

        public void VertexAttrib3hNV(uint @index, ushort @x, ushort @y, ushort @z) {
            Native_VertexAttrib3hNV(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3hvNV")]
        static extern void Native_VertexAttrib3hvNV(uint @index, ushort* @v);

        public void VertexAttrib3hvNV(uint @index, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_VertexAttrib3hvNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3s")]
        static extern void Native_VertexAttrib3s(uint @index, short @x, short @y, short @z);

        public void VertexAttrib3s(uint @index, short @x, short @y, short @z) {
            Native_VertexAttrib3s(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3sARB")]
        static extern void Native_VertexAttrib3sARB(uint @index, short @x, short @y, short @z);

        public void VertexAttrib3sARB(uint @index, short @x, short @y, short @z) {
            Native_VertexAttrib3sARB(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3sNV")]
        static extern void Native_VertexAttrib3sNV(uint @index, short @x, short @y, short @z);

        public void VertexAttrib3sNV(uint @index, short @x, short @y, short @z) {
            Native_VertexAttrib3sNV(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3sv")]
        static extern void Native_VertexAttrib3sv(uint @index, short* @v);

        public void VertexAttrib3sv(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttrib3sv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3svARB")]
        static extern void Native_VertexAttrib3svARB(uint @index, short* @v);

        public void VertexAttrib3svARB(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttrib3svARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib3svNV")]
        static extern void Native_VertexAttrib3svNV(uint @index, short* @v);

        public void VertexAttrib3svNV(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttrib3svNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4Nbv")]
        static extern void Native_VertexAttrib4Nbv(uint @index, sbyte* @v);

        public void VertexAttrib4Nbv(uint @index, sbyte[] @v) {
            fixed (sbyte *ptr_v = @v) {
                Native_VertexAttrib4Nbv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4NbvARB")]
        static extern void Native_VertexAttrib4NbvARB(uint @index, sbyte* @v);

        public void VertexAttrib4NbvARB(uint @index, sbyte[] @v) {
            fixed (sbyte *ptr_v = @v) {
                Native_VertexAttrib4NbvARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4Niv")]
        static extern void Native_VertexAttrib4Niv(uint @index, int* @v);

        public void VertexAttrib4Niv(uint @index, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_VertexAttrib4Niv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4NivARB")]
        static extern void Native_VertexAttrib4NivARB(uint @index, int* @v);

        public void VertexAttrib4NivARB(uint @index, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_VertexAttrib4NivARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4Nsv")]
        static extern void Native_VertexAttrib4Nsv(uint @index, short* @v);

        public void VertexAttrib4Nsv(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttrib4Nsv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4NsvARB")]
        static extern void Native_VertexAttrib4NsvARB(uint @index, short* @v);

        public void VertexAttrib4NsvARB(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttrib4NsvARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4Nub")]
        static extern void Native_VertexAttrib4Nub(uint @index, byte @x, byte @y, byte @z, byte @w);

        public void VertexAttrib4Nub(uint @index, byte @x, byte @y, byte @z, byte @w) {
            Native_VertexAttrib4Nub(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4NubARB")]
        static extern void Native_VertexAttrib4NubARB(uint @index, byte @x, byte @y, byte @z, byte @w);

        public void VertexAttrib4NubARB(uint @index, byte @x, byte @y, byte @z, byte @w) {
            Native_VertexAttrib4NubARB(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4Nubv")]
        static extern void Native_VertexAttrib4Nubv(uint @index, byte* @v);

        public void VertexAttrib4Nubv(uint @index, byte[] @v) {
            fixed (byte *ptr_v = @v) {
                Native_VertexAttrib4Nubv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4NubvARB")]
        static extern void Native_VertexAttrib4NubvARB(uint @index, byte* @v);

        public void VertexAttrib4NubvARB(uint @index, byte[] @v) {
            fixed (byte *ptr_v = @v) {
                Native_VertexAttrib4NubvARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4Nuiv")]
        static extern void Native_VertexAttrib4Nuiv(uint @index, uint* @v);

        public void VertexAttrib4Nuiv(uint @index, uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_VertexAttrib4Nuiv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4NuivARB")]
        static extern void Native_VertexAttrib4NuivARB(uint @index, uint* @v);

        public void VertexAttrib4NuivARB(uint @index, uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_VertexAttrib4NuivARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4Nusv")]
        static extern void Native_VertexAttrib4Nusv(uint @index, ushort* @v);

        public void VertexAttrib4Nusv(uint @index, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_VertexAttrib4Nusv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4NusvARB")]
        static extern void Native_VertexAttrib4NusvARB(uint @index, ushort* @v);

        public void VertexAttrib4NusvARB(uint @index, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_VertexAttrib4NusvARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4bv")]
        static extern void Native_VertexAttrib4bv(uint @index, sbyte* @v);

        public void VertexAttrib4bv(uint @index, sbyte[] @v) {
            fixed (sbyte *ptr_v = @v) {
                Native_VertexAttrib4bv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4bvARB")]
        static extern void Native_VertexAttrib4bvARB(uint @index, sbyte* @v);

        public void VertexAttrib4bvARB(uint @index, sbyte[] @v) {
            fixed (sbyte *ptr_v = @v) {
                Native_VertexAttrib4bvARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4d")]
        static extern void Native_VertexAttrib4d(uint @index, double @x, double @y, double @z, double @w);

        public void VertexAttrib4d(uint @index, double @x, double @y, double @z, double @w) {
            Native_VertexAttrib4d(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4dARB")]
        static extern void Native_VertexAttrib4dARB(uint @index, double @x, double @y, double @z, double @w);

        public void VertexAttrib4dARB(uint @index, double @x, double @y, double @z, double @w) {
            Native_VertexAttrib4dARB(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4dNV")]
        static extern void Native_VertexAttrib4dNV(uint @index, double @x, double @y, double @z, double @w);

        public void VertexAttrib4dNV(uint @index, double @x, double @y, double @z, double @w) {
            Native_VertexAttrib4dNV(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4dv")]
        static extern void Native_VertexAttrib4dv(uint @index, double* @v);

        public void VertexAttrib4dv(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttrib4dv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4dvARB")]
        static extern void Native_VertexAttrib4dvARB(uint @index, double* @v);

        public void VertexAttrib4dvARB(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttrib4dvARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4dvNV")]
        static extern void Native_VertexAttrib4dvNV(uint @index, double* @v);

        public void VertexAttrib4dvNV(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttrib4dvNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4f")]
        static extern void Native_VertexAttrib4f(uint @index, float @x, float @y, float @z, float @w);

        public void VertexAttrib4f(uint @index, float @x, float @y, float @z, float @w) {
            Native_VertexAttrib4f(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4fARB")]
        static extern void Native_VertexAttrib4fARB(uint @index, float @x, float @y, float @z, float @w);

        public void VertexAttrib4fARB(uint @index, float @x, float @y, float @z, float @w) {
            Native_VertexAttrib4fARB(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4fNV")]
        static extern void Native_VertexAttrib4fNV(uint @index, float @x, float @y, float @z, float @w);

        public void VertexAttrib4fNV(uint @index, float @x, float @y, float @z, float @w) {
            Native_VertexAttrib4fNV(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4fv")]
        static extern void Native_VertexAttrib4fv(uint @index, float* @v);

        public void VertexAttrib4fv(uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttrib4fv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4fvARB")]
        static extern void Native_VertexAttrib4fvARB(uint @index, float* @v);

        public void VertexAttrib4fvARB(uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttrib4fvARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4fvNV")]
        static extern void Native_VertexAttrib4fvNV(uint @index, float* @v);

        public void VertexAttrib4fvNV(uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttrib4fvNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4hNV")]
        static extern void Native_VertexAttrib4hNV(uint @index, ushort @x, ushort @y, ushort @z, ushort @w);

        public void VertexAttrib4hNV(uint @index, ushort @x, ushort @y, ushort @z, ushort @w) {
            Native_VertexAttrib4hNV(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4hvNV")]
        static extern void Native_VertexAttrib4hvNV(uint @index, ushort* @v);

        public void VertexAttrib4hvNV(uint @index, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_VertexAttrib4hvNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4iv")]
        static extern void Native_VertexAttrib4iv(uint @index, int* @v);

        public void VertexAttrib4iv(uint @index, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_VertexAttrib4iv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4ivARB")]
        static extern void Native_VertexAttrib4ivARB(uint @index, int* @v);

        public void VertexAttrib4ivARB(uint @index, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_VertexAttrib4ivARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4s")]
        static extern void Native_VertexAttrib4s(uint @index, short @x, short @y, short @z, short @w);

        public void VertexAttrib4s(uint @index, short @x, short @y, short @z, short @w) {
            Native_VertexAttrib4s(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4sARB")]
        static extern void Native_VertexAttrib4sARB(uint @index, short @x, short @y, short @z, short @w);

        public void VertexAttrib4sARB(uint @index, short @x, short @y, short @z, short @w) {
            Native_VertexAttrib4sARB(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4sNV")]
        static extern void Native_VertexAttrib4sNV(uint @index, short @x, short @y, short @z, short @w);

        public void VertexAttrib4sNV(uint @index, short @x, short @y, short @z, short @w) {
            Native_VertexAttrib4sNV(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4sv")]
        static extern void Native_VertexAttrib4sv(uint @index, short* @v);

        public void VertexAttrib4sv(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttrib4sv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4svARB")]
        static extern void Native_VertexAttrib4svARB(uint @index, short* @v);

        public void VertexAttrib4svARB(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttrib4svARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4svNV")]
        static extern void Native_VertexAttrib4svNV(uint @index, short* @v);

        public void VertexAttrib4svNV(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttrib4svNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4ubNV")]
        static extern void Native_VertexAttrib4ubNV(uint @index, byte @x, byte @y, byte @z, byte @w);

        public void VertexAttrib4ubNV(uint @index, byte @x, byte @y, byte @z, byte @w) {
            Native_VertexAttrib4ubNV(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4ubv")]
        static extern void Native_VertexAttrib4ubv(uint @index, byte* @v);

        public void VertexAttrib4ubv(uint @index, byte[] @v) {
            fixed (byte *ptr_v = @v) {
                Native_VertexAttrib4ubv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4ubvARB")]
        static extern void Native_VertexAttrib4ubvARB(uint @index, byte* @v);

        public void VertexAttrib4ubvARB(uint @index, byte[] @v) {
            fixed (byte *ptr_v = @v) {
                Native_VertexAttrib4ubvARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4ubvNV")]
        static extern void Native_VertexAttrib4ubvNV(uint @index, byte* @v);

        public void VertexAttrib4ubvNV(uint @index, byte[] @v) {
            fixed (byte *ptr_v = @v) {
                Native_VertexAttrib4ubvNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4uiv")]
        static extern void Native_VertexAttrib4uiv(uint @index, uint* @v);

        public void VertexAttrib4uiv(uint @index, uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_VertexAttrib4uiv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4uivARB")]
        static extern void Native_VertexAttrib4uivARB(uint @index, uint* @v);

        public void VertexAttrib4uivARB(uint @index, uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_VertexAttrib4uivARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4usv")]
        static extern void Native_VertexAttrib4usv(uint @index, ushort* @v);

        public void VertexAttrib4usv(uint @index, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_VertexAttrib4usv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttrib4usvARB")]
        static extern void Native_VertexAttrib4usvARB(uint @index, ushort* @v);

        public void VertexAttrib4usvARB(uint @index, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_VertexAttrib4usvARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribArrayObjectATI")]
        static extern void Native_VertexAttribArrayObjectATI(uint @index, int @size, GlVertexAttribPointerType @type, GlBoolean @normalized, int @stride, uint @buffer, uint @offset);

        public void VertexAttribArrayObjectATI(uint @index, int @size, GlVertexAttribPointerType @type, GlBoolean @normalized, int @stride, uint @buffer, uint @offset) {
            Native_VertexAttribArrayObjectATI(@index, @size, @type, @normalized, @stride, @buffer, @offset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribBinding")]
        static extern void Native_VertexAttribBinding(uint @attribindex, uint @bindingindex);

        public void VertexAttribBinding(uint @attribindex, uint @bindingindex) {
            Native_VertexAttribBinding(@attribindex, @bindingindex);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribDivisor")]
        static extern void Native_VertexAttribDivisor(uint @index, uint @divisor);

        public void VertexAttribDivisor(uint @index, uint @divisor) {
            Native_VertexAttribDivisor(@index, @divisor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribDivisorANGLE")]
        static extern void Native_VertexAttribDivisorANGLE(uint @index, uint @divisor);

        public void VertexAttribDivisorANGLE(uint @index, uint @divisor) {
            Native_VertexAttribDivisorANGLE(@index, @divisor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribDivisorARB")]
        static extern void Native_VertexAttribDivisorARB(uint @index, uint @divisor);

        public void VertexAttribDivisorARB(uint @index, uint @divisor) {
            Native_VertexAttribDivisorARB(@index, @divisor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribDivisorEXT")]
        static extern void Native_VertexAttribDivisorEXT(uint @index, uint @divisor);

        public void VertexAttribDivisorEXT(uint @index, uint @divisor) {
            Native_VertexAttribDivisorEXT(@index, @divisor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribDivisorNV")]
        static extern void Native_VertexAttribDivisorNV(uint @index, uint @divisor);

        public void VertexAttribDivisorNV(uint @index, uint @divisor) {
            Native_VertexAttribDivisorNV(@index, @divisor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribFormat")]
        static extern void Native_VertexAttribFormat(uint @attribindex, int @size, uint @type, GlBoolean @normalized, uint @relativeoffset);

        public void VertexAttribFormat(uint @attribindex, int @size, uint @type, GlBoolean @normalized, uint @relativeoffset) {
            Native_VertexAttribFormat(@attribindex, @size, @type, @normalized, @relativeoffset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribFormatNV")]
        static extern void Native_VertexAttribFormatNV(uint @index, int @size, uint @type, GlBoolean @normalized, int @stride);

        public void VertexAttribFormatNV(uint @index, int @size, uint @type, GlBoolean @normalized, int @stride) {
            Native_VertexAttribFormatNV(@index, @size, @type, @normalized, @stride);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI1i")]
        static extern void Native_VertexAttribI1i(uint @index, int @x);

        public void VertexAttribI1i(uint @index, int @x) {
            Native_VertexAttribI1i(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI1iEXT")]
        static extern void Native_VertexAttribI1iEXT(uint @index, int @x);

        public void VertexAttribI1iEXT(uint @index, int @x) {
            Native_VertexAttribI1iEXT(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI1iv")]
        static extern void Native_VertexAttribI1iv(uint @index, int* @v);

        public void VertexAttribI1iv(uint @index, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_VertexAttribI1iv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI1ivEXT")]
        static extern void Native_VertexAttribI1ivEXT(uint @index, int* @v);

        public void VertexAttribI1ivEXT(uint @index, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_VertexAttribI1ivEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI1ui")]
        static extern void Native_VertexAttribI1ui(uint @index, uint @x);

        public void VertexAttribI1ui(uint @index, uint @x) {
            Native_VertexAttribI1ui(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI1uiEXT")]
        static extern void Native_VertexAttribI1uiEXT(uint @index, uint @x);

        public void VertexAttribI1uiEXT(uint @index, uint @x) {
            Native_VertexAttribI1uiEXT(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI1uiv")]
        static extern void Native_VertexAttribI1uiv(uint @index, uint* @v);

        public void VertexAttribI1uiv(uint @index, uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_VertexAttribI1uiv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI1uivEXT")]
        static extern void Native_VertexAttribI1uivEXT(uint @index, uint* @v);

        public void VertexAttribI1uivEXT(uint @index, uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_VertexAttribI1uivEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI2i")]
        static extern void Native_VertexAttribI2i(uint @index, int @x, int @y);

        public void VertexAttribI2i(uint @index, int @x, int @y) {
            Native_VertexAttribI2i(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI2iEXT")]
        static extern void Native_VertexAttribI2iEXT(uint @index, int @x, int @y);

        public void VertexAttribI2iEXT(uint @index, int @x, int @y) {
            Native_VertexAttribI2iEXT(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI2iv")]
        static extern void Native_VertexAttribI2iv(uint @index, int* @v);

        public void VertexAttribI2iv(uint @index, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_VertexAttribI2iv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI2ivEXT")]
        static extern void Native_VertexAttribI2ivEXT(uint @index, int* @v);

        public void VertexAttribI2ivEXT(uint @index, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_VertexAttribI2ivEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI2ui")]
        static extern void Native_VertexAttribI2ui(uint @index, uint @x, uint @y);

        public void VertexAttribI2ui(uint @index, uint @x, uint @y) {
            Native_VertexAttribI2ui(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI2uiEXT")]
        static extern void Native_VertexAttribI2uiEXT(uint @index, uint @x, uint @y);

        public void VertexAttribI2uiEXT(uint @index, uint @x, uint @y) {
            Native_VertexAttribI2uiEXT(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI2uiv")]
        static extern void Native_VertexAttribI2uiv(uint @index, uint* @v);

        public void VertexAttribI2uiv(uint @index, uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_VertexAttribI2uiv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI2uivEXT")]
        static extern void Native_VertexAttribI2uivEXT(uint @index, uint* @v);

        public void VertexAttribI2uivEXT(uint @index, uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_VertexAttribI2uivEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI3i")]
        static extern void Native_VertexAttribI3i(uint @index, int @x, int @y, int @z);

        public void VertexAttribI3i(uint @index, int @x, int @y, int @z) {
            Native_VertexAttribI3i(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI3iEXT")]
        static extern void Native_VertexAttribI3iEXT(uint @index, int @x, int @y, int @z);

        public void VertexAttribI3iEXT(uint @index, int @x, int @y, int @z) {
            Native_VertexAttribI3iEXT(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI3iv")]
        static extern void Native_VertexAttribI3iv(uint @index, int* @v);

        public void VertexAttribI3iv(uint @index, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_VertexAttribI3iv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI3ivEXT")]
        static extern void Native_VertexAttribI3ivEXT(uint @index, int* @v);

        public void VertexAttribI3ivEXT(uint @index, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_VertexAttribI3ivEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI3ui")]
        static extern void Native_VertexAttribI3ui(uint @index, uint @x, uint @y, uint @z);

        public void VertexAttribI3ui(uint @index, uint @x, uint @y, uint @z) {
            Native_VertexAttribI3ui(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI3uiEXT")]
        static extern void Native_VertexAttribI3uiEXT(uint @index, uint @x, uint @y, uint @z);

        public void VertexAttribI3uiEXT(uint @index, uint @x, uint @y, uint @z) {
            Native_VertexAttribI3uiEXT(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI3uiv")]
        static extern void Native_VertexAttribI3uiv(uint @index, uint* @v);

        public void VertexAttribI3uiv(uint @index, uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_VertexAttribI3uiv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI3uivEXT")]
        static extern void Native_VertexAttribI3uivEXT(uint @index, uint* @v);

        public void VertexAttribI3uivEXT(uint @index, uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_VertexAttribI3uivEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4bv")]
        static extern void Native_VertexAttribI4bv(uint @index, sbyte* @v);

        public void VertexAttribI4bv(uint @index, sbyte[] @v) {
            fixed (sbyte *ptr_v = @v) {
                Native_VertexAttribI4bv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4bvEXT")]
        static extern void Native_VertexAttribI4bvEXT(uint @index, sbyte* @v);

        public void VertexAttribI4bvEXT(uint @index, sbyte[] @v) {
            fixed (sbyte *ptr_v = @v) {
                Native_VertexAttribI4bvEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4i")]
        static extern void Native_VertexAttribI4i(uint @index, int @x, int @y, int @z, int @w);

        public void VertexAttribI4i(uint @index, int @x, int @y, int @z, int @w) {
            Native_VertexAttribI4i(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4iEXT")]
        static extern void Native_VertexAttribI4iEXT(uint @index, int @x, int @y, int @z, int @w);

        public void VertexAttribI4iEXT(uint @index, int @x, int @y, int @z, int @w) {
            Native_VertexAttribI4iEXT(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4iv")]
        static extern void Native_VertexAttribI4iv(uint @index, int* @v);

        public void VertexAttribI4iv(uint @index, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_VertexAttribI4iv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4ivEXT")]
        static extern void Native_VertexAttribI4ivEXT(uint @index, int* @v);

        public void VertexAttribI4ivEXT(uint @index, int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_VertexAttribI4ivEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4sv")]
        static extern void Native_VertexAttribI4sv(uint @index, short* @v);

        public void VertexAttribI4sv(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttribI4sv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4svEXT")]
        static extern void Native_VertexAttribI4svEXT(uint @index, short* @v);

        public void VertexAttribI4svEXT(uint @index, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttribI4svEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4ubv")]
        static extern void Native_VertexAttribI4ubv(uint @index, byte* @v);

        public void VertexAttribI4ubv(uint @index, byte[] @v) {
            fixed (byte *ptr_v = @v) {
                Native_VertexAttribI4ubv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4ubvEXT")]
        static extern void Native_VertexAttribI4ubvEXT(uint @index, byte* @v);

        public void VertexAttribI4ubvEXT(uint @index, byte[] @v) {
            fixed (byte *ptr_v = @v) {
                Native_VertexAttribI4ubvEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4ui")]
        static extern void Native_VertexAttribI4ui(uint @index, uint @x, uint @y, uint @z, uint @w);

        public void VertexAttribI4ui(uint @index, uint @x, uint @y, uint @z, uint @w) {
            Native_VertexAttribI4ui(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4uiEXT")]
        static extern void Native_VertexAttribI4uiEXT(uint @index, uint @x, uint @y, uint @z, uint @w);

        public void VertexAttribI4uiEXT(uint @index, uint @x, uint @y, uint @z, uint @w) {
            Native_VertexAttribI4uiEXT(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4uiv")]
        static extern void Native_VertexAttribI4uiv(uint @index, uint* @v);

        public void VertexAttribI4uiv(uint @index, uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_VertexAttribI4uiv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4uivEXT")]
        static extern void Native_VertexAttribI4uivEXT(uint @index, uint* @v);

        public void VertexAttribI4uivEXT(uint @index, uint[] @v) {
            fixed (uint *ptr_v = @v) {
                Native_VertexAttribI4uivEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4usv")]
        static extern void Native_VertexAttribI4usv(uint @index, ushort* @v);

        public void VertexAttribI4usv(uint @index, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_VertexAttribI4usv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribI4usvEXT")]
        static extern void Native_VertexAttribI4usvEXT(uint @index, ushort* @v);

        public void VertexAttribI4usvEXT(uint @index, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_VertexAttribI4usvEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribIFormat")]
        static extern void Native_VertexAttribIFormat(uint @attribindex, int @size, uint @type, uint @relativeoffset);

        public void VertexAttribIFormat(uint @attribindex, int @size, uint @type, uint @relativeoffset) {
            Native_VertexAttribIFormat(@attribindex, @size, @type, @relativeoffset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribIFormatNV")]
        static extern void Native_VertexAttribIFormatNV(uint @index, int @size, uint @type, int @stride);

        public void VertexAttribIFormatNV(uint @index, int @size, uint @type, int @stride) {
            Native_VertexAttribIFormatNV(@index, @size, @type, @stride);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribIPointer")]
        static extern void Native_VertexAttribIPointer(uint @index, int @size, GlVertexAttribPointerType @type, int @stride, byte* @pointer);

        public void VertexAttribIPointer(uint @index, int @size, GlVertexAttribPointerType @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_VertexAttribIPointer(@index, @size, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribIPointerEXT")]
        static extern void Native_VertexAttribIPointerEXT(uint @index, int @size, GlVertexAttribPointerType @type, int @stride, byte* @pointer);

        public void VertexAttribIPointerEXT(uint @index, int @size, GlVertexAttribPointerType @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_VertexAttribIPointerEXT(@index, @size, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL1d")]
        static extern void Native_VertexAttribL1d(uint @index, double @x);

        public void VertexAttribL1d(uint @index, double @x) {
            Native_VertexAttribL1d(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL1dEXT")]
        static extern void Native_VertexAttribL1dEXT(uint @index, double @x);

        public void VertexAttribL1dEXT(uint @index, double @x) {
            Native_VertexAttribL1dEXT(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL1dv")]
        static extern void Native_VertexAttribL1dv(uint @index, double* @v);

        public void VertexAttribL1dv(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttribL1dv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL1dvEXT")]
        static extern void Native_VertexAttribL1dvEXT(uint @index, double* @v);

        public void VertexAttribL1dvEXT(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttribL1dvEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL1i64NV")]
        static extern void Native_VertexAttribL1i64NV(uint @index, long @x);

        public void VertexAttribL1i64NV(uint @index, long @x) {
            Native_VertexAttribL1i64NV(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL1i64vNV")]
        static extern void Native_VertexAttribL1i64vNV(uint @index, long* @v);

        public void VertexAttribL1i64vNV(uint @index, long[] @v) {
            fixed (long *ptr_v = @v) {
                Native_VertexAttribL1i64vNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL1ui64ARB")]
        static extern void Native_VertexAttribL1ui64ARB(uint @index, ulong @x);

        public void VertexAttribL1ui64ARB(uint @index, ulong @x) {
            Native_VertexAttribL1ui64ARB(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL1ui64NV")]
        static extern void Native_VertexAttribL1ui64NV(uint @index, ulong @x);

        public void VertexAttribL1ui64NV(uint @index, ulong @x) {
            Native_VertexAttribL1ui64NV(@index, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL1ui64vARB")]
        static extern void Native_VertexAttribL1ui64vARB(uint @index, ulong* @v);

        public void VertexAttribL1ui64vARB(uint @index, ulong[] @v) {
            fixed (ulong *ptr_v = @v) {
                Native_VertexAttribL1ui64vARB(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL1ui64vNV")]
        static extern void Native_VertexAttribL1ui64vNV(uint @index, ulong* @v);

        public void VertexAttribL1ui64vNV(uint @index, ulong[] @v) {
            fixed (ulong *ptr_v = @v) {
                Native_VertexAttribL1ui64vNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL2d")]
        static extern void Native_VertexAttribL2d(uint @index, double @x, double @y);

        public void VertexAttribL2d(uint @index, double @x, double @y) {
            Native_VertexAttribL2d(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL2dEXT")]
        static extern void Native_VertexAttribL2dEXT(uint @index, double @x, double @y);

        public void VertexAttribL2dEXT(uint @index, double @x, double @y) {
            Native_VertexAttribL2dEXT(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL2dv")]
        static extern void Native_VertexAttribL2dv(uint @index, double* @v);

        public void VertexAttribL2dv(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttribL2dv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL2dvEXT")]
        static extern void Native_VertexAttribL2dvEXT(uint @index, double* @v);

        public void VertexAttribL2dvEXT(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttribL2dvEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL2i64NV")]
        static extern void Native_VertexAttribL2i64NV(uint @index, long @x, long @y);

        public void VertexAttribL2i64NV(uint @index, long @x, long @y) {
            Native_VertexAttribL2i64NV(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL2i64vNV")]
        static extern void Native_VertexAttribL2i64vNV(uint @index, long* @v);

        public void VertexAttribL2i64vNV(uint @index, long[] @v) {
            fixed (long *ptr_v = @v) {
                Native_VertexAttribL2i64vNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL2ui64NV")]
        static extern void Native_VertexAttribL2ui64NV(uint @index, ulong @x, ulong @y);

        public void VertexAttribL2ui64NV(uint @index, ulong @x, ulong @y) {
            Native_VertexAttribL2ui64NV(@index, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL2ui64vNV")]
        static extern void Native_VertexAttribL2ui64vNV(uint @index, ulong* @v);

        public void VertexAttribL2ui64vNV(uint @index, ulong[] @v) {
            fixed (ulong *ptr_v = @v) {
                Native_VertexAttribL2ui64vNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL3d")]
        static extern void Native_VertexAttribL3d(uint @index, double @x, double @y, double @z);

        public void VertexAttribL3d(uint @index, double @x, double @y, double @z) {
            Native_VertexAttribL3d(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL3dEXT")]
        static extern void Native_VertexAttribL3dEXT(uint @index, double @x, double @y, double @z);

        public void VertexAttribL3dEXT(uint @index, double @x, double @y, double @z) {
            Native_VertexAttribL3dEXT(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL3dv")]
        static extern void Native_VertexAttribL3dv(uint @index, double* @v);

        public void VertexAttribL3dv(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttribL3dv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL3dvEXT")]
        static extern void Native_VertexAttribL3dvEXT(uint @index, double* @v);

        public void VertexAttribL3dvEXT(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttribL3dvEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL3i64NV")]
        static extern void Native_VertexAttribL3i64NV(uint @index, long @x, long @y, long @z);

        public void VertexAttribL3i64NV(uint @index, long @x, long @y, long @z) {
            Native_VertexAttribL3i64NV(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL3i64vNV")]
        static extern void Native_VertexAttribL3i64vNV(uint @index, long* @v);

        public void VertexAttribL3i64vNV(uint @index, long[] @v) {
            fixed (long *ptr_v = @v) {
                Native_VertexAttribL3i64vNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL3ui64NV")]
        static extern void Native_VertexAttribL3ui64NV(uint @index, ulong @x, ulong @y, ulong @z);

        public void VertexAttribL3ui64NV(uint @index, ulong @x, ulong @y, ulong @z) {
            Native_VertexAttribL3ui64NV(@index, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL3ui64vNV")]
        static extern void Native_VertexAttribL3ui64vNV(uint @index, ulong* @v);

        public void VertexAttribL3ui64vNV(uint @index, ulong[] @v) {
            fixed (ulong *ptr_v = @v) {
                Native_VertexAttribL3ui64vNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL4d")]
        static extern void Native_VertexAttribL4d(uint @index, double @x, double @y, double @z, double @w);

        public void VertexAttribL4d(uint @index, double @x, double @y, double @z, double @w) {
            Native_VertexAttribL4d(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL4dEXT")]
        static extern void Native_VertexAttribL4dEXT(uint @index, double @x, double @y, double @z, double @w);

        public void VertexAttribL4dEXT(uint @index, double @x, double @y, double @z, double @w) {
            Native_VertexAttribL4dEXT(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL4dv")]
        static extern void Native_VertexAttribL4dv(uint @index, double* @v);

        public void VertexAttribL4dv(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttribL4dv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL4dvEXT")]
        static extern void Native_VertexAttribL4dvEXT(uint @index, double* @v);

        public void VertexAttribL4dvEXT(uint @index, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttribL4dvEXT(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL4i64NV")]
        static extern void Native_VertexAttribL4i64NV(uint @index, long @x, long @y, long @z, long @w);

        public void VertexAttribL4i64NV(uint @index, long @x, long @y, long @z, long @w) {
            Native_VertexAttribL4i64NV(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL4i64vNV")]
        static extern void Native_VertexAttribL4i64vNV(uint @index, long* @v);

        public void VertexAttribL4i64vNV(uint @index, long[] @v) {
            fixed (long *ptr_v = @v) {
                Native_VertexAttribL4i64vNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL4ui64NV")]
        static extern void Native_VertexAttribL4ui64NV(uint @index, ulong @x, ulong @y, ulong @z, ulong @w);

        public void VertexAttribL4ui64NV(uint @index, ulong @x, ulong @y, ulong @z, ulong @w) {
            Native_VertexAttribL4ui64NV(@index, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribL4ui64vNV")]
        static extern void Native_VertexAttribL4ui64vNV(uint @index, ulong* @v);

        public void VertexAttribL4ui64vNV(uint @index, ulong[] @v) {
            fixed (ulong *ptr_v = @v) {
                Native_VertexAttribL4ui64vNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribLFormat")]
        static extern void Native_VertexAttribLFormat(uint @attribindex, int @size, GlVertexAttribType @type, uint @relativeoffset);

        public void VertexAttribLFormat(uint @attribindex, int @size, GlVertexAttribType @type, uint @relativeoffset) {
            Native_VertexAttribLFormat(@attribindex, @size, @type, @relativeoffset);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribLFormatNV")]
        static extern void Native_VertexAttribLFormatNV(uint @index, int @size, GlVertexAttribType @type, int @stride);

        public void VertexAttribLFormatNV(uint @index, int @size, GlVertexAttribType @type, int @stride) {
            Native_VertexAttribLFormatNV(@index, @size, @type, @stride);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribLPointer")]
        static extern void Native_VertexAttribLPointer(uint @index, int @size, GlVertexAttribPointerType @type, int @stride, byte* @pointer);

        public void VertexAttribLPointer(uint @index, int @size, GlVertexAttribPointerType @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_VertexAttribLPointer(@index, @size, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribLPointerEXT")]
        static extern void Native_VertexAttribLPointerEXT(uint @index, int @size, GlVertexAttribPointerType @type, int @stride, byte* @pointer);

        public void VertexAttribLPointerEXT(uint @index, int @size, GlVertexAttribPointerType @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_VertexAttribLPointerEXT(@index, @size, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribP1ui")]
        static extern void Native_VertexAttribP1ui(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint @value);

        public void VertexAttribP1ui(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint @value) {
            Native_VertexAttribP1ui(@index, @type, @normalized, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribP1uiv")]
        static extern void Native_VertexAttribP1uiv(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint* @value);

        public void VertexAttribP1uiv(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_VertexAttribP1uiv(@index, @type, @normalized, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribP2ui")]
        static extern void Native_VertexAttribP2ui(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint @value);

        public void VertexAttribP2ui(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint @value) {
            Native_VertexAttribP2ui(@index, @type, @normalized, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribP2uiv")]
        static extern void Native_VertexAttribP2uiv(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint* @value);

        public void VertexAttribP2uiv(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_VertexAttribP2uiv(@index, @type, @normalized, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribP3ui")]
        static extern void Native_VertexAttribP3ui(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint @value);

        public void VertexAttribP3ui(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint @value) {
            Native_VertexAttribP3ui(@index, @type, @normalized, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribP3uiv")]
        static extern void Native_VertexAttribP3uiv(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint* @value);

        public void VertexAttribP3uiv(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_VertexAttribP3uiv(@index, @type, @normalized, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribP4ui")]
        static extern void Native_VertexAttribP4ui(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint @value);

        public void VertexAttribP4ui(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint @value) {
            Native_VertexAttribP4ui(@index, @type, @normalized, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribP4uiv")]
        static extern void Native_VertexAttribP4uiv(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint* @value);

        public void VertexAttribP4uiv(uint @index, GlVertexAttribPointerType @type, GlBoolean @normalized, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_VertexAttribP4uiv(@index, @type, @normalized, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribParameteriAMD")]
        static extern void Native_VertexAttribParameteriAMD(uint @index, uint @pname, int @param);

        public void VertexAttribParameteriAMD(uint @index, uint @pname, int @param) {
            Native_VertexAttribParameteriAMD(@index, @pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribPointer")]
        static extern void Native_VertexAttribPointer(uint @index, int @size, GlVertexAttribPointerType @type, GlBoolean @normalized, int @stride, byte* @pointer);

        public void VertexAttribPointer(uint @index, int @size, GlVertexAttribPointerType @type, GlBoolean @normalized, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_VertexAttribPointer(@index, @size, @type, @normalized, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribPointerARB")]
        static extern void Native_VertexAttribPointerARB(uint @index, int @size, GlVertexAttribPointerType @type, GlBoolean @normalized, int @stride, byte* @pointer);

        public void VertexAttribPointerARB(uint @index, int @size, GlVertexAttribPointerType @type, GlBoolean @normalized, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_VertexAttribPointerARB(@index, @size, @type, @normalized, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribPointerNV")]
        static extern void Native_VertexAttribPointerNV(uint @index, int @fsize, uint @type, int @stride, byte* @pointer);

        public void VertexAttribPointerNV(uint @index, int @fsize, uint @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_VertexAttribPointerNV(@index, @fsize, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs1dvNV")]
        static extern void Native_VertexAttribs1dvNV(uint @index, int @count, double* @v);

        public void VertexAttribs1dvNV(uint @index, int @count, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttribs1dvNV(@index, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs1fvNV")]
        static extern void Native_VertexAttribs1fvNV(uint @index, int @count, float* @v);

        public void VertexAttribs1fvNV(uint @index, int @count, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttribs1fvNV(@index, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs1hvNV")]
        static extern void Native_VertexAttribs1hvNV(uint @index, int @n, ushort* @v);

        public void VertexAttribs1hvNV(uint @index, int @n, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_VertexAttribs1hvNV(@index, @n, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs1svNV")]
        static extern void Native_VertexAttribs1svNV(uint @index, int @count, short* @v);

        public void VertexAttribs1svNV(uint @index, int @count, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttribs1svNV(@index, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs2dvNV")]
        static extern void Native_VertexAttribs2dvNV(uint @index, int @count, double* @v);

        public void VertexAttribs2dvNV(uint @index, int @count, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttribs2dvNV(@index, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs2fvNV")]
        static extern void Native_VertexAttribs2fvNV(uint @index, int @count, float* @v);

        public void VertexAttribs2fvNV(uint @index, int @count, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttribs2fvNV(@index, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs2hvNV")]
        static extern void Native_VertexAttribs2hvNV(uint @index, int @n, ushort* @v);

        public void VertexAttribs2hvNV(uint @index, int @n, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_VertexAttribs2hvNV(@index, @n, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs2svNV")]
        static extern void Native_VertexAttribs2svNV(uint @index, int @count, short* @v);

        public void VertexAttribs2svNV(uint @index, int @count, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttribs2svNV(@index, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs3dvNV")]
        static extern void Native_VertexAttribs3dvNV(uint @index, int @count, double* @v);

        public void VertexAttribs3dvNV(uint @index, int @count, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttribs3dvNV(@index, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs3fvNV")]
        static extern void Native_VertexAttribs3fvNV(uint @index, int @count, float* @v);

        public void VertexAttribs3fvNV(uint @index, int @count, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttribs3fvNV(@index, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs3hvNV")]
        static extern void Native_VertexAttribs3hvNV(uint @index, int @n, ushort* @v);

        public void VertexAttribs3hvNV(uint @index, int @n, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_VertexAttribs3hvNV(@index, @n, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs3svNV")]
        static extern void Native_VertexAttribs3svNV(uint @index, int @count, short* @v);

        public void VertexAttribs3svNV(uint @index, int @count, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttribs3svNV(@index, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs4dvNV")]
        static extern void Native_VertexAttribs4dvNV(uint @index, int @count, double* @v);

        public void VertexAttribs4dvNV(uint @index, int @count, double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_VertexAttribs4dvNV(@index, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs4fvNV")]
        static extern void Native_VertexAttribs4fvNV(uint @index, int @count, float* @v);

        public void VertexAttribs4fvNV(uint @index, int @count, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_VertexAttribs4fvNV(@index, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs4hvNV")]
        static extern void Native_VertexAttribs4hvNV(uint @index, int @n, ushort* @v);

        public void VertexAttribs4hvNV(uint @index, int @n, ushort[] @v) {
            fixed (ushort *ptr_v = @v) {
                Native_VertexAttribs4hvNV(@index, @n, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs4svNV")]
        static extern void Native_VertexAttribs4svNV(uint @index, int @count, short* @v);

        public void VertexAttribs4svNV(uint @index, int @count, short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_VertexAttribs4svNV(@index, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexAttribs4ubvNV")]
        static extern void Native_VertexAttribs4ubvNV(uint @index, int @count, byte* @v);

        public void VertexAttribs4ubvNV(uint @index, int @count, byte[] @v) {
            fixed (byte *ptr_v = @v) {
                Native_VertexAttribs4ubvNV(@index, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexBindingDivisor")]
        static extern void Native_VertexBindingDivisor(uint @bindingindex, uint @divisor);

        public void VertexBindingDivisor(uint @bindingindex, uint @divisor) {
            Native_VertexBindingDivisor(@bindingindex, @divisor);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexBlendARB")]
        static extern void Native_VertexBlendARB(int @count);

        public void VertexBlendARB(int @count) {
            Native_VertexBlendARB(@count);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexBlendEnvfATI")]
        static extern void Native_VertexBlendEnvfATI(uint @pname, float @param);

        public void VertexBlendEnvfATI(uint @pname, float @param) {
            Native_VertexBlendEnvfATI(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexBlendEnviATI")]
        static extern void Native_VertexBlendEnviATI(uint @pname, int @param);

        public void VertexBlendEnviATI(uint @pname, int @param) {
            Native_VertexBlendEnviATI(@pname, @param);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexFormatNV")]
        static extern void Native_VertexFormatNV(int @size, GlVertexPointerType @type, int @stride);

        public void VertexFormatNV(int @size, GlVertexPointerType @type, int @stride) {
            Native_VertexFormatNV(@size, @type, @stride);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexP2ui")]
        static extern void Native_VertexP2ui(GlVertexPointerType @type, uint @value);

        public void VertexP2ui(GlVertexPointerType @type, uint @value) {
            Native_VertexP2ui(@type, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexP2uiv")]
        static extern void Native_VertexP2uiv(GlVertexPointerType @type, uint* @value);

        public void VertexP2uiv(GlVertexPointerType @type, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_VertexP2uiv(@type, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexP3ui")]
        static extern void Native_VertexP3ui(GlVertexPointerType @type, uint @value);

        public void VertexP3ui(GlVertexPointerType @type, uint @value) {
            Native_VertexP3ui(@type, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexP3uiv")]
        static extern void Native_VertexP3uiv(GlVertexPointerType @type, uint* @value);

        public void VertexP3uiv(GlVertexPointerType @type, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_VertexP3uiv(@type, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexP4ui")]
        static extern void Native_VertexP4ui(GlVertexPointerType @type, uint @value);

        public void VertexP4ui(GlVertexPointerType @type, uint @value) {
            Native_VertexP4ui(@type, @value);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexP4uiv")]
        static extern void Native_VertexP4uiv(GlVertexPointerType @type, uint* @value);

        public void VertexP4uiv(GlVertexPointerType @type, uint[] @value) {
            fixed (uint *ptr_value = @value) {
                Native_VertexP4uiv(@type, @ptr_value);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexPointer")]
        static extern void Native_VertexPointer(int @size, GlVertexPointerType @type, int @stride, byte* @pointer);

        public void VertexPointer(int @size, GlVertexPointerType @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_VertexPointer(@size, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexPointerEXT")]
        static extern void Native_VertexPointerEXT(int @size, GlVertexPointerType @type, int @stride, int @count, byte* @pointer);

        public void VertexPointerEXT(int @size, GlVertexPointerType @type, int @stride, int @count, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_VertexPointerEXT(@size, @type, @stride, @count, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexPointerListIBM")]
        static extern void Native_VertexPointerListIBM(int @size, GlVertexPointerType @type, int @stride, byte** @pointer, int @ptrstride);

        public void VertexPointerListIBM(int @size, GlVertexPointerType @type, int @stride, byte[][] @pointer, int @ptrstride) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_VertexPointerListIBM(@size, @type, @stride, (byte **) ptr_pointer.ToPointer(), @ptrstride);
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexPointervINTEL")]
        static extern void Native_VertexPointervINTEL(int @size, GlVertexPointerType @type, byte** @pointer);

        public void VertexPointervINTEL(int @size, GlVertexPointerType @type, byte[][] @pointer) {
            IntPtr ptr_pointer = Marshal.AllocHGlobal(@pointer.Length * sizeof(void *));
            try {
                ConvertDoubleArray_byte(ptr_pointer, @pointer, (void **) ptr_pointer.ToPointer(), 0, __fixedLocals => {
                    Native_VertexPointervINTEL(@size, @type, (byte **) ptr_pointer.ToPointer());
                }, new void *[0]);
            } finally {
                Marshal.FreeHGlobal(ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream1dATI")]
        static extern void Native_VertexStream1dATI(uint @stream, double @x);

        public void VertexStream1dATI(uint @stream, double @x) {
            Native_VertexStream1dATI(@stream, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream1dvATI")]
        static extern void Native_VertexStream1dvATI(uint @stream, double* @coords);

        public void VertexStream1dvATI(uint @stream, double[] @coords) {
            fixed (double *ptr_coords = @coords) {
                Native_VertexStream1dvATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream1fATI")]
        static extern void Native_VertexStream1fATI(uint @stream, float @x);

        public void VertexStream1fATI(uint @stream, float @x) {
            Native_VertexStream1fATI(@stream, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream1fvATI")]
        static extern void Native_VertexStream1fvATI(uint @stream, float* @coords);

        public void VertexStream1fvATI(uint @stream, float[] @coords) {
            fixed (float *ptr_coords = @coords) {
                Native_VertexStream1fvATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream1iATI")]
        static extern void Native_VertexStream1iATI(uint @stream, int @x);

        public void VertexStream1iATI(uint @stream, int @x) {
            Native_VertexStream1iATI(@stream, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream1ivATI")]
        static extern void Native_VertexStream1ivATI(uint @stream, int* @coords);

        public void VertexStream1ivATI(uint @stream, int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_VertexStream1ivATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream1sATI")]
        static extern void Native_VertexStream1sATI(uint @stream, short @x);

        public void VertexStream1sATI(uint @stream, short @x) {
            Native_VertexStream1sATI(@stream, @x);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream1svATI")]
        static extern void Native_VertexStream1svATI(uint @stream, short* @coords);

        public void VertexStream1svATI(uint @stream, short[] @coords) {
            fixed (short *ptr_coords = @coords) {
                Native_VertexStream1svATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream2dATI")]
        static extern void Native_VertexStream2dATI(uint @stream, double @x, double @y);

        public void VertexStream2dATI(uint @stream, double @x, double @y) {
            Native_VertexStream2dATI(@stream, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream2dvATI")]
        static extern void Native_VertexStream2dvATI(uint @stream, double* @coords);

        public void VertexStream2dvATI(uint @stream, double[] @coords) {
            fixed (double *ptr_coords = @coords) {
                Native_VertexStream2dvATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream2fATI")]
        static extern void Native_VertexStream2fATI(uint @stream, float @x, float @y);

        public void VertexStream2fATI(uint @stream, float @x, float @y) {
            Native_VertexStream2fATI(@stream, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream2fvATI")]
        static extern void Native_VertexStream2fvATI(uint @stream, float* @coords);

        public void VertexStream2fvATI(uint @stream, float[] @coords) {
            fixed (float *ptr_coords = @coords) {
                Native_VertexStream2fvATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream2iATI")]
        static extern void Native_VertexStream2iATI(uint @stream, int @x, int @y);

        public void VertexStream2iATI(uint @stream, int @x, int @y) {
            Native_VertexStream2iATI(@stream, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream2ivATI")]
        static extern void Native_VertexStream2ivATI(uint @stream, int* @coords);

        public void VertexStream2ivATI(uint @stream, int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_VertexStream2ivATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream2sATI")]
        static extern void Native_VertexStream2sATI(uint @stream, short @x, short @y);

        public void VertexStream2sATI(uint @stream, short @x, short @y) {
            Native_VertexStream2sATI(@stream, @x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream2svATI")]
        static extern void Native_VertexStream2svATI(uint @stream, short* @coords);

        public void VertexStream2svATI(uint @stream, short[] @coords) {
            fixed (short *ptr_coords = @coords) {
                Native_VertexStream2svATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream3dATI")]
        static extern void Native_VertexStream3dATI(uint @stream, double @x, double @y, double @z);

        public void VertexStream3dATI(uint @stream, double @x, double @y, double @z) {
            Native_VertexStream3dATI(@stream, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream3dvATI")]
        static extern void Native_VertexStream3dvATI(uint @stream, double* @coords);

        public void VertexStream3dvATI(uint @stream, double[] @coords) {
            fixed (double *ptr_coords = @coords) {
                Native_VertexStream3dvATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream3fATI")]
        static extern void Native_VertexStream3fATI(uint @stream, float @x, float @y, float @z);

        public void VertexStream3fATI(uint @stream, float @x, float @y, float @z) {
            Native_VertexStream3fATI(@stream, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream3fvATI")]
        static extern void Native_VertexStream3fvATI(uint @stream, float* @coords);

        public void VertexStream3fvATI(uint @stream, float[] @coords) {
            fixed (float *ptr_coords = @coords) {
                Native_VertexStream3fvATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream3iATI")]
        static extern void Native_VertexStream3iATI(uint @stream, int @x, int @y, int @z);

        public void VertexStream3iATI(uint @stream, int @x, int @y, int @z) {
            Native_VertexStream3iATI(@stream, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream3ivATI")]
        static extern void Native_VertexStream3ivATI(uint @stream, int* @coords);

        public void VertexStream3ivATI(uint @stream, int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_VertexStream3ivATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream3sATI")]
        static extern void Native_VertexStream3sATI(uint @stream, short @x, short @y, short @z);

        public void VertexStream3sATI(uint @stream, short @x, short @y, short @z) {
            Native_VertexStream3sATI(@stream, @x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream3svATI")]
        static extern void Native_VertexStream3svATI(uint @stream, short* @coords);

        public void VertexStream3svATI(uint @stream, short[] @coords) {
            fixed (short *ptr_coords = @coords) {
                Native_VertexStream3svATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream4dATI")]
        static extern void Native_VertexStream4dATI(uint @stream, double @x, double @y, double @z, double @w);

        public void VertexStream4dATI(uint @stream, double @x, double @y, double @z, double @w) {
            Native_VertexStream4dATI(@stream, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream4dvATI")]
        static extern void Native_VertexStream4dvATI(uint @stream, double* @coords);

        public void VertexStream4dvATI(uint @stream, double[] @coords) {
            fixed (double *ptr_coords = @coords) {
                Native_VertexStream4dvATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream4fATI")]
        static extern void Native_VertexStream4fATI(uint @stream, float @x, float @y, float @z, float @w);

        public void VertexStream4fATI(uint @stream, float @x, float @y, float @z, float @w) {
            Native_VertexStream4fATI(@stream, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream4fvATI")]
        static extern void Native_VertexStream4fvATI(uint @stream, float* @coords);

        public void VertexStream4fvATI(uint @stream, float[] @coords) {
            fixed (float *ptr_coords = @coords) {
                Native_VertexStream4fvATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream4iATI")]
        static extern void Native_VertexStream4iATI(uint @stream, int @x, int @y, int @z, int @w);

        public void VertexStream4iATI(uint @stream, int @x, int @y, int @z, int @w) {
            Native_VertexStream4iATI(@stream, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream4ivATI")]
        static extern void Native_VertexStream4ivATI(uint @stream, int* @coords);

        public void VertexStream4ivATI(uint @stream, int[] @coords) {
            fixed (int *ptr_coords = @coords) {
                Native_VertexStream4ivATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream4sATI")]
        static extern void Native_VertexStream4sATI(uint @stream, short @x, short @y, short @z, short @w);

        public void VertexStream4sATI(uint @stream, short @x, short @y, short @z, short @w) {
            Native_VertexStream4sATI(@stream, @x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexStream4svATI")]
        static extern void Native_VertexStream4svATI(uint @stream, short* @coords);

        public void VertexStream4svATI(uint @stream, short[] @coords) {
            fixed (short *ptr_coords = @coords) {
                Native_VertexStream4svATI(@stream, @ptr_coords);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexWeightPointerEXT")]
        static extern void Native_VertexWeightPointerEXT(int @size, uint @type, int @stride, byte* @pointer);

        public void VertexWeightPointerEXT(int @size, uint @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_VertexWeightPointerEXT(@size, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexWeightfEXT")]
        static extern void Native_VertexWeightfEXT(float @weight);

        public void VertexWeightfEXT(float @weight) {
            Native_VertexWeightfEXT(@weight);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexWeightfvEXT")]
        static extern void Native_VertexWeightfvEXT(float* @weight);

        public void VertexWeightfvEXT(float[] @weight) {
            fixed (float *ptr_weight = @weight) {
                Native_VertexWeightfvEXT(@ptr_weight);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexWeighthNV")]
        static extern void Native_VertexWeighthNV(ushort @weight);

        public void VertexWeighthNV(ushort @weight) {
            Native_VertexWeighthNV(@weight);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVertexWeighthvNV")]
        static extern void Native_VertexWeighthvNV(ushort* @weight);

        public void VertexWeighthvNV(ushort[] @weight) {
            fixed (ushort *ptr_weight = @weight) {
                Native_VertexWeighthvNV(@ptr_weight);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVideoCaptureNV")]
        static extern uint Native_VideoCaptureNV(uint @video_capture_slot, uint* @sequence_num, ulong* @capture_time);

        public uint VideoCaptureNV(uint @video_capture_slot, uint[] @sequence_num, ulong[] @capture_time) {
            fixed (uint *ptr_sequence_num = @sequence_num) {
                fixed (ulong *ptr_capture_time = @capture_time) {
                    return Native_VideoCaptureNV(@video_capture_slot, @ptr_sequence_num, @ptr_capture_time);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVideoCaptureStreamParameterdvNV")]
        static extern void Native_VideoCaptureStreamParameterdvNV(uint @video_capture_slot, uint @stream, uint @pname, double* @params);

        public void VideoCaptureStreamParameterdvNV(uint @video_capture_slot, uint @stream, uint @pname, double[] @params) {
            fixed (double *ptr_params = @params) {
                Native_VideoCaptureStreamParameterdvNV(@video_capture_slot, @stream, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVideoCaptureStreamParameterfvNV")]
        static extern void Native_VideoCaptureStreamParameterfvNV(uint @video_capture_slot, uint @stream, uint @pname, float* @params);

        public void VideoCaptureStreamParameterfvNV(uint @video_capture_slot, uint @stream, uint @pname, float[] @params) {
            fixed (float *ptr_params = @params) {
                Native_VideoCaptureStreamParameterfvNV(@video_capture_slot, @stream, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glVideoCaptureStreamParameterivNV")]
        static extern void Native_VideoCaptureStreamParameterivNV(uint @video_capture_slot, uint @stream, uint @pname, int* @params);

        public void VideoCaptureStreamParameterivNV(uint @video_capture_slot, uint @stream, uint @pname, int[] @params) {
            fixed (int *ptr_params = @params) {
                Native_VideoCaptureStreamParameterivNV(@video_capture_slot, @stream, @pname, @ptr_params);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glViewport")]
        static extern void Native_Viewport(int @x, int @y, int @width, int @height);

        public void Viewport(int @x, int @y, int @width, int @height) {
            Native_Viewport(@x, @y, @width, @height);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glViewportArrayv")]
        static extern void Native_ViewportArrayv(uint @first, int @count, float* @v);

        public void ViewportArrayv(uint @first, int @count, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_ViewportArrayv(@first, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glViewportArrayvNV")]
        static extern void Native_ViewportArrayvNV(uint @first, int @count, float* @v);

        public void ViewportArrayvNV(uint @first, int @count, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_ViewportArrayvNV(@first, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glViewportArrayvOES")]
        static extern void Native_ViewportArrayvOES(uint @first, int @count, float* @v);

        public void ViewportArrayvOES(uint @first, int @count, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_ViewportArrayvOES(@first, @count, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glViewportIndexedf")]
        static extern void Native_ViewportIndexedf(uint @index, float @x, float @y, float @w, float @h);

        public void ViewportIndexedf(uint @index, float @x, float @y, float @w, float @h) {
            Native_ViewportIndexedf(@index, @x, @y, @w, @h);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glViewportIndexedfOES")]
        static extern void Native_ViewportIndexedfOES(uint @index, float @x, float @y, float @w, float @h);

        public void ViewportIndexedfOES(uint @index, float @x, float @y, float @w, float @h) {
            Native_ViewportIndexedfOES(@index, @x, @y, @w, @h);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glViewportIndexedfNV")]
        static extern void Native_ViewportIndexedfNV(uint @index, float @x, float @y, float @w, float @h);

        public void ViewportIndexedfNV(uint @index, float @x, float @y, float @w, float @h) {
            Native_ViewportIndexedfNV(@index, @x, @y, @w, @h);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glViewportIndexedfv")]
        static extern void Native_ViewportIndexedfv(uint @index, float* @v);

        public void ViewportIndexedfv(uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_ViewportIndexedfv(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glViewportIndexedfvOES")]
        static extern void Native_ViewportIndexedfvOES(uint @index, float* @v);

        public void ViewportIndexedfvOES(uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_ViewportIndexedfvOES(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glViewportIndexedfvNV")]
        static extern void Native_ViewportIndexedfvNV(uint @index, float* @v);

        public void ViewportIndexedfvNV(uint @index, float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_ViewportIndexedfvNV(@index, @ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glViewportPositionWScaleNV")]
        static extern void Native_ViewportPositionWScaleNV(uint @index, float @xcoeff, float @ycoeff);

        public void ViewportPositionWScaleNV(uint @index, float @xcoeff, float @ycoeff) {
            Native_ViewportPositionWScaleNV(@index, @xcoeff, @ycoeff);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glViewportSwizzleNV")]
        static extern void Native_ViewportSwizzleNV(uint @index, uint @swizzlex, uint @swizzley, uint @swizzlez, uint @swizzlew);

        public void ViewportSwizzleNV(uint @index, uint @swizzlex, uint @swizzley, uint @swizzlez, uint @swizzlew) {
            Native_ViewportSwizzleNV(@index, @swizzlex, @swizzley, @swizzlez, @swizzlew);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWaitSemaphoreEXT")]
        static extern void Native_WaitSemaphoreEXT(uint @semaphore, uint @numBufferBarriers, uint* @buffers, uint @numTextureBarriers, uint* @textures, GlTextureLayout* @srcLayouts);

        public void WaitSemaphoreEXT(uint @semaphore, uint @numBufferBarriers, uint[] @buffers, uint @numTextureBarriers, uint[] @textures, GlTextureLayout[] @srcLayouts) {
            fixed (uint *ptr_buffers = @buffers) {
                fixed (uint *ptr_textures = @textures) {
                    fixed (GlTextureLayout *ptr_srcLayouts = @srcLayouts) {
                        Native_WaitSemaphoreEXT(@semaphore, @numBufferBarriers, @ptr_buffers, @numTextureBarriers, @ptr_textures, @ptr_srcLayouts);
                    }
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWaitSync")]
        static extern void Native_WaitSync(IntPtr @sync, uint @flags, ulong @timeout);

        public void WaitSync(IntPtr @sync, uint @flags, ulong @timeout) {
            Native_WaitSync(@sync, @flags, @timeout);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWaitSyncAPPLE")]
        static extern void Native_WaitSyncAPPLE(IntPtr @sync, uint @flags, ulong @timeout);

        public void WaitSyncAPPLE(IntPtr @sync, uint @flags, ulong @timeout) {
            Native_WaitSyncAPPLE(@sync, @flags, @timeout);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWeightPathsNV")]
        static extern void Native_WeightPathsNV(uint @resultPath, int @numPaths, uint* @paths, float* @weights);

        public void WeightPathsNV(uint @resultPath, int @numPaths, uint[] @paths, float[] @weights) {
            fixed (uint *ptr_paths = @paths) {
                fixed (float *ptr_weights = @weights) {
                    Native_WeightPathsNV(@resultPath, @numPaths, @ptr_paths, @ptr_weights);
                }
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWeightPointerARB")]
        static extern void Native_WeightPointerARB(int @size, uint @type, int @stride, byte* @pointer);

        public void WeightPointerARB(int @size, uint @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_WeightPointerARB(@size, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWeightPointerOES")]
        static extern void Native_WeightPointerOES(int @size, uint @type, int @stride, byte* @pointer);

        public void WeightPointerOES(int @size, uint @type, int @stride, byte[] @pointer) {
            fixed (byte *ptr_pointer = @pointer) {
                Native_WeightPointerOES(@size, @type, @stride, @ptr_pointer);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWeightbvARB")]
        static extern void Native_WeightbvARB(int @size, sbyte* @weights);

        public void WeightbvARB(int @size, sbyte[] @weights) {
            fixed (sbyte *ptr_weights = @weights) {
                Native_WeightbvARB(@size, @ptr_weights);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWeightdvARB")]
        static extern void Native_WeightdvARB(int @size, double* @weights);

        public void WeightdvARB(int @size, double[] @weights) {
            fixed (double *ptr_weights = @weights) {
                Native_WeightdvARB(@size, @ptr_weights);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWeightfvARB")]
        static extern void Native_WeightfvARB(int @size, float* @weights);

        public void WeightfvARB(int @size, float[] @weights) {
            fixed (float *ptr_weights = @weights) {
                Native_WeightfvARB(@size, @ptr_weights);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWeightivARB")]
        static extern void Native_WeightivARB(int @size, int* @weights);

        public void WeightivARB(int @size, int[] @weights) {
            fixed (int *ptr_weights = @weights) {
                Native_WeightivARB(@size, @ptr_weights);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWeightsvARB")]
        static extern void Native_WeightsvARB(int @size, short* @weights);

        public void WeightsvARB(int @size, short[] @weights) {
            fixed (short *ptr_weights = @weights) {
                Native_WeightsvARB(@size, @ptr_weights);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWeightubvARB")]
        static extern void Native_WeightubvARB(int @size, byte* @weights);

        public void WeightubvARB(int @size, byte[] @weights) {
            fixed (byte *ptr_weights = @weights) {
                Native_WeightubvARB(@size, @ptr_weights);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWeightuivARB")]
        static extern void Native_WeightuivARB(int @size, uint* @weights);

        public void WeightuivARB(int @size, uint[] @weights) {
            fixed (uint *ptr_weights = @weights) {
                Native_WeightuivARB(@size, @ptr_weights);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWeightusvARB")]
        static extern void Native_WeightusvARB(int @size, ushort* @weights);

        public void WeightusvARB(int @size, ushort[] @weights) {
            fixed (ushort *ptr_weights = @weights) {
                Native_WeightusvARB(@size, @ptr_weights);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2d")]
        static extern void Native_WindowPos2d(double @x, double @y);

        public void WindowPos2d(double @x, double @y) {
            Native_WindowPos2d(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2dARB")]
        static extern void Native_WindowPos2dARB(double @x, double @y);

        public void WindowPos2dARB(double @x, double @y) {
            Native_WindowPos2dARB(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2dMESA")]
        static extern void Native_WindowPos2dMESA(double @x, double @y);

        public void WindowPos2dMESA(double @x, double @y) {
            Native_WindowPos2dMESA(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2dv")]
        static extern void Native_WindowPos2dv(double* @v);

        public void WindowPos2dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_WindowPos2dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2dvARB")]
        static extern void Native_WindowPos2dvARB(double* @v);

        public void WindowPos2dvARB(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_WindowPos2dvARB(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2dvMESA")]
        static extern void Native_WindowPos2dvMESA(double* @v);

        public void WindowPos2dvMESA(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_WindowPos2dvMESA(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2f")]
        static extern void Native_WindowPos2f(float @x, float @y);

        public void WindowPos2f(float @x, float @y) {
            Native_WindowPos2f(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2fARB")]
        static extern void Native_WindowPos2fARB(float @x, float @y);

        public void WindowPos2fARB(float @x, float @y) {
            Native_WindowPos2fARB(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2fMESA")]
        static extern void Native_WindowPos2fMESA(float @x, float @y);

        public void WindowPos2fMESA(float @x, float @y) {
            Native_WindowPos2fMESA(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2fv")]
        static extern void Native_WindowPos2fv(float* @v);

        public void WindowPos2fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_WindowPos2fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2fvARB")]
        static extern void Native_WindowPos2fvARB(float* @v);

        public void WindowPos2fvARB(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_WindowPos2fvARB(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2fvMESA")]
        static extern void Native_WindowPos2fvMESA(float* @v);

        public void WindowPos2fvMESA(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_WindowPos2fvMESA(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2i")]
        static extern void Native_WindowPos2i(int @x, int @y);

        public void WindowPos2i(int @x, int @y) {
            Native_WindowPos2i(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2iARB")]
        static extern void Native_WindowPos2iARB(int @x, int @y);

        public void WindowPos2iARB(int @x, int @y) {
            Native_WindowPos2iARB(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2iMESA")]
        static extern void Native_WindowPos2iMESA(int @x, int @y);

        public void WindowPos2iMESA(int @x, int @y) {
            Native_WindowPos2iMESA(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2iv")]
        static extern void Native_WindowPos2iv(int* @v);

        public void WindowPos2iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_WindowPos2iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2ivARB")]
        static extern void Native_WindowPos2ivARB(int* @v);

        public void WindowPos2ivARB(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_WindowPos2ivARB(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2ivMESA")]
        static extern void Native_WindowPos2ivMESA(int* @v);

        public void WindowPos2ivMESA(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_WindowPos2ivMESA(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2s")]
        static extern void Native_WindowPos2s(short @x, short @y);

        public void WindowPos2s(short @x, short @y) {
            Native_WindowPos2s(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2sARB")]
        static extern void Native_WindowPos2sARB(short @x, short @y);

        public void WindowPos2sARB(short @x, short @y) {
            Native_WindowPos2sARB(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2sMESA")]
        static extern void Native_WindowPos2sMESA(short @x, short @y);

        public void WindowPos2sMESA(short @x, short @y) {
            Native_WindowPos2sMESA(@x, @y);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2sv")]
        static extern void Native_WindowPos2sv(short* @v);

        public void WindowPos2sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_WindowPos2sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2svARB")]
        static extern void Native_WindowPos2svARB(short* @v);

        public void WindowPos2svARB(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_WindowPos2svARB(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos2svMESA")]
        static extern void Native_WindowPos2svMESA(short* @v);

        public void WindowPos2svMESA(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_WindowPos2svMESA(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3d")]
        static extern void Native_WindowPos3d(double @x, double @y, double @z);

        public void WindowPos3d(double @x, double @y, double @z) {
            Native_WindowPos3d(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3dARB")]
        static extern void Native_WindowPos3dARB(double @x, double @y, double @z);

        public void WindowPos3dARB(double @x, double @y, double @z) {
            Native_WindowPos3dARB(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3dMESA")]
        static extern void Native_WindowPos3dMESA(double @x, double @y, double @z);

        public void WindowPos3dMESA(double @x, double @y, double @z) {
            Native_WindowPos3dMESA(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3dv")]
        static extern void Native_WindowPos3dv(double* @v);

        public void WindowPos3dv(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_WindowPos3dv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3dvARB")]
        static extern void Native_WindowPos3dvARB(double* @v);

        public void WindowPos3dvARB(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_WindowPos3dvARB(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3dvMESA")]
        static extern void Native_WindowPos3dvMESA(double* @v);

        public void WindowPos3dvMESA(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_WindowPos3dvMESA(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3f")]
        static extern void Native_WindowPos3f(float @x, float @y, float @z);

        public void WindowPos3f(float @x, float @y, float @z) {
            Native_WindowPos3f(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3fARB")]
        static extern void Native_WindowPos3fARB(float @x, float @y, float @z);

        public void WindowPos3fARB(float @x, float @y, float @z) {
            Native_WindowPos3fARB(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3fMESA")]
        static extern void Native_WindowPos3fMESA(float @x, float @y, float @z);

        public void WindowPos3fMESA(float @x, float @y, float @z) {
            Native_WindowPos3fMESA(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3fv")]
        static extern void Native_WindowPos3fv(float* @v);

        public void WindowPos3fv(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_WindowPos3fv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3fvARB")]
        static extern void Native_WindowPos3fvARB(float* @v);

        public void WindowPos3fvARB(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_WindowPos3fvARB(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3fvMESA")]
        static extern void Native_WindowPos3fvMESA(float* @v);

        public void WindowPos3fvMESA(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_WindowPos3fvMESA(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3i")]
        static extern void Native_WindowPos3i(int @x, int @y, int @z);

        public void WindowPos3i(int @x, int @y, int @z) {
            Native_WindowPos3i(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3iARB")]
        static extern void Native_WindowPos3iARB(int @x, int @y, int @z);

        public void WindowPos3iARB(int @x, int @y, int @z) {
            Native_WindowPos3iARB(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3iMESA")]
        static extern void Native_WindowPos3iMESA(int @x, int @y, int @z);

        public void WindowPos3iMESA(int @x, int @y, int @z) {
            Native_WindowPos3iMESA(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3iv")]
        static extern void Native_WindowPos3iv(int* @v);

        public void WindowPos3iv(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_WindowPos3iv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3ivARB")]
        static extern void Native_WindowPos3ivARB(int* @v);

        public void WindowPos3ivARB(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_WindowPos3ivARB(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3ivMESA")]
        static extern void Native_WindowPos3ivMESA(int* @v);

        public void WindowPos3ivMESA(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_WindowPos3ivMESA(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3s")]
        static extern void Native_WindowPos3s(short @x, short @y, short @z);

        public void WindowPos3s(short @x, short @y, short @z) {
            Native_WindowPos3s(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3sARB")]
        static extern void Native_WindowPos3sARB(short @x, short @y, short @z);

        public void WindowPos3sARB(short @x, short @y, short @z) {
            Native_WindowPos3sARB(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3sMESA")]
        static extern void Native_WindowPos3sMESA(short @x, short @y, short @z);

        public void WindowPos3sMESA(short @x, short @y, short @z) {
            Native_WindowPos3sMESA(@x, @y, @z);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3sv")]
        static extern void Native_WindowPos3sv(short* @v);

        public void WindowPos3sv(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_WindowPos3sv(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3svARB")]
        static extern void Native_WindowPos3svARB(short* @v);

        public void WindowPos3svARB(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_WindowPos3svARB(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos3svMESA")]
        static extern void Native_WindowPos3svMESA(short* @v);

        public void WindowPos3svMESA(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_WindowPos3svMESA(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos4dMESA")]
        static extern void Native_WindowPos4dMESA(double @x, double @y, double @z, double @w);

        public void WindowPos4dMESA(double @x, double @y, double @z, double @w) {
            Native_WindowPos4dMESA(@x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos4dvMESA")]
        static extern void Native_WindowPos4dvMESA(double* @v);

        public void WindowPos4dvMESA(double[] @v) {
            fixed (double *ptr_v = @v) {
                Native_WindowPos4dvMESA(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos4fMESA")]
        static extern void Native_WindowPos4fMESA(float @x, float @y, float @z, float @w);

        public void WindowPos4fMESA(float @x, float @y, float @z, float @w) {
            Native_WindowPos4fMESA(@x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos4fvMESA")]
        static extern void Native_WindowPos4fvMESA(float* @v);

        public void WindowPos4fvMESA(float[] @v) {
            fixed (float *ptr_v = @v) {
                Native_WindowPos4fvMESA(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos4iMESA")]
        static extern void Native_WindowPos4iMESA(int @x, int @y, int @z, int @w);

        public void WindowPos4iMESA(int @x, int @y, int @z, int @w) {
            Native_WindowPos4iMESA(@x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos4ivMESA")]
        static extern void Native_WindowPos4ivMESA(int* @v);

        public void WindowPos4ivMESA(int[] @v) {
            fixed (int *ptr_v = @v) {
                Native_WindowPos4ivMESA(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos4sMESA")]
        static extern void Native_WindowPos4sMESA(short @x, short @y, short @z, short @w);

        public void WindowPos4sMESA(short @x, short @y, short @z, short @w) {
            Native_WindowPos4sMESA(@x, @y, @z, @w);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowPos4svMESA")]
        static extern void Native_WindowPos4svMESA(short* @v);

        public void WindowPos4svMESA(short[] @v) {
            fixed (short *ptr_v = @v) {
                Native_WindowPos4svMESA(@ptr_v);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWindowRectanglesEXT")]
        static extern void Native_WindowRectanglesEXT(uint @mode, int @count, int* @box);

        public void WindowRectanglesEXT(uint @mode, int @count, int[] @box) {
            fixed (int *ptr_box = @box) {
                Native_WindowRectanglesEXT(@mode, @count, @ptr_box);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWriteMaskEXT")]
        static extern void Native_WriteMaskEXT(uint @res, uint @in, uint @outX, uint @outY, uint @outZ, uint @outW);

        public void WriteMaskEXT(uint @res, uint @in, uint @outX, uint @outY, uint @outZ, uint @outW) {
            Native_WriteMaskEXT(@res, @in, @outX, @outY, @outZ, @outW);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glDrawVkImageNV")]
        static extern void Native_DrawVkImageNV(ulong @vkImage, uint @sampler, float @x0, float @y0, float @x1, float @y1, float @z, float @s0, float @t0, float @s1, float @t1);

        public void DrawVkImageNV(ulong @vkImage, uint @sampler, float @x0, float @y0, float @x1, float @y1, float @z, float @s0, float @t0, float @s1, float @t1) {
            Native_DrawVkImageNV(@vkImage, @sampler, @x0, @y0, @x1, @y1, @z, @s0, @t0, @s1, @t1);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glGetVkProcAddrNV")]
        static extern IntPtr Native_GetVkProcAddrNV(byte* @name);

        public IntPtr GetVkProcAddrNV(byte[] @name) {
            fixed (byte *ptr_name = @name) {
                return Native_GetVkProcAddrNV(@ptr_name);
            }
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glWaitVkSemaphoreNV")]
        static extern void Native_WaitVkSemaphoreNV(ulong @vkSemaphore);

        public void WaitVkSemaphoreNV(ulong @vkSemaphore) {
            Native_WaitVkSemaphoreNV(@vkSemaphore);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSignalVkSemaphoreNV")]
        static extern void Native_SignalVkSemaphoreNV(ulong @vkSemaphore);

        public void SignalVkSemaphoreNV(ulong @vkSemaphore) {
            Native_SignalVkSemaphoreNV(@vkSemaphore);
        }

        [DllImport("OpenGL32", CallingConvention = CallingConvention.Cdecl, EntryPoint = "glSignalVkFenceNV")]
        static extern void Native_SignalVkFenceNV(ulong @vkFence);

        public void SignalVkFenceNV(ulong @vkFence) {
            Native_SignalVkFenceNV(@vkFence);
        }
    }
}
