// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Com.GitHub.ZachDeibert.GraphicsCore.Platforms.Desktop
{
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLARRAYELEMENTEXTPROC(int i);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLDRAWARRAYSEXTPROC(uint mode, int first, int count);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLVERTEXPOINTEREXTPROC(int size, uint type, int stride, int count, global::System.IntPtr pointer);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLNORMALPOINTEREXTPROC(uint type, int stride, int count, global::System.IntPtr pointer);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLCOLORPOINTEREXTPROC(int size, uint type, int stride, int count, global::System.IntPtr pointer);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLINDEXPOINTEREXTPROC(uint type, int stride, int count, global::System.IntPtr pointer);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLTEXCOORDPOINTEREXTPROC(int size, uint type, int stride, int count, global::System.IntPtr pointer);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLEDGEFLAGPOINTEREXTPROC(int stride, int count, byte* pointer);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLGETPOINTERVEXTPROC(uint pname, void** @params);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLARRAYELEMENTARRAYEXTPROC(uint mode, int count, global::System.IntPtr pi);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLDRAWRANGEELEMENTSWINPROC(uint mode, uint start, uint end, int count, uint type, global::System.IntPtr indices);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLADDSWAPHINTRECTWINPROC(int x, int y, int width, int height);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLCOLORTABLEEXTPROC(uint target, uint internalFormat, int width, uint format, uint type, global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLCOLORSUBTABLEEXTPROC(uint target, int start, int count, uint format, uint type, global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLGETCOLORTABLEEXTPROC(uint target, uint format, uint type, global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLGETCOLORTABLEPARAMETERIVEXTPROC(uint target, uint pname, int* @params);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLGETCOLORTABLEPARAMETERFVEXTPROC(uint target, uint pname, float* @params);

    public unsafe partial class OpenGL
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glAccum")]
            internal static extern void GlAccum(uint op, float value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glAlphaFunc")]
            internal static extern void GlAlphaFunc(uint func, float @ref);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glAreTexturesResident")]
            internal static extern byte GlAreTexturesResident(int n, uint* textures, byte* residences);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glArrayElement")]
            internal static extern void GlArrayElement(int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glBegin")]
            internal static extern void GlBegin(uint mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glBindTexture")]
            internal static extern void GlBindTexture(uint target, uint texture);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glBitmap")]
            internal static extern void GlBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glBlendFunc")]
            internal static extern void GlBlendFunc(uint sfactor, uint dfactor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glCallList")]
            internal static extern void GlCallList(uint list);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glCallLists")]
            internal static extern void GlCallLists(int n, uint type, global::System.IntPtr lists);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glClear")]
            internal static extern void GlClear(uint mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glClearAccum")]
            internal static extern void GlClearAccum(float red, float green, float blue, float alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glClearColor")]
            internal static extern void GlClearColor(float red, float green, float blue, float alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glClearDepth")]
            internal static extern void GlClearDepth(double depth);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glClearIndex")]
            internal static extern void GlClearIndex(float c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glClearStencil")]
            internal static extern void GlClearStencil(int s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glClipPlane")]
            internal static extern void GlClipPlane(uint plane, double* equation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3b")]
            internal static extern void GlColor3b(sbyte red, sbyte green, sbyte blue);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3bv")]
            internal static extern void GlColor3bv(sbyte* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3d")]
            internal static extern void GlColor3d(double red, double green, double blue);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3dv")]
            internal static extern void GlColor3dv(double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3f")]
            internal static extern void GlColor3f(float red, float green, float blue);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3fv")]
            internal static extern void GlColor3fv(float* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3i")]
            internal static extern void GlColor3i(int red, int green, int blue);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3iv")]
            internal static extern void GlColor3iv(int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3s")]
            internal static extern void GlColor3s(short red, short green, short blue);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3sv")]
            internal static extern void GlColor3sv(short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3ub")]
            internal static extern void GlColor3ub(byte red, byte green, byte blue);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3ubv")]
            internal static extern void GlColor3ubv(byte* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3ui")]
            internal static extern void GlColor3ui(uint red, uint green, uint blue);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3uiv")]
            internal static extern void GlColor3uiv(uint* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3us")]
            internal static extern void GlColor3us(ushort red, ushort green, ushort blue);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor3usv")]
            internal static extern void GlColor3usv(ushort* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4b")]
            internal static extern void GlColor4b(sbyte red, sbyte green, sbyte blue, sbyte alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4bv")]
            internal static extern void GlColor4bv(sbyte* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4d")]
            internal static extern void GlColor4d(double red, double green, double blue, double alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4dv")]
            internal static extern void GlColor4dv(double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4f")]
            internal static extern void GlColor4f(float red, float green, float blue, float alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4fv")]
            internal static extern void GlColor4fv(float* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4i")]
            internal static extern void GlColor4i(int red, int green, int blue, int alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4iv")]
            internal static extern void GlColor4iv(int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4s")]
            internal static extern void GlColor4s(short red, short green, short blue, short alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4sv")]
            internal static extern void GlColor4sv(short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4ub")]
            internal static extern void GlColor4ub(byte red, byte green, byte blue, byte alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4ubv")]
            internal static extern void GlColor4ubv(byte* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4ui")]
            internal static extern void GlColor4ui(uint red, uint green, uint blue, uint alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4uiv")]
            internal static extern void GlColor4uiv(uint* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4us")]
            internal static extern void GlColor4us(ushort red, ushort green, ushort blue, ushort alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColor4usv")]
            internal static extern void GlColor4usv(ushort* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColorMask")]
            internal static extern void GlColorMask(byte red, byte green, byte blue, byte alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColorMaterial")]
            internal static extern void GlColorMaterial(uint face, uint mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glColorPointer")]
            internal static extern void GlColorPointer(int size, uint type, int stride, global::System.IntPtr pointer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glCopyPixels")]
            internal static extern void GlCopyPixels(int x, int y, int width, int height, uint type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glCopyTexImage1D")]
            internal static extern void GlCopyTexImage1D(uint target, int level, uint internalFormat, int x, int y, int width, int border);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glCopyTexImage2D")]
            internal static extern void GlCopyTexImage2D(uint target, int level, uint internalFormat, int x, int y, int width, int height, int border);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glCopyTexSubImage1D")]
            internal static extern void GlCopyTexSubImage1D(uint target, int level, int xoffset, int x, int y, int width);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glCopyTexSubImage2D")]
            internal static extern void GlCopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glCullFace")]
            internal static extern void GlCullFace(uint mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glDeleteLists")]
            internal static extern void GlDeleteLists(uint list, int range);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glDeleteTextures")]
            internal static extern void GlDeleteTextures(int n, uint* textures);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glDepthFunc")]
            internal static extern void GlDepthFunc(uint func);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glDepthMask")]
            internal static extern void GlDepthMask(byte flag);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glDepthRange")]
            internal static extern void GlDepthRange(double zNear, double zFar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glDisable")]
            internal static extern void GlDisable(uint cap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glDisableClientState")]
            internal static extern void GlDisableClientState(uint array);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glDrawArrays")]
            internal static extern void GlDrawArrays(uint mode, int first, int count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glDrawBuffer")]
            internal static extern void GlDrawBuffer(uint mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glDrawElements")]
            internal static extern void GlDrawElements(uint mode, int count, uint type, global::System.IntPtr indices);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glDrawPixels")]
            internal static extern void GlDrawPixels(int width, int height, uint format, uint type, global::System.IntPtr pixels);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEdgeFlag")]
            internal static extern void GlEdgeFlag(byte flag);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEdgeFlagPointer")]
            internal static extern void GlEdgeFlagPointer(int stride, global::System.IntPtr pointer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEdgeFlagv")]
            internal static extern void GlEdgeFlagv(byte* flag);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEnable")]
            internal static extern void GlEnable(uint cap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEnableClientState")]
            internal static extern void GlEnableClientState(uint array);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEnd")]
            internal static extern void GlEnd();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEndList")]
            internal static extern void GlEndList();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEvalCoord1d")]
            internal static extern void GlEvalCoord1d(double u);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEvalCoord1dv")]
            internal static extern void GlEvalCoord1dv(double* u);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEvalCoord1f")]
            internal static extern void GlEvalCoord1f(float u);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEvalCoord1fv")]
            internal static extern void GlEvalCoord1fv(float* u);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEvalCoord2d")]
            internal static extern void GlEvalCoord2d(double u, double v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEvalCoord2dv")]
            internal static extern void GlEvalCoord2dv(double* u);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEvalCoord2f")]
            internal static extern void GlEvalCoord2f(float u, float v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEvalCoord2fv")]
            internal static extern void GlEvalCoord2fv(float* u);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEvalMesh1")]
            internal static extern void GlEvalMesh1(uint mode, int i1, int i2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEvalMesh2")]
            internal static extern void GlEvalMesh2(uint mode, int i1, int i2, int j1, int j2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEvalPoint1")]
            internal static extern void GlEvalPoint1(int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glEvalPoint2")]
            internal static extern void GlEvalPoint2(int i, int j);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glFeedbackBuffer")]
            internal static extern void GlFeedbackBuffer(int size, uint type, float* buffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glFinish")]
            internal static extern void GlFinish();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glFlush")]
            internal static extern void GlFlush();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glFogf")]
            internal static extern void GlFogf(uint pname, float param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glFogfv")]
            internal static extern void GlFogfv(uint pname, float* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glFogi")]
            internal static extern void GlFogi(uint pname, int param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glFogiv")]
            internal static extern void GlFogiv(uint pname, int* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glFrontFace")]
            internal static extern void GlFrontFace(uint mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glFrustum")]
            internal static extern void GlFrustum(double left, double right, double bottom, double top, double zNear, double zFar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGenLists")]
            internal static extern uint GlGenLists(int range);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGenTextures")]
            internal static extern void GlGenTextures(int n, uint* textures);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetBooleanv")]
            internal static extern void GlGetBooleanv(uint pname, byte* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetClipPlane")]
            internal static extern void GlGetClipPlane(uint plane, double* equation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetDoublev")]
            internal static extern void GlGetDoublev(uint pname, double* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetError")]
            internal static extern uint GlGetError();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetFloatv")]
            internal static extern void GlGetFloatv(uint pname, float* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetIntegerv")]
            internal static extern void GlGetIntegerv(uint pname, int* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetLightfv")]
            internal static extern void GlGetLightfv(uint light, uint pname, float* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetLightiv")]
            internal static extern void GlGetLightiv(uint light, uint pname, int* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetMapdv")]
            internal static extern void GlGetMapdv(uint target, uint query, double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetMapfv")]
            internal static extern void GlGetMapfv(uint target, uint query, float* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetMapiv")]
            internal static extern void GlGetMapiv(uint target, uint query, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetMaterialfv")]
            internal static extern void GlGetMaterialfv(uint face, uint pname, float* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetMaterialiv")]
            internal static extern void GlGetMaterialiv(uint face, uint pname, int* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetPixelMapfv")]
            internal static extern void GlGetPixelMapfv(uint map, float* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetPixelMapuiv")]
            internal static extern void GlGetPixelMapuiv(uint map, uint* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetPixelMapusv")]
            internal static extern void GlGetPixelMapusv(uint map, ushort* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetPointerv")]
            internal static extern void GlGetPointerv(uint pname, void** @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetPolygonStipple")]
            internal static extern void GlGetPolygonStipple(byte* mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetString")]
            internal static extern byte* GlGetString(uint name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetTexEnvfv")]
            internal static extern void GlGetTexEnvfv(uint target, uint pname, float* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetTexEnviv")]
            internal static extern void GlGetTexEnviv(uint target, uint pname, int* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetTexGendv")]
            internal static extern void GlGetTexGendv(uint coord, uint pname, double* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetTexGenfv")]
            internal static extern void GlGetTexGenfv(uint coord, uint pname, float* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetTexGeniv")]
            internal static extern void GlGetTexGeniv(uint coord, uint pname, int* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetTexImage")]
            internal static extern void GlGetTexImage(uint target, int level, uint format, uint type, global::System.IntPtr pixels);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetTexLevelParameterfv")]
            internal static extern void GlGetTexLevelParameterfv(uint target, int level, uint pname, float* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetTexLevelParameteriv")]
            internal static extern void GlGetTexLevelParameteriv(uint target, int level, uint pname, int* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetTexParameterfv")]
            internal static extern void GlGetTexParameterfv(uint target, uint pname, float* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glGetTexParameteriv")]
            internal static extern void GlGetTexParameteriv(uint target, uint pname, int* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glHint")]
            internal static extern void GlHint(uint target, uint mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glIndexMask")]
            internal static extern void GlIndexMask(uint mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glIndexPointer")]
            internal static extern void GlIndexPointer(uint type, int stride, global::System.IntPtr pointer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glIndexd")]
            internal static extern void GlIndexd(double c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glIndexdv")]
            internal static extern void GlIndexdv(double* c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glIndexf")]
            internal static extern void GlIndexf(float c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glIndexfv")]
            internal static extern void GlIndexfv(float* c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glIndexi")]
            internal static extern void GlIndexi(int c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glIndexiv")]
            internal static extern void GlIndexiv(int* c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glIndexs")]
            internal static extern void GlIndexs(short c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glIndexsv")]
            internal static extern void GlIndexsv(short* c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glIndexub")]
            internal static extern void GlIndexub(byte c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glIndexubv")]
            internal static extern void GlIndexubv(byte* c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glInitNames")]
            internal static extern void GlInitNames();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glInterleavedArrays")]
            internal static extern void GlInterleavedArrays(uint format, int stride, global::System.IntPtr pointer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glIsEnabled")]
            internal static extern byte GlIsEnabled(uint cap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glIsList")]
            internal static extern byte GlIsList(uint list);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glIsTexture")]
            internal static extern byte GlIsTexture(uint texture);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glLightModelf")]
            internal static extern void GlLightModelf(uint pname, float param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glLightModelfv")]
            internal static extern void GlLightModelfv(uint pname, float* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glLightModeli")]
            internal static extern void GlLightModeli(uint pname, int param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glLightModeliv")]
            internal static extern void GlLightModeliv(uint pname, int* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glLightf")]
            internal static extern void GlLightf(uint light, uint pname, float param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glLightfv")]
            internal static extern void GlLightfv(uint light, uint pname, float* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glLighti")]
            internal static extern void GlLighti(uint light, uint pname, int param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glLightiv")]
            internal static extern void GlLightiv(uint light, uint pname, int* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glLineStipple")]
            internal static extern void GlLineStipple(int factor, ushort pattern);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glLineWidth")]
            internal static extern void GlLineWidth(float width);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glListBase")]
            internal static extern void GlListBase(uint @base);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glLoadIdentity")]
            internal static extern void GlLoadIdentity();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glLoadMatrixd")]
            internal static extern void GlLoadMatrixd(double* m);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glLoadMatrixf")]
            internal static extern void GlLoadMatrixf(float* m);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glLoadName")]
            internal static extern void GlLoadName(uint name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glLogicOp")]
            internal static extern void GlLogicOp(uint opcode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glMap1d")]
            internal static extern void GlMap1d(uint target, double u1, double u2, int stride, int order, double* points);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glMap1f")]
            internal static extern void GlMap1f(uint target, float u1, float u2, int stride, int order, float* points);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glMap2d")]
            internal static extern void GlMap2d(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glMap2f")]
            internal static extern void GlMap2f(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glMapGrid1d")]
            internal static extern void GlMapGrid1d(int un, double u1, double u2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glMapGrid1f")]
            internal static extern void GlMapGrid1f(int un, float u1, float u2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glMapGrid2d")]
            internal static extern void GlMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glMapGrid2f")]
            internal static extern void GlMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glMaterialf")]
            internal static extern void GlMaterialf(uint face, uint pname, float param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glMaterialfv")]
            internal static extern void GlMaterialfv(uint face, uint pname, float* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glMateriali")]
            internal static extern void GlMateriali(uint face, uint pname, int param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glMaterialiv")]
            internal static extern void GlMaterialiv(uint face, uint pname, int* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glMatrixMode")]
            internal static extern void GlMatrixMode(uint mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glMultMatrixd")]
            internal static extern void GlMultMatrixd(double* m);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glMultMatrixf")]
            internal static extern void GlMultMatrixf(float* m);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glNewList")]
            internal static extern void GlNewList(uint list, uint mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glNormal3b")]
            internal static extern void GlNormal3b(sbyte nx, sbyte ny, sbyte nz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glNormal3bv")]
            internal static extern void GlNormal3bv(sbyte* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glNormal3d")]
            internal static extern void GlNormal3d(double nx, double ny, double nz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glNormal3dv")]
            internal static extern void GlNormal3dv(double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glNormal3f")]
            internal static extern void GlNormal3f(float nx, float ny, float nz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glNormal3fv")]
            internal static extern void GlNormal3fv(float* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glNormal3i")]
            internal static extern void GlNormal3i(int nx, int ny, int nz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glNormal3iv")]
            internal static extern void GlNormal3iv(int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glNormal3s")]
            internal static extern void GlNormal3s(short nx, short ny, short nz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glNormal3sv")]
            internal static extern void GlNormal3sv(short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glNormalPointer")]
            internal static extern void GlNormalPointer(uint type, int stride, global::System.IntPtr pointer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glOrtho")]
            internal static extern void GlOrtho(double left, double right, double bottom, double top, double zNear, double zFar);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPassThrough")]
            internal static extern void GlPassThrough(float token);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPixelMapfv")]
            internal static extern void GlPixelMapfv(uint map, int mapsize, float* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPixelMapuiv")]
            internal static extern void GlPixelMapuiv(uint map, int mapsize, uint* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPixelMapusv")]
            internal static extern void GlPixelMapusv(uint map, int mapsize, ushort* values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPixelStoref")]
            internal static extern void GlPixelStoref(uint pname, float param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPixelStorei")]
            internal static extern void GlPixelStorei(uint pname, int param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPixelTransferf")]
            internal static extern void GlPixelTransferf(uint pname, float param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPixelTransferi")]
            internal static extern void GlPixelTransferi(uint pname, int param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPixelZoom")]
            internal static extern void GlPixelZoom(float xfactor, float yfactor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPointSize")]
            internal static extern void GlPointSize(float size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPolygonMode")]
            internal static extern void GlPolygonMode(uint face, uint mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPolygonOffset")]
            internal static extern void GlPolygonOffset(float factor, float units);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPolygonStipple")]
            internal static extern void GlPolygonStipple(byte* mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPopAttrib")]
            internal static extern void GlPopAttrib();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPopClientAttrib")]
            internal static extern void GlPopClientAttrib();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPopMatrix")]
            internal static extern void GlPopMatrix();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPopName")]
            internal static extern void GlPopName();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPrioritizeTextures")]
            internal static extern void GlPrioritizeTextures(int n, uint* textures, float* priorities);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPushAttrib")]
            internal static extern void GlPushAttrib(uint mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPushClientAttrib")]
            internal static extern void GlPushClientAttrib(uint mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPushMatrix")]
            internal static extern void GlPushMatrix();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glPushName")]
            internal static extern void GlPushName(uint name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos2d")]
            internal static extern void GlRasterPos2d(double x, double y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos2dv")]
            internal static extern void GlRasterPos2dv(double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos2f")]
            internal static extern void GlRasterPos2f(float x, float y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos2fv")]
            internal static extern void GlRasterPos2fv(float* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos2i")]
            internal static extern void GlRasterPos2i(int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos2iv")]
            internal static extern void GlRasterPos2iv(int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos2s")]
            internal static extern void GlRasterPos2s(short x, short y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos2sv")]
            internal static extern void GlRasterPos2sv(short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos3d")]
            internal static extern void GlRasterPos3d(double x, double y, double z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos3dv")]
            internal static extern void GlRasterPos3dv(double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos3f")]
            internal static extern void GlRasterPos3f(float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos3fv")]
            internal static extern void GlRasterPos3fv(float* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos3i")]
            internal static extern void GlRasterPos3i(int x, int y, int z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos3iv")]
            internal static extern void GlRasterPos3iv(int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos3s")]
            internal static extern void GlRasterPos3s(short x, short y, short z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos3sv")]
            internal static extern void GlRasterPos3sv(short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos4d")]
            internal static extern void GlRasterPos4d(double x, double y, double z, double w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos4dv")]
            internal static extern void GlRasterPos4dv(double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos4f")]
            internal static extern void GlRasterPos4f(float x, float y, float z, float w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos4fv")]
            internal static extern void GlRasterPos4fv(float* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos4i")]
            internal static extern void GlRasterPos4i(int x, int y, int z, int w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos4iv")]
            internal static extern void GlRasterPos4iv(int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos4s")]
            internal static extern void GlRasterPos4s(short x, short y, short z, short w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRasterPos4sv")]
            internal static extern void GlRasterPos4sv(short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glReadBuffer")]
            internal static extern void GlReadBuffer(uint mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glReadPixels")]
            internal static extern void GlReadPixels(int x, int y, int width, int height, uint format, uint type, global::System.IntPtr pixels);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRectd")]
            internal static extern void GlRectd(double x1, double y1, double x2, double y2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRectdv")]
            internal static extern void GlRectdv(double* v1, double* v2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRectf")]
            internal static extern void GlRectf(float x1, float y1, float x2, float y2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRectfv")]
            internal static extern void GlRectfv(float* v1, float* v2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRecti")]
            internal static extern void GlRecti(int x1, int y1, int x2, int y2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRectiv")]
            internal static extern void GlRectiv(int* v1, int* v2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRects")]
            internal static extern void GlRects(short x1, short y1, short x2, short y2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRectsv")]
            internal static extern void GlRectsv(short* v1, short* v2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRenderMode")]
            internal static extern int GlRenderMode(uint mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRotated")]
            internal static extern void GlRotated(double angle, double x, double y, double z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glRotatef")]
            internal static extern void GlRotatef(float angle, float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glScaled")]
            internal static extern void GlScaled(double x, double y, double z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glScalef")]
            internal static extern void GlScalef(float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glScissor")]
            internal static extern void GlScissor(int x, int y, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glSelectBuffer")]
            internal static extern void GlSelectBuffer(int size, uint* buffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glShadeModel")]
            internal static extern void GlShadeModel(uint mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glStencilFunc")]
            internal static extern void GlStencilFunc(uint func, int @ref, uint mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glStencilMask")]
            internal static extern void GlStencilMask(uint mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glStencilOp")]
            internal static extern void GlStencilOp(uint fail, uint zfail, uint zpass);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord1d")]
            internal static extern void GlTexCoord1d(double s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord1dv")]
            internal static extern void GlTexCoord1dv(double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord1f")]
            internal static extern void GlTexCoord1f(float s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord1fv")]
            internal static extern void GlTexCoord1fv(float* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord1i")]
            internal static extern void GlTexCoord1i(int s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord1iv")]
            internal static extern void GlTexCoord1iv(int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord1s")]
            internal static extern void GlTexCoord1s(short s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord1sv")]
            internal static extern void GlTexCoord1sv(short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord2d")]
            internal static extern void GlTexCoord2d(double s, double t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord2dv")]
            internal static extern void GlTexCoord2dv(double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord2f")]
            internal static extern void GlTexCoord2f(float s, float t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord2fv")]
            internal static extern void GlTexCoord2fv(float* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord2i")]
            internal static extern void GlTexCoord2i(int s, int t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord2iv")]
            internal static extern void GlTexCoord2iv(int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord2s")]
            internal static extern void GlTexCoord2s(short s, short t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord2sv")]
            internal static extern void GlTexCoord2sv(short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord3d")]
            internal static extern void GlTexCoord3d(double s, double t, double r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord3dv")]
            internal static extern void GlTexCoord3dv(double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord3f")]
            internal static extern void GlTexCoord3f(float s, float t, float r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord3fv")]
            internal static extern void GlTexCoord3fv(float* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord3i")]
            internal static extern void GlTexCoord3i(int s, int t, int r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord3iv")]
            internal static extern void GlTexCoord3iv(int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord3s")]
            internal static extern void GlTexCoord3s(short s, short t, short r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord3sv")]
            internal static extern void GlTexCoord3sv(short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord4d")]
            internal static extern void GlTexCoord4d(double s, double t, double r, double q);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord4dv")]
            internal static extern void GlTexCoord4dv(double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord4f")]
            internal static extern void GlTexCoord4f(float s, float t, float r, float q);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord4fv")]
            internal static extern void GlTexCoord4fv(float* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord4i")]
            internal static extern void GlTexCoord4i(int s, int t, int r, int q);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord4iv")]
            internal static extern void GlTexCoord4iv(int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord4s")]
            internal static extern void GlTexCoord4s(short s, short t, short r, short q);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoord4sv")]
            internal static extern void GlTexCoord4sv(short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexCoordPointer")]
            internal static extern void GlTexCoordPointer(int size, uint type, int stride, global::System.IntPtr pointer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexEnvf")]
            internal static extern void GlTexEnvf(uint target, uint pname, float param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexEnvfv")]
            internal static extern void GlTexEnvfv(uint target, uint pname, float* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexEnvi")]
            internal static extern void GlTexEnvi(uint target, uint pname, int param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexEnviv")]
            internal static extern void GlTexEnviv(uint target, uint pname, int* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexGend")]
            internal static extern void GlTexGend(uint coord, uint pname, double param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexGendv")]
            internal static extern void GlTexGendv(uint coord, uint pname, double* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexGenf")]
            internal static extern void GlTexGenf(uint coord, uint pname, float param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexGenfv")]
            internal static extern void GlTexGenfv(uint coord, uint pname, float* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexGeni")]
            internal static extern void GlTexGeni(uint coord, uint pname, int param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexGeniv")]
            internal static extern void GlTexGeniv(uint coord, uint pname, int* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexImage1D")]
            internal static extern void GlTexImage1D(uint target, int level, int internalformat, int width, int border, uint format, uint type, global::System.IntPtr pixels);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexImage2D")]
            internal static extern void GlTexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, global::System.IntPtr pixels);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexParameterf")]
            internal static extern void GlTexParameterf(uint target, uint pname, float param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexParameterfv")]
            internal static extern void GlTexParameterfv(uint target, uint pname, float* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexParameteri")]
            internal static extern void GlTexParameteri(uint target, uint pname, int param);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexParameteriv")]
            internal static extern void GlTexParameteriv(uint target, uint pname, int* @params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexSubImage1D")]
            internal static extern void GlTexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, global::System.IntPtr pixels);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTexSubImage2D")]
            internal static extern void GlTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, global::System.IntPtr pixels);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTranslated")]
            internal static extern void GlTranslated(double x, double y, double z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glTranslatef")]
            internal static extern void GlTranslatef(float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex2d")]
            internal static extern void GlVertex2d(double x, double y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex2dv")]
            internal static extern void GlVertex2dv(double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex2f")]
            internal static extern void GlVertex2f(float x, float y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex2fv")]
            internal static extern void GlVertex2fv(float* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex2i")]
            internal static extern void GlVertex2i(int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex2iv")]
            internal static extern void GlVertex2iv(int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex2s")]
            internal static extern void GlVertex2s(short x, short y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex2sv")]
            internal static extern void GlVertex2sv(short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex3d")]
            internal static extern void GlVertex3d(double x, double y, double z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex3dv")]
            internal static extern void GlVertex3dv(double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex3f")]
            internal static extern void GlVertex3f(float x, float y, float z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex3fv")]
            internal static extern void GlVertex3fv(float* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex3i")]
            internal static extern void GlVertex3i(int x, int y, int z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex3iv")]
            internal static extern void GlVertex3iv(int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex3s")]
            internal static extern void GlVertex3s(short x, short y, short z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex3sv")]
            internal static extern void GlVertex3sv(short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex4d")]
            internal static extern void GlVertex4d(double x, double y, double z, double w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex4dv")]
            internal static extern void GlVertex4dv(double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex4f")]
            internal static extern void GlVertex4f(float x, float y, float z, float w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex4fv")]
            internal static extern void GlVertex4fv(float* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex4i")]
            internal static extern void GlVertex4i(int x, int y, int z, int w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex4iv")]
            internal static extern void GlVertex4iv(int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex4s")]
            internal static extern void GlVertex4s(short x, short y, short z, short w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertex4sv")]
            internal static extern void GlVertex4sv(short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glVertexPointer")]
            internal static extern void GlVertexPointer(int size, uint type, int stride, global::System.IntPtr pointer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenGL32", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="glViewport")]
            internal static extern void GlViewport(int x, int y, int width, int height);
        }

        /// <summary>**********************************************************</summary>
        public static void GlAccum(uint op, float value)
        {
            __Internal.GlAccum(op, value);
        }

        public static void GlAlphaFunc(uint func, float @ref)
        {
            __Internal.GlAlphaFunc(func, @ref);
        }

        public static byte GlAreTexturesResident(int n, ref uint textures, byte* residences)
        {
            fixed (uint* __refParamPtr1 = &textures)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.GlAreTexturesResident(n, __arg1, residences);
                return __ret;
            }
        }

        public static void GlArrayElement(int i)
        {
            __Internal.GlArrayElement(i);
        }

        public static void GlBegin(uint mode)
        {
            __Internal.GlBegin(mode);
        }

        public static void GlBindTexture(uint target, uint texture)
        {
            __Internal.GlBindTexture(target, texture);
        }

        public static void GlBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap)
        {
            __Internal.GlBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
        }

        public static void GlBlendFunc(uint sfactor, uint dfactor)
        {
            __Internal.GlBlendFunc(sfactor, dfactor);
        }

        public static void GlCallList(uint list)
        {
            __Internal.GlCallList(list);
        }

        public static void GlCallLists(int n, uint type, global::System.IntPtr lists)
        {
            __Internal.GlCallLists(n, type, lists);
        }

        public static void GlClear(uint mask)
        {
            __Internal.GlClear(mask);
        }

        public static void GlClearAccum(float red, float green, float blue, float alpha)
        {
            __Internal.GlClearAccum(red, green, blue, alpha);
        }

        public static void GlClearColor(float red, float green, float blue, float alpha)
        {
            __Internal.GlClearColor(red, green, blue, alpha);
        }

        public static void GlClearDepth(double depth)
        {
            __Internal.GlClearDepth(depth);
        }

        public static void GlClearIndex(float c)
        {
            __Internal.GlClearIndex(c);
        }

        public static void GlClearStencil(int s)
        {
            __Internal.GlClearStencil(s);
        }

        public static void GlClipPlane(uint plane, ref double equation)
        {
            fixed (double* __refParamPtr1 = &equation)
            {
                var __arg1 = __refParamPtr1;
                __Internal.GlClipPlane(plane, __arg1);
            }
        }

        public static void GlColor3b(sbyte red, sbyte green, sbyte blue)
        {
            __Internal.GlColor3b(red, green, blue);
        }

        public static void GlColor3bv(sbyte* v)
        {
            __Internal.GlColor3bv(v);
        }

        public static void GlColor3d(double red, double green, double blue)
        {
            __Internal.GlColor3d(red, green, blue);
        }

        public static void GlColor3dv(ref double v)
        {
            fixed (double* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlColor3dv(__arg0);
            }
        }

        public static void GlColor3f(float red, float green, float blue)
        {
            __Internal.GlColor3f(red, green, blue);
        }

        public static void GlColor3fv(ref float v)
        {
            fixed (float* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlColor3fv(__arg0);
            }
        }

        public static void GlColor3i(int red, int green, int blue)
        {
            __Internal.GlColor3i(red, green, blue);
        }

        public static void GlColor3iv(ref int v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlColor3iv(__arg0);
            }
        }

        public static void GlColor3s(short red, short green, short blue)
        {
            __Internal.GlColor3s(red, green, blue);
        }

        public static void GlColor3sv(ref short v)
        {
            fixed (short* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlColor3sv(__arg0);
            }
        }

        public static void GlColor3ub(byte red, byte green, byte blue)
        {
            __Internal.GlColor3ub(red, green, blue);
        }

        public static void GlColor3ubv(byte* v)
        {
            __Internal.GlColor3ubv(v);
        }

        public static void GlColor3ui(uint red, uint green, uint blue)
        {
            __Internal.GlColor3ui(red, green, blue);
        }

        public static void GlColor3uiv(ref uint v)
        {
            fixed (uint* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlColor3uiv(__arg0);
            }
        }

        public static void GlColor3us(ushort red, ushort green, ushort blue)
        {
            __Internal.GlColor3us(red, green, blue);
        }

        public static void GlColor3usv(ref ushort v)
        {
            fixed (ushort* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlColor3usv(__arg0);
            }
        }

        public static void GlColor4b(sbyte red, sbyte green, sbyte blue, sbyte alpha)
        {
            __Internal.GlColor4b(red, green, blue, alpha);
        }

        public static void GlColor4bv(sbyte* v)
        {
            __Internal.GlColor4bv(v);
        }

        public static void GlColor4d(double red, double green, double blue, double alpha)
        {
            __Internal.GlColor4d(red, green, blue, alpha);
        }

        public static void GlColor4dv(ref double v)
        {
            fixed (double* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlColor4dv(__arg0);
            }
        }

        public static void GlColor4f(float red, float green, float blue, float alpha)
        {
            __Internal.GlColor4f(red, green, blue, alpha);
        }

        public static void GlColor4fv(ref float v)
        {
            fixed (float* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlColor4fv(__arg0);
            }
        }

        public static void GlColor4i(int red, int green, int blue, int alpha)
        {
            __Internal.GlColor4i(red, green, blue, alpha);
        }

        public static void GlColor4iv(ref int v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlColor4iv(__arg0);
            }
        }

        public static void GlColor4s(short red, short green, short blue, short alpha)
        {
            __Internal.GlColor4s(red, green, blue, alpha);
        }

        public static void GlColor4sv(ref short v)
        {
            fixed (short* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlColor4sv(__arg0);
            }
        }

        public static void GlColor4ub(byte red, byte green, byte blue, byte alpha)
        {
            __Internal.GlColor4ub(red, green, blue, alpha);
        }

        public static void GlColor4ubv(byte* v)
        {
            __Internal.GlColor4ubv(v);
        }

        public static void GlColor4ui(uint red, uint green, uint blue, uint alpha)
        {
            __Internal.GlColor4ui(red, green, blue, alpha);
        }

        public static void GlColor4uiv(ref uint v)
        {
            fixed (uint* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlColor4uiv(__arg0);
            }
        }

        public static void GlColor4us(ushort red, ushort green, ushort blue, ushort alpha)
        {
            __Internal.GlColor4us(red, green, blue, alpha);
        }

        public static void GlColor4usv(ref ushort v)
        {
            fixed (ushort* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlColor4usv(__arg0);
            }
        }

        public static void GlColorMask(byte red, byte green, byte blue, byte alpha)
        {
            __Internal.GlColorMask(red, green, blue, alpha);
        }

        public static void GlColorMaterial(uint face, uint mode)
        {
            __Internal.GlColorMaterial(face, mode);
        }

        public static void GlColorPointer(int size, uint type, int stride, global::System.IntPtr pointer)
        {
            __Internal.GlColorPointer(size, type, stride, pointer);
        }

        public static void GlCopyPixels(int x, int y, int width, int height, uint type)
        {
            __Internal.GlCopyPixels(x, y, width, height, type);
        }

        public static void GlCopyTexImage1D(uint target, int level, uint internalFormat, int x, int y, int width, int border)
        {
            __Internal.GlCopyTexImage1D(target, level, internalFormat, x, y, width, border);
        }

        public static void GlCopyTexImage2D(uint target, int level, uint internalFormat, int x, int y, int width, int height, int border)
        {
            __Internal.GlCopyTexImage2D(target, level, internalFormat, x, y, width, height, border);
        }

        public static void GlCopyTexSubImage1D(uint target, int level, int xoffset, int x, int y, int width)
        {
            __Internal.GlCopyTexSubImage1D(target, level, xoffset, x, y, width);
        }

        public static void GlCopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            __Internal.GlCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
        }

        public static void GlCullFace(uint mode)
        {
            __Internal.GlCullFace(mode);
        }

        public static void GlDeleteLists(uint list, int range)
        {
            __Internal.GlDeleteLists(list, range);
        }

        public static void GlDeleteTextures(int n, ref uint textures)
        {
            fixed (uint* __refParamPtr1 = &textures)
            {
                var __arg1 = __refParamPtr1;
                __Internal.GlDeleteTextures(n, __arg1);
            }
        }

        public static void GlDepthFunc(uint func)
        {
            __Internal.GlDepthFunc(func);
        }

        public static void GlDepthMask(byte flag)
        {
            __Internal.GlDepthMask(flag);
        }

        public static void GlDepthRange(double zNear, double zFar)
        {
            __Internal.GlDepthRange(zNear, zFar);
        }

        public static void GlDisable(uint cap)
        {
            __Internal.GlDisable(cap);
        }

        public static void GlDisableClientState(uint array)
        {
            __Internal.GlDisableClientState(array);
        }

        public static void GlDrawArrays(uint mode, int first, int count)
        {
            __Internal.GlDrawArrays(mode, first, count);
        }

        public static void GlDrawBuffer(uint mode)
        {
            __Internal.GlDrawBuffer(mode);
        }

        public static void GlDrawElements(uint mode, int count, uint type, global::System.IntPtr indices)
        {
            __Internal.GlDrawElements(mode, count, type, indices);
        }

        public static void GlDrawPixels(int width, int height, uint format, uint type, global::System.IntPtr pixels)
        {
            __Internal.GlDrawPixels(width, height, format, type, pixels);
        }

        public static void GlEdgeFlag(byte flag)
        {
            __Internal.GlEdgeFlag(flag);
        }

        public static void GlEdgeFlagPointer(int stride, global::System.IntPtr pointer)
        {
            __Internal.GlEdgeFlagPointer(stride, pointer);
        }

        public static void GlEdgeFlagv(byte* flag)
        {
            __Internal.GlEdgeFlagv(flag);
        }

        public static void GlEnable(uint cap)
        {
            __Internal.GlEnable(cap);
        }

        public static void GlEnableClientState(uint array)
        {
            __Internal.GlEnableClientState(array);
        }

        public static void GlEnd()
        {
            __Internal.GlEnd();
        }

        public static void GlEndList()
        {
            __Internal.GlEndList();
        }

        public static void GlEvalCoord1d(double u)
        {
            __Internal.GlEvalCoord1d(u);
        }

        public static void GlEvalCoord1dv(ref double u)
        {
            fixed (double* __refParamPtr0 = &u)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlEvalCoord1dv(__arg0);
            }
        }

        public static void GlEvalCoord1f(float u)
        {
            __Internal.GlEvalCoord1f(u);
        }

        public static void GlEvalCoord1fv(ref float u)
        {
            fixed (float* __refParamPtr0 = &u)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlEvalCoord1fv(__arg0);
            }
        }

        public static void GlEvalCoord2d(double u, double v)
        {
            __Internal.GlEvalCoord2d(u, v);
        }

        public static void GlEvalCoord2dv(ref double u)
        {
            fixed (double* __refParamPtr0 = &u)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlEvalCoord2dv(__arg0);
            }
        }

        public static void GlEvalCoord2f(float u, float v)
        {
            __Internal.GlEvalCoord2f(u, v);
        }

        public static void GlEvalCoord2fv(ref float u)
        {
            fixed (float* __refParamPtr0 = &u)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlEvalCoord2fv(__arg0);
            }
        }

        public static void GlEvalMesh1(uint mode, int i1, int i2)
        {
            __Internal.GlEvalMesh1(mode, i1, i2);
        }

        public static void GlEvalMesh2(uint mode, int i1, int i2, int j1, int j2)
        {
            __Internal.GlEvalMesh2(mode, i1, i2, j1, j2);
        }

        public static void GlEvalPoint1(int i)
        {
            __Internal.GlEvalPoint1(i);
        }

        public static void GlEvalPoint2(int i, int j)
        {
            __Internal.GlEvalPoint2(i, j);
        }

        public static void GlFeedbackBuffer(int size, uint type, ref float buffer)
        {
            fixed (float* __refParamPtr2 = &buffer)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlFeedbackBuffer(size, type, __arg2);
            }
        }

        public static void GlFinish()
        {
            __Internal.GlFinish();
        }

        public static void GlFlush()
        {
            __Internal.GlFlush();
        }

        public static void GlFogf(uint pname, float param)
        {
            __Internal.GlFogf(pname, param);
        }

        public static void GlFogfv(uint pname, ref float @params)
        {
            fixed (float* __refParamPtr1 = &@params)
            {
                var __arg1 = __refParamPtr1;
                __Internal.GlFogfv(pname, __arg1);
            }
        }

        public static void GlFogi(uint pname, int param)
        {
            __Internal.GlFogi(pname, param);
        }

        public static void GlFogiv(uint pname, ref int @params)
        {
            fixed (int* __refParamPtr1 = &@params)
            {
                var __arg1 = __refParamPtr1;
                __Internal.GlFogiv(pname, __arg1);
            }
        }

        public static void GlFrontFace(uint mode)
        {
            __Internal.GlFrontFace(mode);
        }

        public static void GlFrustum(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            __Internal.GlFrustum(left, right, bottom, top, zNear, zFar);
        }

        public static uint GlGenLists(int range)
        {
            var __ret = __Internal.GlGenLists(range);
            return __ret;
        }

        public static void GlGenTextures(int n, ref uint textures)
        {
            fixed (uint* __refParamPtr1 = &textures)
            {
                var __arg1 = __refParamPtr1;
                __Internal.GlGenTextures(n, __arg1);
            }
        }

        public static void GlGetBooleanv(uint pname, byte* @params)
        {
            __Internal.GlGetBooleanv(pname, @params);
        }

        public static void GlGetClipPlane(uint plane, ref double equation)
        {
            fixed (double* __refParamPtr1 = &equation)
            {
                var __arg1 = __refParamPtr1;
                __Internal.GlGetClipPlane(plane, __arg1);
            }
        }

        public static void GlGetDoublev(uint pname, ref double @params)
        {
            fixed (double* __refParamPtr1 = &@params)
            {
                var __arg1 = __refParamPtr1;
                __Internal.GlGetDoublev(pname, __arg1);
            }
        }

        public static uint GlGetError()
        {
            var __ret = __Internal.GlGetError();
            return __ret;
        }

        public static void GlGetFloatv(uint pname, ref float @params)
        {
            fixed (float* __refParamPtr1 = &@params)
            {
                var __arg1 = __refParamPtr1;
                __Internal.GlGetFloatv(pname, __arg1);
            }
        }

        public static void GlGetIntegerv(uint pname, ref int @params)
        {
            fixed (int* __refParamPtr1 = &@params)
            {
                var __arg1 = __refParamPtr1;
                __Internal.GlGetIntegerv(pname, __arg1);
            }
        }

        public static void GlGetLightfv(uint light, uint pname, ref float @params)
        {
            fixed (float* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlGetLightfv(light, pname, __arg2);
            }
        }

        public static void GlGetLightiv(uint light, uint pname, ref int @params)
        {
            fixed (int* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlGetLightiv(light, pname, __arg2);
            }
        }

        public static void GlGetMapdv(uint target, uint query, ref double v)
        {
            fixed (double* __refParamPtr2 = &v)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlGetMapdv(target, query, __arg2);
            }
        }

        public static void GlGetMapfv(uint target, uint query, ref float v)
        {
            fixed (float* __refParamPtr2 = &v)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlGetMapfv(target, query, __arg2);
            }
        }

        public static void GlGetMapiv(uint target, uint query, ref int v)
        {
            fixed (int* __refParamPtr2 = &v)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlGetMapiv(target, query, __arg2);
            }
        }

        public static void GlGetMaterialfv(uint face, uint pname, ref float @params)
        {
            fixed (float* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlGetMaterialfv(face, pname, __arg2);
            }
        }

        public static void GlGetMaterialiv(uint face, uint pname, ref int @params)
        {
            fixed (int* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlGetMaterialiv(face, pname, __arg2);
            }
        }

        public static void GlGetPixelMapfv(uint map, ref float values)
        {
            fixed (float* __refParamPtr1 = &values)
            {
                var __arg1 = __refParamPtr1;
                __Internal.GlGetPixelMapfv(map, __arg1);
            }
        }

        public static void GlGetPixelMapuiv(uint map, ref uint values)
        {
            fixed (uint* __refParamPtr1 = &values)
            {
                var __arg1 = __refParamPtr1;
                __Internal.GlGetPixelMapuiv(map, __arg1);
            }
        }

        public static void GlGetPixelMapusv(uint map, ref ushort values)
        {
            fixed (ushort* __refParamPtr1 = &values)
            {
                var __arg1 = __refParamPtr1;
                __Internal.GlGetPixelMapusv(map, __arg1);
            }
        }

        public static void GlGetPointerv(uint pname, void** @params)
        {
            __Internal.GlGetPointerv(pname, @params);
        }

        public static void GlGetPolygonStipple(byte* mask)
        {
            __Internal.GlGetPolygonStipple(mask);
        }

        public static byte* GlGetString(uint name)
        {
            var __ret = __Internal.GlGetString(name);
            return __ret;
        }

        public static void GlGetTexEnvfv(uint target, uint pname, ref float @params)
        {
            fixed (float* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlGetTexEnvfv(target, pname, __arg2);
            }
        }

        public static void GlGetTexEnviv(uint target, uint pname, ref int @params)
        {
            fixed (int* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlGetTexEnviv(target, pname, __arg2);
            }
        }

        public static void GlGetTexGendv(uint coord, uint pname, ref double @params)
        {
            fixed (double* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlGetTexGendv(coord, pname, __arg2);
            }
        }

        public static void GlGetTexGenfv(uint coord, uint pname, ref float @params)
        {
            fixed (float* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlGetTexGenfv(coord, pname, __arg2);
            }
        }

        public static void GlGetTexGeniv(uint coord, uint pname, ref int @params)
        {
            fixed (int* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlGetTexGeniv(coord, pname, __arg2);
            }
        }

        public static void GlGetTexImage(uint target, int level, uint format, uint type, global::System.IntPtr pixels)
        {
            __Internal.GlGetTexImage(target, level, format, type, pixels);
        }

        public static void GlGetTexLevelParameterfv(uint target, int level, uint pname, ref float @params)
        {
            fixed (float* __refParamPtr3 = &@params)
            {
                var __arg3 = __refParamPtr3;
                __Internal.GlGetTexLevelParameterfv(target, level, pname, __arg3);
            }
        }

        public static void GlGetTexLevelParameteriv(uint target, int level, uint pname, ref int @params)
        {
            fixed (int* __refParamPtr3 = &@params)
            {
                var __arg3 = __refParamPtr3;
                __Internal.GlGetTexLevelParameteriv(target, level, pname, __arg3);
            }
        }

        public static void GlGetTexParameterfv(uint target, uint pname, ref float @params)
        {
            fixed (float* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlGetTexParameterfv(target, pname, __arg2);
            }
        }

        public static void GlGetTexParameteriv(uint target, uint pname, ref int @params)
        {
            fixed (int* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlGetTexParameteriv(target, pname, __arg2);
            }
        }

        public static void GlHint(uint target, uint mode)
        {
            __Internal.GlHint(target, mode);
        }

        public static void GlIndexMask(uint mask)
        {
            __Internal.GlIndexMask(mask);
        }

        public static void GlIndexPointer(uint type, int stride, global::System.IntPtr pointer)
        {
            __Internal.GlIndexPointer(type, stride, pointer);
        }

        public static void GlIndexd(double c)
        {
            __Internal.GlIndexd(c);
        }

        public static void GlIndexdv(ref double c)
        {
            fixed (double* __refParamPtr0 = &c)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlIndexdv(__arg0);
            }
        }

        public static void GlIndexf(float c)
        {
            __Internal.GlIndexf(c);
        }

        public static void GlIndexfv(ref float c)
        {
            fixed (float* __refParamPtr0 = &c)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlIndexfv(__arg0);
            }
        }

        public static void GlIndexi(int c)
        {
            __Internal.GlIndexi(c);
        }

        public static void GlIndexiv(ref int c)
        {
            fixed (int* __refParamPtr0 = &c)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlIndexiv(__arg0);
            }
        }

        public static void GlIndexs(short c)
        {
            __Internal.GlIndexs(c);
        }

        public static void GlIndexsv(ref short c)
        {
            fixed (short* __refParamPtr0 = &c)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlIndexsv(__arg0);
            }
        }

        public static void GlIndexub(byte c)
        {
            __Internal.GlIndexub(c);
        }

        public static void GlIndexubv(byte* c)
        {
            __Internal.GlIndexubv(c);
        }

        public static void GlInitNames()
        {
            __Internal.GlInitNames();
        }

        public static void GlInterleavedArrays(uint format, int stride, global::System.IntPtr pointer)
        {
            __Internal.GlInterleavedArrays(format, stride, pointer);
        }

        public static byte GlIsEnabled(uint cap)
        {
            var __ret = __Internal.GlIsEnabled(cap);
            return __ret;
        }

        public static byte GlIsList(uint list)
        {
            var __ret = __Internal.GlIsList(list);
            return __ret;
        }

        public static byte GlIsTexture(uint texture)
        {
            var __ret = __Internal.GlIsTexture(texture);
            return __ret;
        }

        public static void GlLightModelf(uint pname, float param)
        {
            __Internal.GlLightModelf(pname, param);
        }

        public static void GlLightModelfv(uint pname, ref float @params)
        {
            fixed (float* __refParamPtr1 = &@params)
            {
                var __arg1 = __refParamPtr1;
                __Internal.GlLightModelfv(pname, __arg1);
            }
        }

        public static void GlLightModeli(uint pname, int param)
        {
            __Internal.GlLightModeli(pname, param);
        }

        public static void GlLightModeliv(uint pname, ref int @params)
        {
            fixed (int* __refParamPtr1 = &@params)
            {
                var __arg1 = __refParamPtr1;
                __Internal.GlLightModeliv(pname, __arg1);
            }
        }

        public static void GlLightf(uint light, uint pname, float param)
        {
            __Internal.GlLightf(light, pname, param);
        }

        public static void GlLightfv(uint light, uint pname, ref float @params)
        {
            fixed (float* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlLightfv(light, pname, __arg2);
            }
        }

        public static void GlLighti(uint light, uint pname, int param)
        {
            __Internal.GlLighti(light, pname, param);
        }

        public static void GlLightiv(uint light, uint pname, ref int @params)
        {
            fixed (int* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlLightiv(light, pname, __arg2);
            }
        }

        public static void GlLineStipple(int factor, ushort pattern)
        {
            __Internal.GlLineStipple(factor, pattern);
        }

        public static void GlLineWidth(float width)
        {
            __Internal.GlLineWidth(width);
        }

        public static void GlListBase(uint @base)
        {
            __Internal.GlListBase(@base);
        }

        public static void GlLoadIdentity()
        {
            __Internal.GlLoadIdentity();
        }

        public static void GlLoadMatrixd(ref double m)
        {
            fixed (double* __refParamPtr0 = &m)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlLoadMatrixd(__arg0);
            }
        }

        public static void GlLoadMatrixf(ref float m)
        {
            fixed (float* __refParamPtr0 = &m)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlLoadMatrixf(__arg0);
            }
        }

        public static void GlLoadName(uint name)
        {
            __Internal.GlLoadName(name);
        }

        public static void GlLogicOp(uint opcode)
        {
            __Internal.GlLogicOp(opcode);
        }

        public static void GlMap1d(uint target, double u1, double u2, int stride, int order, ref double points)
        {
            fixed (double* __refParamPtr5 = &points)
            {
                var __arg5 = __refParamPtr5;
                __Internal.GlMap1d(target, u1, u2, stride, order, __arg5);
            }
        }

        public static void GlMap1f(uint target, float u1, float u2, int stride, int order, ref float points)
        {
            fixed (float* __refParamPtr5 = &points)
            {
                var __arg5 = __refParamPtr5;
                __Internal.GlMap1f(target, u1, u2, stride, order, __arg5);
            }
        }

        public static void GlMap2d(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref double points)
        {
            fixed (double* __refParamPtr9 = &points)
            {
                var __arg9 = __refParamPtr9;
                __Internal.GlMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, __arg9);
            }
        }

        public static void GlMap2f(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref float points)
        {
            fixed (float* __refParamPtr9 = &points)
            {
                var __arg9 = __refParamPtr9;
                __Internal.GlMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, __arg9);
            }
        }

        public static void GlMapGrid1d(int un, double u1, double u2)
        {
            __Internal.GlMapGrid1d(un, u1, u2);
        }

        public static void GlMapGrid1f(int un, float u1, float u2)
        {
            __Internal.GlMapGrid1f(un, u1, u2);
        }

        public static void GlMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2)
        {
            __Internal.GlMapGrid2d(un, u1, u2, vn, v1, v2);
        }

        public static void GlMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2)
        {
            __Internal.GlMapGrid2f(un, u1, u2, vn, v1, v2);
        }

        public static void GlMaterialf(uint face, uint pname, float param)
        {
            __Internal.GlMaterialf(face, pname, param);
        }

        public static void GlMaterialfv(uint face, uint pname, ref float @params)
        {
            fixed (float* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlMaterialfv(face, pname, __arg2);
            }
        }

        public static void GlMateriali(uint face, uint pname, int param)
        {
            __Internal.GlMateriali(face, pname, param);
        }

        public static void GlMaterialiv(uint face, uint pname, ref int @params)
        {
            fixed (int* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlMaterialiv(face, pname, __arg2);
            }
        }

        public static void GlMatrixMode(uint mode)
        {
            __Internal.GlMatrixMode(mode);
        }

        public static void GlMultMatrixd(ref double m)
        {
            fixed (double* __refParamPtr0 = &m)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlMultMatrixd(__arg0);
            }
        }

        public static void GlMultMatrixf(ref float m)
        {
            fixed (float* __refParamPtr0 = &m)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlMultMatrixf(__arg0);
            }
        }

        public static void GlNewList(uint list, uint mode)
        {
            __Internal.GlNewList(list, mode);
        }

        public static void GlNormal3b(sbyte nx, sbyte ny, sbyte nz)
        {
            __Internal.GlNormal3b(nx, ny, nz);
        }

        public static void GlNormal3bv(sbyte* v)
        {
            __Internal.GlNormal3bv(v);
        }

        public static void GlNormal3d(double nx, double ny, double nz)
        {
            __Internal.GlNormal3d(nx, ny, nz);
        }

        public static void GlNormal3dv(ref double v)
        {
            fixed (double* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlNormal3dv(__arg0);
            }
        }

        public static void GlNormal3f(float nx, float ny, float nz)
        {
            __Internal.GlNormal3f(nx, ny, nz);
        }

        public static void GlNormal3fv(ref float v)
        {
            fixed (float* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlNormal3fv(__arg0);
            }
        }

        public static void GlNormal3i(int nx, int ny, int nz)
        {
            __Internal.GlNormal3i(nx, ny, nz);
        }

        public static void GlNormal3iv(ref int v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlNormal3iv(__arg0);
            }
        }

        public static void GlNormal3s(short nx, short ny, short nz)
        {
            __Internal.GlNormal3s(nx, ny, nz);
        }

        public static void GlNormal3sv(ref short v)
        {
            fixed (short* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlNormal3sv(__arg0);
            }
        }

        public static void GlNormalPointer(uint type, int stride, global::System.IntPtr pointer)
        {
            __Internal.GlNormalPointer(type, stride, pointer);
        }

        public static void GlOrtho(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            __Internal.GlOrtho(left, right, bottom, top, zNear, zFar);
        }

        public static void GlPassThrough(float token)
        {
            __Internal.GlPassThrough(token);
        }

        public static void GlPixelMapfv(uint map, int mapsize, ref float values)
        {
            fixed (float* __refParamPtr2 = &values)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlPixelMapfv(map, mapsize, __arg2);
            }
        }

        public static void GlPixelMapuiv(uint map, int mapsize, ref uint values)
        {
            fixed (uint* __refParamPtr2 = &values)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlPixelMapuiv(map, mapsize, __arg2);
            }
        }

        public static void GlPixelMapusv(uint map, int mapsize, ref ushort values)
        {
            fixed (ushort* __refParamPtr2 = &values)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlPixelMapusv(map, mapsize, __arg2);
            }
        }

        public static void GlPixelStoref(uint pname, float param)
        {
            __Internal.GlPixelStoref(pname, param);
        }

        public static void GlPixelStorei(uint pname, int param)
        {
            __Internal.GlPixelStorei(pname, param);
        }

        public static void GlPixelTransferf(uint pname, float param)
        {
            __Internal.GlPixelTransferf(pname, param);
        }

        public static void GlPixelTransferi(uint pname, int param)
        {
            __Internal.GlPixelTransferi(pname, param);
        }

        public static void GlPixelZoom(float xfactor, float yfactor)
        {
            __Internal.GlPixelZoom(xfactor, yfactor);
        }

        public static void GlPointSize(float size)
        {
            __Internal.GlPointSize(size);
        }

        public static void GlPolygonMode(uint face, uint mode)
        {
            __Internal.GlPolygonMode(face, mode);
        }

        public static void GlPolygonOffset(float factor, float units)
        {
            __Internal.GlPolygonOffset(factor, units);
        }

        public static void GlPolygonStipple(byte* mask)
        {
            __Internal.GlPolygonStipple(mask);
        }

        public static void GlPopAttrib()
        {
            __Internal.GlPopAttrib();
        }

        public static void GlPopClientAttrib()
        {
            __Internal.GlPopClientAttrib();
        }

        public static void GlPopMatrix()
        {
            __Internal.GlPopMatrix();
        }

        public static void GlPopName()
        {
            __Internal.GlPopName();
        }

        public static void GlPrioritizeTextures(int n, ref uint textures, ref float priorities)
        {
            fixed (uint* __refParamPtr1 = &textures)
            {
                var __arg1 = __refParamPtr1;
                fixed (float* __refParamPtr2 = &priorities)
                {
                    var __arg2 = __refParamPtr2;
                    __Internal.GlPrioritizeTextures(n, __arg1, __arg2);
                }
            }
        }

        public static void GlPushAttrib(uint mask)
        {
            __Internal.GlPushAttrib(mask);
        }

        public static void GlPushClientAttrib(uint mask)
        {
            __Internal.GlPushClientAttrib(mask);
        }

        public static void GlPushMatrix()
        {
            __Internal.GlPushMatrix();
        }

        public static void GlPushName(uint name)
        {
            __Internal.GlPushName(name);
        }

        public static void GlRasterPos2d(double x, double y)
        {
            __Internal.GlRasterPos2d(x, y);
        }

        public static void GlRasterPos2dv(ref double v)
        {
            fixed (double* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlRasterPos2dv(__arg0);
            }
        }

        public static void GlRasterPos2f(float x, float y)
        {
            __Internal.GlRasterPos2f(x, y);
        }

        public static void GlRasterPos2fv(ref float v)
        {
            fixed (float* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlRasterPos2fv(__arg0);
            }
        }

        public static void GlRasterPos2i(int x, int y)
        {
            __Internal.GlRasterPos2i(x, y);
        }

        public static void GlRasterPos2iv(ref int v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlRasterPos2iv(__arg0);
            }
        }

        public static void GlRasterPos2s(short x, short y)
        {
            __Internal.GlRasterPos2s(x, y);
        }

        public static void GlRasterPos2sv(ref short v)
        {
            fixed (short* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlRasterPos2sv(__arg0);
            }
        }

        public static void GlRasterPos3d(double x, double y, double z)
        {
            __Internal.GlRasterPos3d(x, y, z);
        }

        public static void GlRasterPos3dv(ref double v)
        {
            fixed (double* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlRasterPos3dv(__arg0);
            }
        }

        public static void GlRasterPos3f(float x, float y, float z)
        {
            __Internal.GlRasterPos3f(x, y, z);
        }

        public static void GlRasterPos3fv(ref float v)
        {
            fixed (float* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlRasterPos3fv(__arg0);
            }
        }

        public static void GlRasterPos3i(int x, int y, int z)
        {
            __Internal.GlRasterPos3i(x, y, z);
        }

        public static void GlRasterPos3iv(ref int v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlRasterPos3iv(__arg0);
            }
        }

        public static void GlRasterPos3s(short x, short y, short z)
        {
            __Internal.GlRasterPos3s(x, y, z);
        }

        public static void GlRasterPos3sv(ref short v)
        {
            fixed (short* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlRasterPos3sv(__arg0);
            }
        }

        public static void GlRasterPos4d(double x, double y, double z, double w)
        {
            __Internal.GlRasterPos4d(x, y, z, w);
        }

        public static void GlRasterPos4dv(ref double v)
        {
            fixed (double* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlRasterPos4dv(__arg0);
            }
        }

        public static void GlRasterPos4f(float x, float y, float z, float w)
        {
            __Internal.GlRasterPos4f(x, y, z, w);
        }

        public static void GlRasterPos4fv(ref float v)
        {
            fixed (float* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlRasterPos4fv(__arg0);
            }
        }

        public static void GlRasterPos4i(int x, int y, int z, int w)
        {
            __Internal.GlRasterPos4i(x, y, z, w);
        }

        public static void GlRasterPos4iv(ref int v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlRasterPos4iv(__arg0);
            }
        }

        public static void GlRasterPos4s(short x, short y, short z, short w)
        {
            __Internal.GlRasterPos4s(x, y, z, w);
        }

        public static void GlRasterPos4sv(ref short v)
        {
            fixed (short* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlRasterPos4sv(__arg0);
            }
        }

        public static void GlReadBuffer(uint mode)
        {
            __Internal.GlReadBuffer(mode);
        }

        public static void GlReadPixels(int x, int y, int width, int height, uint format, uint type, global::System.IntPtr pixels)
        {
            __Internal.GlReadPixels(x, y, width, height, format, type, pixels);
        }

        public static void GlRectd(double x1, double y1, double x2, double y2)
        {
            __Internal.GlRectd(x1, y1, x2, y2);
        }

        public static void GlRectdv(ref double v1, ref double v2)
        {
            fixed (double* __refParamPtr0 = &v1)
            {
                var __arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &v2)
                {
                    var __arg1 = __refParamPtr1;
                    __Internal.GlRectdv(__arg0, __arg1);
                }
            }
        }

        public static void GlRectf(float x1, float y1, float x2, float y2)
        {
            __Internal.GlRectf(x1, y1, x2, y2);
        }

        public static void GlRectfv(ref float v1, ref float v2)
        {
            fixed (float* __refParamPtr0 = &v1)
            {
                var __arg0 = __refParamPtr0;
                fixed (float* __refParamPtr1 = &v2)
                {
                    var __arg1 = __refParamPtr1;
                    __Internal.GlRectfv(__arg0, __arg1);
                }
            }
        }

        public static void GlRecti(int x1, int y1, int x2, int y2)
        {
            __Internal.GlRecti(x1, y1, x2, y2);
        }

        public static void GlRectiv(ref int v1, ref int v2)
        {
            fixed (int* __refParamPtr0 = &v1)
            {
                var __arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &v2)
                {
                    var __arg1 = __refParamPtr1;
                    __Internal.GlRectiv(__arg0, __arg1);
                }
            }
        }

        public static void GlRects(short x1, short y1, short x2, short y2)
        {
            __Internal.GlRects(x1, y1, x2, y2);
        }

        public static void GlRectsv(ref short v1, ref short v2)
        {
            fixed (short* __refParamPtr0 = &v1)
            {
                var __arg0 = __refParamPtr0;
                fixed (short* __refParamPtr1 = &v2)
                {
                    var __arg1 = __refParamPtr1;
                    __Internal.GlRectsv(__arg0, __arg1);
                }
            }
        }

        public static int GlRenderMode(uint mode)
        {
            var __ret = __Internal.GlRenderMode(mode);
            return __ret;
        }

        public static void GlRotated(double angle, double x, double y, double z)
        {
            __Internal.GlRotated(angle, x, y, z);
        }

        public static void GlRotatef(float angle, float x, float y, float z)
        {
            __Internal.GlRotatef(angle, x, y, z);
        }

        public static void GlScaled(double x, double y, double z)
        {
            __Internal.GlScaled(x, y, z);
        }

        public static void GlScalef(float x, float y, float z)
        {
            __Internal.GlScalef(x, y, z);
        }

        public static void GlScissor(int x, int y, int width, int height)
        {
            __Internal.GlScissor(x, y, width, height);
        }

        public static void GlSelectBuffer(int size, ref uint buffer)
        {
            fixed (uint* __refParamPtr1 = &buffer)
            {
                var __arg1 = __refParamPtr1;
                __Internal.GlSelectBuffer(size, __arg1);
            }
        }

        public static void GlShadeModel(uint mode)
        {
            __Internal.GlShadeModel(mode);
        }

        public static void GlStencilFunc(uint func, int @ref, uint mask)
        {
            __Internal.GlStencilFunc(func, @ref, mask);
        }

        public static void GlStencilMask(uint mask)
        {
            __Internal.GlStencilMask(mask);
        }

        public static void GlStencilOp(uint fail, uint zfail, uint zpass)
        {
            __Internal.GlStencilOp(fail, zfail, zpass);
        }

        public static void GlTexCoord1d(double s)
        {
            __Internal.GlTexCoord1d(s);
        }

        public static void GlTexCoord1dv(ref double v)
        {
            fixed (double* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord1dv(__arg0);
            }
        }

        public static void GlTexCoord1f(float s)
        {
            __Internal.GlTexCoord1f(s);
        }

        public static void GlTexCoord1fv(ref float v)
        {
            fixed (float* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord1fv(__arg0);
            }
        }

        public static void GlTexCoord1i(int s)
        {
            __Internal.GlTexCoord1i(s);
        }

        public static void GlTexCoord1iv(ref int v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord1iv(__arg0);
            }
        }

        public static void GlTexCoord1s(short s)
        {
            __Internal.GlTexCoord1s(s);
        }

        public static void GlTexCoord1sv(ref short v)
        {
            fixed (short* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord1sv(__arg0);
            }
        }

        public static void GlTexCoord2d(double s, double t)
        {
            __Internal.GlTexCoord2d(s, t);
        }

        public static void GlTexCoord2dv(ref double v)
        {
            fixed (double* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord2dv(__arg0);
            }
        }

        public static void GlTexCoord2f(float s, float t)
        {
            __Internal.GlTexCoord2f(s, t);
        }

        public static void GlTexCoord2fv(ref float v)
        {
            fixed (float* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord2fv(__arg0);
            }
        }

        public static void GlTexCoord2i(int s, int t)
        {
            __Internal.GlTexCoord2i(s, t);
        }

        public static void GlTexCoord2iv(ref int v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord2iv(__arg0);
            }
        }

        public static void GlTexCoord2s(short s, short t)
        {
            __Internal.GlTexCoord2s(s, t);
        }

        public static void GlTexCoord2sv(ref short v)
        {
            fixed (short* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord2sv(__arg0);
            }
        }

        public static void GlTexCoord3d(double s, double t, double r)
        {
            __Internal.GlTexCoord3d(s, t, r);
        }

        public static void GlTexCoord3dv(ref double v)
        {
            fixed (double* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord3dv(__arg0);
            }
        }

        public static void GlTexCoord3f(float s, float t, float r)
        {
            __Internal.GlTexCoord3f(s, t, r);
        }

        public static void GlTexCoord3fv(ref float v)
        {
            fixed (float* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord3fv(__arg0);
            }
        }

        public static void GlTexCoord3i(int s, int t, int r)
        {
            __Internal.GlTexCoord3i(s, t, r);
        }

        public static void GlTexCoord3iv(ref int v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord3iv(__arg0);
            }
        }

        public static void GlTexCoord3s(short s, short t, short r)
        {
            __Internal.GlTexCoord3s(s, t, r);
        }

        public static void GlTexCoord3sv(ref short v)
        {
            fixed (short* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord3sv(__arg0);
            }
        }

        public static void GlTexCoord4d(double s, double t, double r, double q)
        {
            __Internal.GlTexCoord4d(s, t, r, q);
        }

        public static void GlTexCoord4dv(ref double v)
        {
            fixed (double* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord4dv(__arg0);
            }
        }

        public static void GlTexCoord4f(float s, float t, float r, float q)
        {
            __Internal.GlTexCoord4f(s, t, r, q);
        }

        public static void GlTexCoord4fv(ref float v)
        {
            fixed (float* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord4fv(__arg0);
            }
        }

        public static void GlTexCoord4i(int s, int t, int r, int q)
        {
            __Internal.GlTexCoord4i(s, t, r, q);
        }

        public static void GlTexCoord4iv(ref int v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord4iv(__arg0);
            }
        }

        public static void GlTexCoord4s(short s, short t, short r, short q)
        {
            __Internal.GlTexCoord4s(s, t, r, q);
        }

        public static void GlTexCoord4sv(ref short v)
        {
            fixed (short* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlTexCoord4sv(__arg0);
            }
        }

        public static void GlTexCoordPointer(int size, uint type, int stride, global::System.IntPtr pointer)
        {
            __Internal.GlTexCoordPointer(size, type, stride, pointer);
        }

        public static void GlTexEnvf(uint target, uint pname, float param)
        {
            __Internal.GlTexEnvf(target, pname, param);
        }

        public static void GlTexEnvfv(uint target, uint pname, ref float @params)
        {
            fixed (float* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlTexEnvfv(target, pname, __arg2);
            }
        }

        public static void GlTexEnvi(uint target, uint pname, int param)
        {
            __Internal.GlTexEnvi(target, pname, param);
        }

        public static void GlTexEnviv(uint target, uint pname, ref int @params)
        {
            fixed (int* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlTexEnviv(target, pname, __arg2);
            }
        }

        public static void GlTexGend(uint coord, uint pname, double param)
        {
            __Internal.GlTexGend(coord, pname, param);
        }

        public static void GlTexGendv(uint coord, uint pname, ref double @params)
        {
            fixed (double* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlTexGendv(coord, pname, __arg2);
            }
        }

        public static void GlTexGenf(uint coord, uint pname, float param)
        {
            __Internal.GlTexGenf(coord, pname, param);
        }

        public static void GlTexGenfv(uint coord, uint pname, ref float @params)
        {
            fixed (float* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlTexGenfv(coord, pname, __arg2);
            }
        }

        public static void GlTexGeni(uint coord, uint pname, int param)
        {
            __Internal.GlTexGeni(coord, pname, param);
        }

        public static void GlTexGeniv(uint coord, uint pname, ref int @params)
        {
            fixed (int* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlTexGeniv(coord, pname, __arg2);
            }
        }

        public static void GlTexImage1D(uint target, int level, int internalformat, int width, int border, uint format, uint type, global::System.IntPtr pixels)
        {
            __Internal.GlTexImage1D(target, level, internalformat, width, border, format, type, pixels);
        }

        public static void GlTexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, global::System.IntPtr pixels)
        {
            __Internal.GlTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
        }

        public static void GlTexParameterf(uint target, uint pname, float param)
        {
            __Internal.GlTexParameterf(target, pname, param);
        }

        public static void GlTexParameterfv(uint target, uint pname, ref float @params)
        {
            fixed (float* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlTexParameterfv(target, pname, __arg2);
            }
        }

        public static void GlTexParameteri(uint target, uint pname, int param)
        {
            __Internal.GlTexParameteri(target, pname, param);
        }

        public static void GlTexParameteriv(uint target, uint pname, ref int @params)
        {
            fixed (int* __refParamPtr2 = &@params)
            {
                var __arg2 = __refParamPtr2;
                __Internal.GlTexParameteriv(target, pname, __arg2);
            }
        }

        public static void GlTexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, global::System.IntPtr pixels)
        {
            __Internal.GlTexSubImage1D(target, level, xoffset, width, format, type, pixels);
        }

        public static void GlTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, global::System.IntPtr pixels)
        {
            __Internal.GlTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        public static void GlTranslated(double x, double y, double z)
        {
            __Internal.GlTranslated(x, y, z);
        }

        public static void GlTranslatef(float x, float y, float z)
        {
            __Internal.GlTranslatef(x, y, z);
        }

        public static void GlVertex2d(double x, double y)
        {
            __Internal.GlVertex2d(x, y);
        }

        public static void GlVertex2dv(ref double v)
        {
            fixed (double* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlVertex2dv(__arg0);
            }
        }

        public static void GlVertex2f(float x, float y)
        {
            __Internal.GlVertex2f(x, y);
        }

        public static void GlVertex2fv(ref float v)
        {
            fixed (float* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlVertex2fv(__arg0);
            }
        }

        public static void GlVertex2i(int x, int y)
        {
            __Internal.GlVertex2i(x, y);
        }

        public static void GlVertex2iv(ref int v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlVertex2iv(__arg0);
            }
        }

        public static void GlVertex2s(short x, short y)
        {
            __Internal.GlVertex2s(x, y);
        }

        public static void GlVertex2sv(ref short v)
        {
            fixed (short* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlVertex2sv(__arg0);
            }
        }

        public static void GlVertex3d(double x, double y, double z)
        {
            __Internal.GlVertex3d(x, y, z);
        }

        public static void GlVertex3dv(ref double v)
        {
            fixed (double* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlVertex3dv(__arg0);
            }
        }

        public static void GlVertex3f(float x, float y, float z)
        {
            __Internal.GlVertex3f(x, y, z);
        }

        public static void GlVertex3fv(ref float v)
        {
            fixed (float* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlVertex3fv(__arg0);
            }
        }

        public static void GlVertex3i(int x, int y, int z)
        {
            __Internal.GlVertex3i(x, y, z);
        }

        public static void GlVertex3iv(ref int v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlVertex3iv(__arg0);
            }
        }

        public static void GlVertex3s(short x, short y, short z)
        {
            __Internal.GlVertex3s(x, y, z);
        }

        public static void GlVertex3sv(ref short v)
        {
            fixed (short* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlVertex3sv(__arg0);
            }
        }

        public static void GlVertex4d(double x, double y, double z, double w)
        {
            __Internal.GlVertex4d(x, y, z, w);
        }

        public static void GlVertex4dv(ref double v)
        {
            fixed (double* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlVertex4dv(__arg0);
            }
        }

        public static void GlVertex4f(float x, float y, float z, float w)
        {
            __Internal.GlVertex4f(x, y, z, w);
        }

        public static void GlVertex4fv(ref float v)
        {
            fixed (float* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlVertex4fv(__arg0);
            }
        }

        public static void GlVertex4i(int x, int y, int z, int w)
        {
            __Internal.GlVertex4i(x, y, z, w);
        }

        public static void GlVertex4iv(ref int v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlVertex4iv(__arg0);
            }
        }

        public static void GlVertex4s(short x, short y, short z, short w)
        {
            __Internal.GlVertex4s(x, y, z, w);
        }

        public static void GlVertex4sv(ref short v)
        {
            fixed (short* __refParamPtr0 = &v)
            {
                var __arg0 = __refParamPtr0;
                __Internal.GlVertex4sv(__arg0);
            }
        }

        public static void GlVertexPointer(int size, uint type, int stride, global::System.IntPtr pointer)
        {
            __Internal.GlVertexPointer(size, type, stride, pointer);
        }

        public static void GlViewport(int x, int y, int width, int height)
        {
            __Internal.GlViewport(x, y, width, height);
        }
    }
}
