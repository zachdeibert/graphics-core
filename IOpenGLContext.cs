using System;

namespace Com.GitHub.ZachDeibert.GraphicsCore {
    public interface IOpenGLContext : IRenderContext {
        void Accum(uint op, float value);
        void AlphaFunc(uint func, float @ref);
        void ArrayElement(int i);
        void Begin(uint mode);
        void BindTexture(uint target, uint texture);
        void BlendFunc(uint sfactor, uint dfactor);
        void CallList(uint list);
        void CallLists(int n, uint type, IntPtr lists);
        void Clear(uint mask);
        void ClearAccum(float red, float green, float blue, float alpha);
        void ClearColor(float red, float green, float blue, float alpha);
        void ClearDepth(double depth);
        void ClearIndex(float c);
        void ClearStencil(int s);
        void ClipPlane(uint plane, ref double equation);
        void Color3b(sbyte red, sbyte green, sbyte blue);
        void Color3d(double red, double green, double blue);
        void Color3dv(ref double v);
        void Color3f(float red, float green, float blue);
        void Color3fv(ref float v);
        void Color3i(int red, int green, int blue);
        void Color3iv(ref int v);
        void Color3s(short red, short green, short blue);
        void Color3sv(ref short v);
        void Color3ub(byte red, byte green, byte blue);
        void Color3ui(uint red, uint green, uint blue);
        void Color3uiv(ref uint v);
        void Color3us(ushort red, ushort green, ushort blue);
        void Color3usv(ref ushort v);
        void Color4b(sbyte red, sbyte green, sbyte blue, sbyte alpha);
        void Color4d(double red, double green, double blue, double alpha);
        void Color4dv(ref double v);
        void Color4f(float red, float green, float blue, float alpha);
        void Color4fv(ref float v);
        void Color4i(int red, int green, int blue, int alpha);
        void Color4iv(ref int v);
        void Color4s(short red, short green, short blue, short alpha);
        void Color4sv(ref short v);
        void Color4ub(byte red, byte green, byte blue, byte alpha);
        void Color4ui(uint red, uint green, uint blue, uint alpha);
        void Color4uiv(ref uint v);
        void Color4us(ushort red, ushort green, ushort blue, ushort alpha);
        void Color4usv(ref ushort v);
        void ColorMask(byte red, byte green, byte blue, byte alpha);
        void ColorMaterial(uint face, uint mode);
        void ColorPointer(int size, uint type, int stride, IntPtr pointer);
        void CopyPixels(int x, int y, int width, int height, uint type);
        void CopyTexImage1D(uint target, int level, uint internalFormat, int x, int y, int width, int border);
        void CopyTexImage2D(uint target, int level, uint internalFormat, int x, int y, int width, int height, int border);
        void CopyTexSubImage1D(uint target, int level, int xoffset, int x, int y, int width);
        void CopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        void CullFace(uint mode);
        void DeleteLists(uint list, int range);
        void DeleteTextures(int n, ref uint textures);
        void DepthFunc(uint func);
        void DepthMask(byte flag);
        void DepthRange(double zNear, double zFar);
        void Disable(uint cap);
        void DisableClientState(uint array);
        void DrawArrays(uint mode, int first, int count);
        void DrawBuffer(uint mode);
        void DrawElements(uint mode, int count, uint type, IntPtr indices);
        void DrawPixels(int width, int height, uint format, uint type, IntPtr pixels);
        void EdgeFlag(byte flag);
        void EdgeFlagPointer(int stride, IntPtr pointer);
        void Enable(uint cap);
        void EnableClientState(uint array);
        void End();
        void EndList();
        void EvalCoord1d(double u);
        void EvalCoord1dv(ref double u);
        void EvalCoord1f(float u);
        void EvalCoord1fv(ref float u);
        void EvalCoord2d(double u, double v);
        void EvalCoord2dv(ref double u);
        void EvalCoord2f(float u, float v);
        void EvalCoord2fv(ref float u);
        void EvalMesh1(uint mode, int i1, int i2);
        void EvalMesh2(uint mode, int i1, int i2, int j1, int j2);
        void EvalPoint1(int i);
        void EvalPoint2(int i, int j);
        void FeedbackBuffer(int size, uint type, ref float buffer);
        void Finish();
        void Flush();
        void Fogf(uint pname, float param);
        void Fogfv(uint pname, ref float @params);
        void Fogi(uint pname, int param);
        void Fogiv(uint pname, ref int @params);
        void FrontFace(uint mode);
        void Frustum(double left, double right, double bottom, double top, double zNear, double zFar);
        uint GenLists(int range);
        void GenTextures(int n, ref uint textures);
        void GetClipPlane(uint plane, ref double equation);
        void GetDoublev(uint pname, ref double @params);
        uint GetError();
        void GetFloatv(uint pname, ref float @params);
        void GetIntegerv(uint pname, ref int @params);
        void GetLightfv(uint light, uint pname, ref float @params);
        void GetLightiv(uint light, uint pname, ref int @params);
        void GetMapdv(uint target, uint query, ref double v);
        void GetMapfv(uint target, uint query, ref float v);
        void GetMapiv(uint target, uint query, ref int v);
        void GetMaterialfv(uint face, uint pname, ref float @params);
        void GetMaterialiv(uint face, uint pname, ref int @params);
        void GetPixelMapfv(uint map, ref float values);
        void GetPixelMapuiv(uint map, ref uint values);
        void GetPixelMapusv(uint map, ref ushort values);
        void GetTexEnvfv(uint target, uint pname, ref float @params);
        void GetTexEnviv(uint target, uint pname, ref int @params);
        void GetTexGendv(uint coord, uint pname, ref double @params);
        void GetTexGenfv(uint coord, uint pname, ref float @params);
        void GetTexGeniv(uint coord, uint pname, ref int @params);
        void GetTexImage(uint target, int level, uint format, uint type, IntPtr pixels);
        void GetTexLevelParameterfv(uint target, int level, uint pname, ref float @params);
        void GetTexLevelParameteriv(uint target, int level, uint pname, ref int @params);
        void GetTexParameterfv(uint target, uint pname, ref float @params);
        void GetTexParameteriv(uint target, uint pname, ref int @params);
        void Hint(uint target, uint mode);
        void IndexMask(uint mask);
        void IndexPointer(uint type, int stride, IntPtr pointer);
        void Indexd(double c);
        void Indexdv(ref double c);
        void Indexf(float c);
        void Indexfv(ref float c);
        void Indexi(int c);
        void Indexiv(ref int c);
        void Indexs(short c);
        void Indexsv(ref short c);
        void Indexub(byte c);
        void InitNames();
        void InterleavedArrays(uint format, int stride, IntPtr pointer);
        byte IsEnabled(uint cap);
        byte IsList(uint list);
        byte IsTexture(uint texture);
        void LightModelf(uint pname, float param);
        void LightModelfv(uint pname, ref float @params);
        void LightModeli(uint pname, int param);
        void LightModeliv(uint pname, ref int @params);
        void Lightf(uint light, uint pname, float param);
        void Lightfv(uint light, uint pname, ref float @params);
        void Lighti(uint light, uint pname, int param);
        void Lightiv(uint light, uint pname, ref int @params);
        void LineStipple(int factor, ushort pattern);
        void LineWidth(float width);
        void ListBase(uint @base);
        void LoadIdentity();
        void LoadMatrixd(ref double m);
        void LoadMatrixf(ref float m);
        void LoadName(uint name);
        void LogicOp(uint opcode);
        void Map1d(uint target, double u1, double u2, int stride, int order, ref double points);
        void Map1f(uint target, float u1, float u2, int stride, int order, ref float points);
        void Map2d(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref double points);
        void Map2f(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref float points);
        void MapGrid1d(int un, double u1, double u2);
        void MapGrid1f(int un, float u1, float u2);
        void MapGrid2d(int un, double u1, double u2, int vn, double v1, double v2);
        void MapGrid2f(int un, float u1, float u2, int vn, float v1, float v2);
        void Materialf(uint face, uint pname, float param);
        void Materialfv(uint face, uint pname, ref float @params);
        void Materiali(uint face, uint pname, int param);
        void Materialiv(uint face, uint pname, ref int @params);
        void MatrixMode(uint mode);
        void MultMatrixd(ref double m);
        void MultMatrixf(ref float m);
        void NewList(uint list, uint mode);
        void Normal3b(sbyte nx, sbyte ny, sbyte nz);
        void Normal3d(double nx, double ny, double nz);
        void Normal3dv(ref double v);
        void Normal3f(float nx, float ny, float nz);
        void Normal3fv(ref float v);
        void Normal3i(int nx, int ny, int nz);
        void Normal3iv(ref int v);
        void Normal3s(short nx, short ny, short nz);
        void Normal3sv(ref short v);
        void NormalPointer(uint type, int stride, IntPtr pointer);
        void Ortho(double left, double right, double bottom, double top, double zNear, double zFar);
        void PassThrough(float token);
        void PixelMapfv(uint map, int mapsize, ref float values);
        void PixelMapuiv(uint map, int mapsize, ref uint values);
        void PixelMapusv(uint map, int mapsize, ref ushort values);
        void PixelStoref(uint pname, float param);
        void PixelStorei(uint pname, int param);
        void PixelTransferf(uint pname, float param);
        void PixelTransferi(uint pname, int param);
        void PixelZoom(float xfactor, float yfactor);
        void PointSize(float size);
        void PolygonMode(uint face, uint mode);
        void PolygonOffset(float factor, float units);
        void PopAttrib();
        void PopClientAttrib();
        void PopMatrix();
        void PopName();
        void PrioritizeTextures(int n, ref uint textures, ref float priorities);
        void PushAttrib(uint mask);
        void PushClientAttrib(uint mask);
        void PushMatrix();
        void PushName(uint name);
        void RasterPos2d(double x, double y);
        void RasterPos2dv(ref double v);
        void RasterPos2f(float x, float y);
        void RasterPos2fv(ref float v);
        void RasterPos2i(int x, int y);
        void RasterPos2iv(ref int v);
        void RasterPos2s(short x, short y);
        void RasterPos2sv(ref short v);
        void RasterPos3d(double x, double y, double z);
        void RasterPos3dv(ref double v);
        void RasterPos3f(float x, float y, float z);
        void RasterPos3fv(ref float v);
        void RasterPos3i(int x, int y, int z);
        void RasterPos3iv(ref int v);
        void RasterPos3s(short x, short y, short z);
        void RasterPos3sv(ref short v);
        void RasterPos4d(double x, double y, double z, double w);
        void RasterPos4dv(ref double v);
        void RasterPos4f(float x, float y, float z, float w);
        void RasterPos4fv(ref float v);
        void RasterPos4i(int x, int y, int z, int w);
        void RasterPos4iv(ref int v);
        void RasterPos4s(short x, short y, short z, short w);
        void RasterPos4sv(ref short v);
        void ReadBuffer(uint mode);
        void ReadPixels(int x, int y, int width, int height, uint format, uint type, IntPtr pixels);
        void Rectd(double x1, double y1, double x2, double y2);
        void Rectdv(ref double v1, ref double v2);
        void Rectf(float x1, float y1, float x2, float y2);
        void Rectfv(ref float v1, ref float v2);
        void Recti(int x1, int y1, int x2, int y2);
        void Rectiv(ref int v1, ref int v2);
        void Rects(short x1, short y1, short x2, short y2);
        void Rectsv(ref short v1, ref short v2);
        int RenderMode(uint mode);
        void Rotated(double angle, double x, double y, double z);
        void Rotatef(float angle, float x, float y, float z);
        void Scaled(double x, double y, double z);
        void Scalef(float x, float y, float z);
        void Scissor(int x, int y, int width, int height);
        void SelectBuffer(int size, ref uint buffer);
        void ShadeModel(uint mode);
        void StencilFunc(uint func, int @ref, uint mask);
        void StencilMask(uint mask);
        void StencilOp(uint fail, uint zfail, uint zpass);
        void TexCoord1d(double s);
        void TexCoord1dv(ref double v);
        void TexCoord1f(float s);
        void TexCoord1fv(ref float v);
        void TexCoord1i(int s);
        void TexCoord1iv(ref int v);
        void TexCoord1s(short s);
        void TexCoord1sv(ref short v);
        void TexCoord2d(double s, double t);
        void TexCoord2dv(ref double v);
        void TexCoord2f(float s, float t);
        void TexCoord2fv(ref float v);
        void TexCoord2i(int s, int t);
        void TexCoord2iv(ref int v);
        void TexCoord2s(short s, short t);
        void TexCoord2sv(ref short v);
        void TexCoord3d(double s, double t, double r);
        void TexCoord3dv(ref double v);
        void TexCoord3f(float s, float t, float r);
        void TexCoord3fv(ref float v);
        void TexCoord3i(int s, int t, int r);
        void TexCoord3iv(ref int v);
        void TexCoord3s(short s, short t, short r);
        void TexCoord3sv(ref short v);
        void TexCoord4d(double s, double t, double r, double q);
        void TexCoord4dv(ref double v);
        void TexCoord4f(float s, float t, float r, float q);
        void TexCoord4fv(ref float v);
        void TexCoord4i(int s, int t, int r, int q);
        void TexCoord4iv(ref int v);
        void TexCoord4s(short s, short t, short r, short q);
        void TexCoord4sv(ref short v);
        void TexCoordPointer(int size, uint type, int stride, IntPtr pointer);
        void TexEnvf(uint target, uint pname, float param);
        void TexEnvfv(uint target, uint pname, ref float @params);
        void TexEnvi(uint target, uint pname, int param);
        void TexEnviv(uint target, uint pname, ref int @params);
        void TexGend(uint coord, uint pname, double param);
        void TexGendv(uint coord, uint pname, ref double @params);
        void TexGenf(uint coord, uint pname, float param);
        void TexGenfv(uint coord, uint pname, ref float @params);
        void TexGeni(uint coord, uint pname, int param);
        void TexGeniv(uint coord, uint pname, ref int @params);
        void TexImage1D(uint target, int level, int internalformat, int width, int border, uint format, uint type, IntPtr pixels);
        void TexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, IntPtr pixels);
        void TexParameterf(uint target, uint pname, float param);
        void TexParameterfv(uint target, uint pname, ref float @params);
        void TexParameteri(uint target, uint pname, int param);
        void TexParameteriv(uint target, uint pname, ref int @params);
        void TexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, IntPtr pixels);
        void TexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, IntPtr pixels);
        void Translated(double x, double y, double z);
        void Translatef(float x, float y, float z);
        void Vertex2d(double x, double y);
        void Vertex2dv(ref double v);
        void Vertex2f(float x, float y);
        void Vertex2fv(ref float v);
        void Vertex2i(int x, int y);
        void Vertex2iv(ref int v);
        void Vertex2s(short x, short y);
        void Vertex2sv(ref short v);
        void Vertex3d(double x, double y, double z);
        void Vertex3dv(ref double v);
        void Vertex3f(float x, float y, float z);
        void Vertex3fv(ref float v);
        void Vertex3i(int x, int y, int z);
        void Vertex3iv(ref int v);
        void Vertex3s(short x, short y, short z);
        void Vertex3sv(ref short v);
        void Vertex4d(double x, double y, double z, double w);
        void Vertex4dv(ref double v);
        void Vertex4f(float x, float y, float z, float w);
        void Vertex4fv(ref float v);
        void Vertex4i(int x, int y, int z, int w);
        void Vertex4iv(ref int v);
        void Vertex4s(short x, short y, short z, short w);
        void Vertex4sv(ref short v);
        void VertexPointer(int size, uint type, int stride, IntPtr pointer);
        void Viewport(int x, int y, int width, int height);
        byte AreTexturesResident(int n, ref uint textures, byte[] residences);
        void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap);
        void Color3bv(sbyte[] v);
        void Color3ubv(byte[] v);
        void Color4bv(sbyte[] v);
        void Color4ubv(byte[] v);
        void EdgeFlagv(byte[] flag);
        void GetBooleanv(uint pname, byte[] @params);
        void GetPointerv(uint pname, byte[][] @params);
        void GetPolygonStipple(byte[] mask);
        string GetString(uint name);
        void Indexubv(byte[] c);
        void Normal3bv(sbyte[] v);
        void PolygonStipple(byte[] mask);
    }
}
